// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: proto/ei.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace ei {
    export enum Platform {
        UNKNOWN_PLATFORM = 0,
        IOS = 1,
        DROID = 2
    }
    export enum DeviceFormFactor {
        UNKNOWN_DEVICE = 0,
        PHONE = 1,
        TABLET = 2
    }
    export enum AdNetwork {
        VUNGLE = 0,
        CHARTBOOST = 1,
        AD_COLONY = 2,
        HYPER_MX = 3,
        UNITY = 4,
        FACEBOOK = 5,
        APPLOVIN = 6
    }
    export enum Egg {
        EDIBLE = 1,
        SUPERFOOD = 2,
        MEDICAL = 3,
        ROCKET_FUEL = 4,
        SUPER_MATERIAL = 5,
        FUSION = 6,
        QUANTUM = 7,
        IMMORTALITY = 8,
        TACHYON = 9,
        GRAVITON = 10,
        DILITHIUM = 11,
        PRODIGY = 12,
        TERRAFORM = 13,
        ANTIMATTER = 14,
        DARK_MATTER = 15,
        AI = 16,
        NEBULA = 17,
        UNIVERSE = 18,
        ENLIGHTENMENT = 19,
        CHOCOLATE = 100,
        EASTER = 101,
        WATERBALLOON = 102,
        FIREWORK = 103,
        PUMPKIN = 104,
        CUSTOM_EGG = 200,
        UNKNOWN = 1000
    }
    export enum FarmType {
        EMPTY = 1,
        HOME = 2,
        CONTRACT = 3
    }
    export enum GoalType {
        EGGS_LAID = 1,
        UNKNOWN_GOAL = 100
    }
    export enum RewardType {
        CASH = 1,
        GOLD = 2,
        SOUL_EGGS = 3,
        EGGS_OF_PROPHECY = 4,
        EPIC_RESEARCH_ITEM = 5,
        PIGGY_FILL = 6,
        PIGGY_MULTIPLIER = 7,
        PIGGY_LEVEL_BUMP = 8,
        BOOST = 9,
        BOOST_TOKEN = 10,
        ARTIFACT = 11,
        ARTIFACT_CASE = 12,
        CHICKEN = 13,
        SHELL_SCRIPT = 14,
        UNKNOWN_REWARD = 100
    }
    export enum UILocation {
        NONE = 0,
        SHOP = 1,
        BOOST_SHOP = 2,
        PIGGY = 3,
        PRO_PERMIT = 4,
        ULTRA_SHOP = 10,
        SHELLS = 5,
        SHELL_SETS = 6,
        SHELLS_SHOWCASE = 12,
        CHICKENS = 7,
        CHICKEN_HATS = 11,
        EPIC_RESEARCH = 8,
        SETTINGS = 9,
        HELP = 13,
        UNIVERSITY = 14
    }
    export enum UserType {
        ALL_USERS = 0,
        EGGED_UP = 15,
        CONTRACTS_UNLOCKED = 1,
        ARTIFACTS_UNLOCKED = 3,
        FUEL_TANK_UNLOCKED = 4,
        PRO_PERMIT_ACTIVE = 5,
        ULTRA_ACTIVE = 6,
        NO_PRO_PERMIT = 7,
        NO_ULTRA = 8,
        CONTRACTS_INACTIVE = 9,
        CONTRACTS_ACTIVE = 10,
        PLAYING_CONTRACT = 11,
        ARTIFACTS_INACTIVE = 12,
        ARTIFACTS_ACTIVE = 13,
        PRESTIGE_READY = 14,
        PIGGY_HESITANT = 16
    }
    export enum LeaderboardScope {
        ALL_TIME = 0,
        CURRENT_SEASON = 1
    }
    export class Vector3 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
            z?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
                if ("z" in data && data.z != undefined) {
                    this.z = data.z;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_x() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_y() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get z() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set z(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_z() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            x?: number;
            y?: number;
            z?: number;
        }): Vector3 {
            const message = new Vector3({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            if (data.z != null) {
                message.z = data.z;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
                z?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            if (this.z != null) {
                data.z = this.z;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_x)
                writer.writeFloat(1, this.x);
            if (this.has_y)
                writer.writeFloat(2, this.y);
            if (this.has_z)
                writer.writeFloat(3, this.z);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vector3 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vector3();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readFloat();
                        break;
                    case 2:
                        message.y = reader.readFloat();
                        break;
                    case 3:
                        message.z = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Vector3 {
            return Vector3.deserialize(bytes);
        }
    }
    export class Vector4 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            x?: number;
            y?: number;
            z?: number;
            w?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("x" in data && data.x != undefined) {
                    this.x = data.x;
                }
                if ("y" in data && data.y != undefined) {
                    this.y = data.y;
                }
                if ("z" in data && data.z != undefined) {
                    this.z = data.z;
                }
                if ("w" in data && data.w != undefined) {
                    this.w = data.w;
                }
            }
        }
        get x() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set x(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_x() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get y() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set y(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_y() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get z() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set z(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_z() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get w() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set w(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_w() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            x?: number;
            y?: number;
            z?: number;
            w?: number;
        }): Vector4 {
            const message = new Vector4({});
            if (data.x != null) {
                message.x = data.x;
            }
            if (data.y != null) {
                message.y = data.y;
            }
            if (data.z != null) {
                message.z = data.z;
            }
            if (data.w != null) {
                message.w = data.w;
            }
            return message;
        }
        toObject() {
            const data: {
                x?: number;
                y?: number;
                z?: number;
                w?: number;
            } = {};
            if (this.x != null) {
                data.x = this.x;
            }
            if (this.y != null) {
                data.y = this.y;
            }
            if (this.z != null) {
                data.z = this.z;
            }
            if (this.w != null) {
                data.w = this.w;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_x)
                writer.writeFloat(1, this.x);
            if (this.has_y)
                writer.writeFloat(2, this.y);
            if (this.has_z)
                writer.writeFloat(3, this.z);
            if (this.has_w)
                writer.writeFloat(4, this.w);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Vector4 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vector4();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.x = reader.readFloat();
                        break;
                    case 2:
                        message.y = reader.readFloat();
                        break;
                    case 3:
                        message.z = reader.readFloat();
                        break;
                    case 4:
                        message.w = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Vector4 {
            return Vector4.deserialize(bytes);
        }
    }
    export class Backup extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            ei_user_id?: string;
            game_services_id?: string;
            push_user_id?: string;
            device_id?: string;
            user_name?: string;
            approx_time?: number;
            version?: number;
            force_offer_backup?: boolean;
            force_backup?: boolean;
            settings?: Backup.Settings;
            tutorial?: Backup.Tutorial;
            stats?: Backup.Stats;
            game?: Backup.Game;
            artifacts?: Backup.Artifacts;
            shells?: Backup.Shells;
            sim?: Backup.Simulation;
            farms: Backup.Simulation[];
            mission?: Backup.Mission;
            misc?: Backup.Misc;
            contracts?: MyContracts;
            artifacts_db?: ArtifactsDB;
            shell_db?: ShellDB;
            read_mail_ids: string[];
            mail_state?: MailState;
            checksum?: number;
            signature?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [12, 23], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("ei_user_id" in data && data.ei_user_id != undefined) {
                    this.ei_user_id = data.ei_user_id;
                }
                if ("game_services_id" in data && data.game_services_id != undefined) {
                    this.game_services_id = data.game_services_id;
                }
                if ("push_user_id" in data && data.push_user_id != undefined) {
                    this.push_user_id = data.push_user_id;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("approx_time" in data && data.approx_time != undefined) {
                    this.approx_time = data.approx_time;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("force_offer_backup" in data && data.force_offer_backup != undefined) {
                    this.force_offer_backup = data.force_offer_backup;
                }
                if ("force_backup" in data && data.force_backup != undefined) {
                    this.force_backup = data.force_backup;
                }
                if ("settings" in data && data.settings != undefined) {
                    this.settings = data.settings;
                }
                if ("tutorial" in data && data.tutorial != undefined) {
                    this.tutorial = data.tutorial;
                }
                if ("stats" in data && data.stats != undefined) {
                    this.stats = data.stats;
                }
                if ("game" in data && data.game != undefined) {
                    this.game = data.game;
                }
                if ("artifacts" in data && data.artifacts != undefined) {
                    this.artifacts = data.artifacts;
                }
                if ("shells" in data && data.shells != undefined) {
                    this.shells = data.shells;
                }
                if ("sim" in data && data.sim != undefined) {
                    this.sim = data.sim;
                }
                this.farms = data.farms;
                if ("mission" in data && data.mission != undefined) {
                    this.mission = data.mission;
                }
                if ("misc" in data && data.misc != undefined) {
                    this.misc = data.misc;
                }
                if ("contracts" in data && data.contracts != undefined) {
                    this.contracts = data.contracts;
                }
                if ("artifacts_db" in data && data.artifacts_db != undefined) {
                    this.artifacts_db = data.artifacts_db;
                }
                if ("shell_db" in data && data.shell_db != undefined) {
                    this.shell_db = data.shell_db;
                }
                this.read_mail_ids = data.read_mail_ids;
                if ("mail_state" in data && data.mail_state != undefined) {
                    this.mail_state = data.mail_state;
                }
                if ("checksum" in data && data.checksum != undefined) {
                    this.checksum = data.checksum;
                }
                if ("signature" in data && data.signature != undefined) {
                    this.signature = data.signature;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ei_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set ei_user_id(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get has_ei_user_id() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get game_services_id() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set game_services_id(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_game_services_id() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get push_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 26, "") as string;
        }
        set push_user_id(value: string) {
            pb_1.Message.setField(this, 26, value);
        }
        get has_push_user_id() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get has_device_id() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_user_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get approx_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set approx_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_approx_time() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get has_version() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get force_offer_backup() {
            return pb_1.Message.getFieldWithDefault(this, 20, false) as boolean;
        }
        set force_offer_backup(value: boolean) {
            pb_1.Message.setField(this, 20, value);
        }
        get has_force_offer_backup() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get force_backup() {
            return pb_1.Message.getFieldWithDefault(this, 22, false) as boolean;
        }
        set force_backup(value: boolean) {
            pb_1.Message.setField(this, 22, value);
        }
        get has_force_backup() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get settings() {
            return pb_1.Message.getWrapperField(this, Backup.Settings, 4) as Backup.Settings;
        }
        set settings(value: Backup.Settings) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_settings() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get tutorial() {
            return pb_1.Message.getWrapperField(this, Backup.Tutorial, 5) as Backup.Tutorial;
        }
        set tutorial(value: Backup.Tutorial) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_tutorial() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get stats() {
            return pb_1.Message.getWrapperField(this, Backup.Stats, 6) as Backup.Stats;
        }
        set stats(value: Backup.Stats) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_stats() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get game() {
            return pb_1.Message.getWrapperField(this, Backup.Game, 7) as Backup.Game;
        }
        set game(value: Backup.Game) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_game() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get artifacts() {
            return pb_1.Message.getWrapperField(this, Backup.Artifacts, 14) as Backup.Artifacts;
        }
        set artifacts(value: Backup.Artifacts) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_artifacts() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get shells() {
            return pb_1.Message.getWrapperField(this, Backup.Shells, 25) as Backup.Shells;
        }
        set shells(value: Backup.Shells) {
            pb_1.Message.setWrapperField(this, 25, value);
        }
        get has_shells() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get sim() {
            return pb_1.Message.getWrapperField(this, Backup.Simulation, 8) as Backup.Simulation;
        }
        set sim(value: Backup.Simulation) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_sim() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get farms() {
            return pb_1.Message.getRepeatedWrapperField(this, Backup.Simulation, 12) as Backup.Simulation[];
        }
        set farms(value: Backup.Simulation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        get mission() {
            return pb_1.Message.getWrapperField(this, Backup.Mission, 9) as Backup.Mission;
        }
        set mission(value: Backup.Mission) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_mission() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get misc() {
            return pb_1.Message.getWrapperField(this, Backup.Misc, 10) as Backup.Misc;
        }
        set misc(value: Backup.Misc) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_misc() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get contracts() {
            return pb_1.Message.getWrapperField(this, MyContracts, 13) as MyContracts;
        }
        set contracts(value: MyContracts) {
            pb_1.Message.setWrapperField(this, 13, value);
        }
        get has_contracts() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get artifacts_db() {
            return pb_1.Message.getWrapperField(this, ArtifactsDB, 15) as ArtifactsDB;
        }
        set artifacts_db(value: ArtifactsDB) {
            pb_1.Message.setWrapperField(this, 15, value);
        }
        get has_artifacts_db() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get shell_db() {
            return pb_1.Message.getWrapperField(this, ShellDB, 24) as ShellDB;
        }
        set shell_db(value: ShellDB) {
            pb_1.Message.setWrapperField(this, 24, value);
        }
        get has_shell_db() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get read_mail_ids() {
            return pb_1.Message.getFieldWithDefault(this, 23, []) as string[];
        }
        set read_mail_ids(value: string[]) {
            pb_1.Message.setField(this, 23, value);
        }
        get mail_state() {
            return pb_1.Message.getWrapperField(this, MailState, 27) as MailState;
        }
        set mail_state(value: MailState) {
            pb_1.Message.setWrapperField(this, 27, value);
        }
        get has_mail_state() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get checksum() {
            return pb_1.Message.getFieldWithDefault(this, 100, 0) as number;
        }
        set checksum(value: number) {
            pb_1.Message.setField(this, 100, value);
        }
        get has_checksum() {
            return pb_1.Message.getField(this, 100) != null;
        }
        get signature() {
            return pb_1.Message.getFieldWithDefault(this, 101, "") as string;
        }
        set signature(value: string) {
            pb_1.Message.setField(this, 101, value);
        }
        get has_signature() {
            return pb_1.Message.getField(this, 101) != null;
        }
        static fromObject(data: {
            user_id?: string;
            ei_user_id?: string;
            game_services_id?: string;
            push_user_id?: string;
            device_id?: string;
            user_name?: string;
            approx_time?: number;
            version?: number;
            force_offer_backup?: boolean;
            force_backup?: boolean;
            settings?: ReturnType<typeof Backup.Settings.prototype.toObject>;
            tutorial?: ReturnType<typeof Backup.Tutorial.prototype.toObject>;
            stats?: ReturnType<typeof Backup.Stats.prototype.toObject>;
            game?: ReturnType<typeof Backup.Game.prototype.toObject>;
            artifacts?: ReturnType<typeof Backup.Artifacts.prototype.toObject>;
            shells?: ReturnType<typeof Backup.Shells.prototype.toObject>;
            sim?: ReturnType<typeof Backup.Simulation.prototype.toObject>;
            farms?: ReturnType<typeof Backup.Simulation.prototype.toObject>[];
            mission?: ReturnType<typeof Backup.Mission.prototype.toObject>;
            misc?: ReturnType<typeof Backup.Misc.prototype.toObject>;
            contracts?: ReturnType<typeof MyContracts.prototype.toObject>;
            artifacts_db?: ReturnType<typeof ArtifactsDB.prototype.toObject>;
            shell_db?: ReturnType<typeof ShellDB.prototype.toObject>;
            read_mail_ids: string[];
            mail_state?: ReturnType<typeof MailState.prototype.toObject>;
            checksum?: number;
            signature?: string;
        }): Backup {
            const message = new Backup({
                farms: data.farms.map(item => Backup.Simulation.fromObject(item)),
                read_mail_ids: data.read_mail_ids
            });
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.ei_user_id != null) {
                message.ei_user_id = data.ei_user_id;
            }
            if (data.game_services_id != null) {
                message.game_services_id = data.game_services_id;
            }
            if (data.push_user_id != null) {
                message.push_user_id = data.push_user_id;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.approx_time != null) {
                message.approx_time = data.approx_time;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.force_offer_backup != null) {
                message.force_offer_backup = data.force_offer_backup;
            }
            if (data.force_backup != null) {
                message.force_backup = data.force_backup;
            }
            if (data.settings != null) {
                message.settings = Backup.Settings.fromObject(data.settings);
            }
            if (data.tutorial != null) {
                message.tutorial = Backup.Tutorial.fromObject(data.tutorial);
            }
            if (data.stats != null) {
                message.stats = Backup.Stats.fromObject(data.stats);
            }
            if (data.game != null) {
                message.game = Backup.Game.fromObject(data.game);
            }
            if (data.artifacts != null) {
                message.artifacts = Backup.Artifacts.fromObject(data.artifacts);
            }
            if (data.shells != null) {
                message.shells = Backup.Shells.fromObject(data.shells);
            }
            if (data.sim != null) {
                message.sim = Backup.Simulation.fromObject(data.sim);
            }
            if (data.mission != null) {
                message.mission = Backup.Mission.fromObject(data.mission);
            }
            if (data.misc != null) {
                message.misc = Backup.Misc.fromObject(data.misc);
            }
            if (data.contracts != null) {
                message.contracts = MyContracts.fromObject(data.contracts);
            }
            if (data.artifacts_db != null) {
                message.artifacts_db = ArtifactsDB.fromObject(data.artifacts_db);
            }
            if (data.shell_db != null) {
                message.shell_db = ShellDB.fromObject(data.shell_db);
            }
            if (data.mail_state != null) {
                message.mail_state = MailState.fromObject(data.mail_state);
            }
            if (data.checksum != null) {
                message.checksum = data.checksum;
            }
            if (data.signature != null) {
                message.signature = data.signature;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                ei_user_id?: string;
                game_services_id?: string;
                push_user_id?: string;
                device_id?: string;
                user_name?: string;
                approx_time?: number;
                version?: number;
                force_offer_backup?: boolean;
                force_backup?: boolean;
                settings?: ReturnType<typeof Backup.Settings.prototype.toObject>;
                tutorial?: ReturnType<typeof Backup.Tutorial.prototype.toObject>;
                stats?: ReturnType<typeof Backup.Stats.prototype.toObject>;
                game?: ReturnType<typeof Backup.Game.prototype.toObject>;
                artifacts?: ReturnType<typeof Backup.Artifacts.prototype.toObject>;
                shells?: ReturnType<typeof Backup.Shells.prototype.toObject>;
                sim?: ReturnType<typeof Backup.Simulation.prototype.toObject>;
                farms?: ReturnType<typeof Backup.Simulation.prototype.toObject>[];
                mission?: ReturnType<typeof Backup.Mission.prototype.toObject>;
                misc?: ReturnType<typeof Backup.Misc.prototype.toObject>;
                contracts?: ReturnType<typeof MyContracts.prototype.toObject>;
                artifacts_db?: ReturnType<typeof ArtifactsDB.prototype.toObject>;
                shell_db?: ReturnType<typeof ShellDB.prototype.toObject>;
                read_mail_ids: string[];
                mail_state?: ReturnType<typeof MailState.prototype.toObject>;
                checksum?: number;
                signature?: string;
            } = {
                read_mail_ids: this.read_mail_ids
            };
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.ei_user_id != null) {
                data.ei_user_id = this.ei_user_id;
            }
            if (this.game_services_id != null) {
                data.game_services_id = this.game_services_id;
            }
            if (this.push_user_id != null) {
                data.push_user_id = this.push_user_id;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.approx_time != null) {
                data.approx_time = this.approx_time;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.force_offer_backup != null) {
                data.force_offer_backup = this.force_offer_backup;
            }
            if (this.force_backup != null) {
                data.force_backup = this.force_backup;
            }
            if (this.settings != null) {
                data.settings = this.settings.toObject();
            }
            if (this.tutorial != null) {
                data.tutorial = this.tutorial.toObject();
            }
            if (this.stats != null) {
                data.stats = this.stats.toObject();
            }
            if (this.game != null) {
                data.game = this.game.toObject();
            }
            if (this.artifacts != null) {
                data.artifacts = this.artifacts.toObject();
            }
            if (this.shells != null) {
                data.shells = this.shells.toObject();
            }
            if (this.sim != null) {
                data.sim = this.sim.toObject();
            }
            if (this.farms != null) {
                data.farms = this.farms.map((item: Backup.Simulation) => item.toObject());
            }
            if (this.mission != null) {
                data.mission = this.mission.toObject();
            }
            if (this.misc != null) {
                data.misc = this.misc.toObject();
            }
            if (this.contracts != null) {
                data.contracts = this.contracts.toObject();
            }
            if (this.artifacts_db != null) {
                data.artifacts_db = this.artifacts_db.toObject();
            }
            if (this.shell_db != null) {
                data.shell_db = this.shell_db.toObject();
            }
            if (this.mail_state != null) {
                data.mail_state = this.mail_state.toObject();
            }
            if (this.checksum != null) {
                data.checksum = this.checksum;
            }
            if (this.signature != null) {
                data.signature = this.signature;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user_id && this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_ei_user_id && this.ei_user_id.length)
                writer.writeString(18, this.ei_user_id);
            if (this.has_game_services_id && this.game_services_id.length)
                writer.writeString(16, this.game_services_id);
            if (this.has_push_user_id && this.push_user_id.length)
                writer.writeString(26, this.push_user_id);
            if (this.has_device_id && this.device_id.length)
                writer.writeString(17, this.device_id);
            if (this.has_user_name && this.user_name.length)
                writer.writeString(2, this.user_name);
            if (this.has_approx_time)
                writer.writeDouble(3, this.approx_time);
            if (this.has_version)
                writer.writeUint32(21, this.version);
            if (this.has_force_offer_backup)
                writer.writeBool(20, this.force_offer_backup);
            if (this.has_force_backup)
                writer.writeBool(22, this.force_backup);
            if (this.has_settings)
                writer.writeMessage(4, this.settings, () => this.settings.serialize(writer));
            if (this.has_tutorial)
                writer.writeMessage(5, this.tutorial, () => this.tutorial.serialize(writer));
            if (this.has_stats)
                writer.writeMessage(6, this.stats, () => this.stats.serialize(writer));
            if (this.has_game)
                writer.writeMessage(7, this.game, () => this.game.serialize(writer));
            if (this.has_artifacts)
                writer.writeMessage(14, this.artifacts, () => this.artifacts.serialize(writer));
            if (this.has_shells)
                writer.writeMessage(25, this.shells, () => this.shells.serialize(writer));
            if (this.has_sim)
                writer.writeMessage(8, this.sim, () => this.sim.serialize(writer));
            if (this.farms.length)
                writer.writeRepeatedMessage(12, this.farms, (item: Backup.Simulation) => item.serialize(writer));
            if (this.has_mission)
                writer.writeMessage(9, this.mission, () => this.mission.serialize(writer));
            if (this.has_misc)
                writer.writeMessage(10, this.misc, () => this.misc.serialize(writer));
            if (this.has_contracts)
                writer.writeMessage(13, this.contracts, () => this.contracts.serialize(writer));
            if (this.has_artifacts_db)
                writer.writeMessage(15, this.artifacts_db, () => this.artifacts_db.serialize(writer));
            if (this.has_shell_db)
                writer.writeMessage(24, this.shell_db, () => this.shell_db.serialize(writer));
            if (this.read_mail_ids.length)
                writer.writeRepeatedString(23, this.read_mail_ids);
            if (this.has_mail_state)
                writer.writeMessage(27, this.mail_state, () => this.mail_state.serialize(writer));
            if (this.has_checksum)
                writer.writeUint64(100, this.checksum);
            if (this.has_signature && this.signature.length)
                writer.writeString(101, this.signature);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Backup {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Backup();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 18:
                        message.ei_user_id = reader.readString();
                        break;
                    case 16:
                        message.game_services_id = reader.readString();
                        break;
                    case 26:
                        message.push_user_id = reader.readString();
                        break;
                    case 17:
                        message.device_id = reader.readString();
                        break;
                    case 2:
                        message.user_name = reader.readString();
                        break;
                    case 3:
                        message.approx_time = reader.readDouble();
                        break;
                    case 21:
                        message.version = reader.readUint32();
                        break;
                    case 20:
                        message.force_offer_backup = reader.readBool();
                        break;
                    case 22:
                        message.force_backup = reader.readBool();
                        break;
                    case 4:
                        reader.readMessage(message.settings, () => message.settings = Backup.Settings.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.tutorial, () => message.tutorial = Backup.Tutorial.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.stats, () => message.stats = Backup.Stats.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.game, () => message.game = Backup.Game.deserialize(reader));
                        break;
                    case 14:
                        reader.readMessage(message.artifacts, () => message.artifacts = Backup.Artifacts.deserialize(reader));
                        break;
                    case 25:
                        reader.readMessage(message.shells, () => message.shells = Backup.Shells.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.sim, () => message.sim = Backup.Simulation.deserialize(reader));
                        break;
                    case 12:
                        reader.readMessage(message.farms, () => pb_1.Message.addToRepeatedWrapperField(message, 12, Backup.Simulation.deserialize(reader), Backup.Simulation));
                        break;
                    case 9:
                        reader.readMessage(message.mission, () => message.mission = Backup.Mission.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.misc, () => message.misc = Backup.Misc.deserialize(reader));
                        break;
                    case 13:
                        reader.readMessage(message.contracts, () => message.contracts = MyContracts.deserialize(reader));
                        break;
                    case 15:
                        reader.readMessage(message.artifacts_db, () => message.artifacts_db = ArtifactsDB.deserialize(reader));
                        break;
                    case 24:
                        reader.readMessage(message.shell_db, () => message.shell_db = ShellDB.deserialize(reader));
                        break;
                    case 23:
                        pb_1.Message.addToRepeatedField(message, 23, reader.readString());
                        break;
                    case 27:
                        reader.readMessage(message.mail_state, () => message.mail_state = MailState.deserialize(reader));
                        break;
                    case 100:
                        message.checksum = reader.readUint64();
                        break;
                    case 101:
                        message.signature = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Backup {
            return Backup.deserialize(bytes);
        }
    }
    export namespace Backup {
        export class Settings extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                sfx?: boolean;
                music?: boolean;
                low_battery_mode?: boolean;
                low_performance_mode?: boolean;
                force_touch_chicken_btn?: boolean;
                notifications_queried?: boolean;
                last_notification_query_time?: number;
                notifications_on?: boolean;
                notify_daily_gift?: boolean;
                low_performance?: boolean;
                auto_stop_fueling?: boolean;
                max_enabled?: boolean;
                hide_cc_status?: boolean;
                contracts_widget_enabled?: boolean;
                artifact_sparkle?: boolean;
                last_backup_time?: number;
                coppa_queried?: boolean;
                coppa_restricted?: boolean;
                gdpr_consent_queried?: boolean;
                gdpr_age_restricted?: boolean;
                gdpr_consent_given?: boolean;
                age_queried?: boolean;
                age_restricted?: boolean;
                data_collection_consent_queried?: boolean;
                data_collection_consent_given?: boolean;
                last_day_age_queried?: number;
                user_ads_enabled?: boolean;
                user_cloud_enabled?: boolean;
                user_analytics_enabled?: boolean;
                user_personalized_ads_enabled?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("sfx" in data && data.sfx != undefined) {
                        this.sfx = data.sfx;
                    }
                    if ("music" in data && data.music != undefined) {
                        this.music = data.music;
                    }
                    if ("low_battery_mode" in data && data.low_battery_mode != undefined) {
                        this.low_battery_mode = data.low_battery_mode;
                    }
                    if ("low_performance_mode" in data && data.low_performance_mode != undefined) {
                        this.low_performance_mode = data.low_performance_mode;
                    }
                    if ("force_touch_chicken_btn" in data && data.force_touch_chicken_btn != undefined) {
                        this.force_touch_chicken_btn = data.force_touch_chicken_btn;
                    }
                    if ("notifications_queried" in data && data.notifications_queried != undefined) {
                        this.notifications_queried = data.notifications_queried;
                    }
                    if ("last_notification_query_time" in data && data.last_notification_query_time != undefined) {
                        this.last_notification_query_time = data.last_notification_query_time;
                    }
                    if ("notifications_on" in data && data.notifications_on != undefined) {
                        this.notifications_on = data.notifications_on;
                    }
                    if ("notify_daily_gift" in data && data.notify_daily_gift != undefined) {
                        this.notify_daily_gift = data.notify_daily_gift;
                    }
                    if ("low_performance" in data && data.low_performance != undefined) {
                        this.low_performance = data.low_performance;
                    }
                    if ("auto_stop_fueling" in data && data.auto_stop_fueling != undefined) {
                        this.auto_stop_fueling = data.auto_stop_fueling;
                    }
                    if ("max_enabled" in data && data.max_enabled != undefined) {
                        this.max_enabled = data.max_enabled;
                    }
                    if ("hide_cc_status" in data && data.hide_cc_status != undefined) {
                        this.hide_cc_status = data.hide_cc_status;
                    }
                    if ("contracts_widget_enabled" in data && data.contracts_widget_enabled != undefined) {
                        this.contracts_widget_enabled = data.contracts_widget_enabled;
                    }
                    if ("artifact_sparkle" in data && data.artifact_sparkle != undefined) {
                        this.artifact_sparkle = data.artifact_sparkle;
                    }
                    if ("last_backup_time" in data && data.last_backup_time != undefined) {
                        this.last_backup_time = data.last_backup_time;
                    }
                    if ("coppa_queried" in data && data.coppa_queried != undefined) {
                        this.coppa_queried = data.coppa_queried;
                    }
                    if ("coppa_restricted" in data && data.coppa_restricted != undefined) {
                        this.coppa_restricted = data.coppa_restricted;
                    }
                    if ("gdpr_consent_queried" in data && data.gdpr_consent_queried != undefined) {
                        this.gdpr_consent_queried = data.gdpr_consent_queried;
                    }
                    if ("gdpr_age_restricted" in data && data.gdpr_age_restricted != undefined) {
                        this.gdpr_age_restricted = data.gdpr_age_restricted;
                    }
                    if ("gdpr_consent_given" in data && data.gdpr_consent_given != undefined) {
                        this.gdpr_consent_given = data.gdpr_consent_given;
                    }
                    if ("age_queried" in data && data.age_queried != undefined) {
                        this.age_queried = data.age_queried;
                    }
                    if ("age_restricted" in data && data.age_restricted != undefined) {
                        this.age_restricted = data.age_restricted;
                    }
                    if ("data_collection_consent_queried" in data && data.data_collection_consent_queried != undefined) {
                        this.data_collection_consent_queried = data.data_collection_consent_queried;
                    }
                    if ("data_collection_consent_given" in data && data.data_collection_consent_given != undefined) {
                        this.data_collection_consent_given = data.data_collection_consent_given;
                    }
                    if ("last_day_age_queried" in data && data.last_day_age_queried != undefined) {
                        this.last_day_age_queried = data.last_day_age_queried;
                    }
                    if ("user_ads_enabled" in data && data.user_ads_enabled != undefined) {
                        this.user_ads_enabled = data.user_ads_enabled;
                    }
                    if ("user_cloud_enabled" in data && data.user_cloud_enabled != undefined) {
                        this.user_cloud_enabled = data.user_cloud_enabled;
                    }
                    if ("user_analytics_enabled" in data && data.user_analytics_enabled != undefined) {
                        this.user_analytics_enabled = data.user_analytics_enabled;
                    }
                    if ("user_personalized_ads_enabled" in data && data.user_personalized_ads_enabled != undefined) {
                        this.user_personalized_ads_enabled = data.user_personalized_ads_enabled;
                    }
                }
            }
            get sfx() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }
            set sfx(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_sfx() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get music() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set music(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_music() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get low_battery_mode() {
                return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
            }
            set low_battery_mode(value: boolean) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_low_battery_mode() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get low_performance_mode() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set low_performance_mode(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_low_performance_mode() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get force_touch_chicken_btn() {
                return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
            }
            set force_touch_chicken_btn(value: boolean) {
                pb_1.Message.setField(this, 9, value);
            }
            get has_force_touch_chicken_btn() {
                return pb_1.Message.getField(this, 9) != null;
            }
            get notifications_queried() {
                return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
            }
            set notifications_queried(value: boolean) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_notifications_queried() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get last_notification_query_time() {
                return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
            }
            set last_notification_query_time(value: number) {
                pb_1.Message.setField(this, 27, value);
            }
            get has_last_notification_query_time() {
                return pb_1.Message.getField(this, 27) != null;
            }
            get notifications_on() {
                return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
            }
            set notifications_on(value: boolean) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_notifications_on() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get notify_daily_gift() {
                return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
            }
            set notify_daily_gift(value: boolean) {
                pb_1.Message.setField(this, 11, value);
            }
            get has_notify_daily_gift() {
                return pb_1.Message.getField(this, 11) != null;
            }
            get low_performance() {
                return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
            }
            set low_performance(value: boolean) {
                pb_1.Message.setField(this, 10, value);
            }
            get has_low_performance() {
                return pb_1.Message.getField(this, 10) != null;
            }
            get auto_stop_fueling() {
                return pb_1.Message.getFieldWithDefault(this, 25, false) as boolean;
            }
            set auto_stop_fueling(value: boolean) {
                pb_1.Message.setField(this, 25, value);
            }
            get has_auto_stop_fueling() {
                return pb_1.Message.getField(this, 25) != null;
            }
            get max_enabled() {
                return pb_1.Message.getFieldWithDefault(this, 26, false) as boolean;
            }
            set max_enabled(value: boolean) {
                pb_1.Message.setField(this, 26, value);
            }
            get has_max_enabled() {
                return pb_1.Message.getField(this, 26) != null;
            }
            get hide_cc_status() {
                return pb_1.Message.getFieldWithDefault(this, 28, false) as boolean;
            }
            set hide_cc_status(value: boolean) {
                pb_1.Message.setField(this, 28, value);
            }
            get has_hide_cc_status() {
                return pb_1.Message.getField(this, 28) != null;
            }
            get contracts_widget_enabled() {
                return pb_1.Message.getFieldWithDefault(this, 29, false) as boolean;
            }
            set contracts_widget_enabled(value: boolean) {
                pb_1.Message.setField(this, 29, value);
            }
            get has_contracts_widget_enabled() {
                return pb_1.Message.getField(this, 29) != null;
            }
            get artifact_sparkle() {
                return pb_1.Message.getFieldWithDefault(this, 30, false) as boolean;
            }
            set artifact_sparkle(value: boolean) {
                pb_1.Message.setField(this, 30, value);
            }
            get has_artifact_sparkle() {
                return pb_1.Message.getField(this, 30) != null;
            }
            get last_backup_time() {
                return pb_1.Message.getFieldWithDefault(this, 24, 0) as number;
            }
            set last_backup_time(value: number) {
                pb_1.Message.setField(this, 24, value);
            }
            get has_last_backup_time() {
                return pb_1.Message.getField(this, 24) != null;
            }
            get coppa_queried() {
                return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
            }
            set coppa_queried(value: boolean) {
                pb_1.Message.setField(this, 7, value);
            }
            get has_coppa_queried() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get coppa_restricted() {
                return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
            }
            set coppa_restricted(value: boolean) {
                pb_1.Message.setField(this, 8, value);
            }
            get has_coppa_restricted() {
                return pb_1.Message.getField(this, 8) != null;
            }
            get gdpr_consent_queried() {
                return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
            }
            set gdpr_consent_queried(value: boolean) {
                pb_1.Message.setField(this, 12, value);
            }
            get has_gdpr_consent_queried() {
                return pb_1.Message.getField(this, 12) != null;
            }
            get gdpr_age_restricted() {
                return pb_1.Message.getFieldWithDefault(this, 16, false) as boolean;
            }
            set gdpr_age_restricted(value: boolean) {
                pb_1.Message.setField(this, 16, value);
            }
            get has_gdpr_age_restricted() {
                return pb_1.Message.getField(this, 16) != null;
            }
            get gdpr_consent_given() {
                return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
            }
            set gdpr_consent_given(value: boolean) {
                pb_1.Message.setField(this, 13, value);
            }
            get has_gdpr_consent_given() {
                return pb_1.Message.getField(this, 13) != null;
            }
            get age_queried() {
                return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
            }
            set age_queried(value: boolean) {
                pb_1.Message.setField(this, 18, value);
            }
            get has_age_queried() {
                return pb_1.Message.getField(this, 18) != null;
            }
            get age_restricted() {
                return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
            }
            set age_restricted(value: boolean) {
                pb_1.Message.setField(this, 19, value);
            }
            get has_age_restricted() {
                return pb_1.Message.getField(this, 19) != null;
            }
            get data_collection_consent_queried() {
                return pb_1.Message.getFieldWithDefault(this, 20, false) as boolean;
            }
            set data_collection_consent_queried(value: boolean) {
                pb_1.Message.setField(this, 20, value);
            }
            get has_data_collection_consent_queried() {
                return pb_1.Message.getField(this, 20) != null;
            }
            get data_collection_consent_given() {
                return pb_1.Message.getFieldWithDefault(this, 21, false) as boolean;
            }
            set data_collection_consent_given(value: boolean) {
                pb_1.Message.setField(this, 21, value);
            }
            get has_data_collection_consent_given() {
                return pb_1.Message.getField(this, 21) != null;
            }
            get last_day_age_queried() {
                return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
            }
            set last_day_age_queried(value: number) {
                pb_1.Message.setField(this, 17, value);
            }
            get has_last_day_age_queried() {
                return pb_1.Message.getField(this, 17) != null;
            }
            get user_ads_enabled() {
                return pb_1.Message.getFieldWithDefault(this, 14, true) as boolean;
            }
            set user_ads_enabled(value: boolean) {
                pb_1.Message.setField(this, 14, value);
            }
            get has_user_ads_enabled() {
                return pb_1.Message.getField(this, 14) != null;
            }
            get user_cloud_enabled() {
                return pb_1.Message.getFieldWithDefault(this, 15, true) as boolean;
            }
            set user_cloud_enabled(value: boolean) {
                pb_1.Message.setField(this, 15, value);
            }
            get has_user_cloud_enabled() {
                return pb_1.Message.getField(this, 15) != null;
            }
            get user_analytics_enabled() {
                return pb_1.Message.getFieldWithDefault(this, 22, true) as boolean;
            }
            set user_analytics_enabled(value: boolean) {
                pb_1.Message.setField(this, 22, value);
            }
            get has_user_analytics_enabled() {
                return pb_1.Message.getField(this, 22) != null;
            }
            get user_personalized_ads_enabled() {
                return pb_1.Message.getFieldWithDefault(this, 23, true) as boolean;
            }
            set user_personalized_ads_enabled(value: boolean) {
                pb_1.Message.setField(this, 23, value);
            }
            get has_user_personalized_ads_enabled() {
                return pb_1.Message.getField(this, 23) != null;
            }
            static fromObject(data: {
                sfx?: boolean;
                music?: boolean;
                low_battery_mode?: boolean;
                low_performance_mode?: boolean;
                force_touch_chicken_btn?: boolean;
                notifications_queried?: boolean;
                last_notification_query_time?: number;
                notifications_on?: boolean;
                notify_daily_gift?: boolean;
                low_performance?: boolean;
                auto_stop_fueling?: boolean;
                max_enabled?: boolean;
                hide_cc_status?: boolean;
                contracts_widget_enabled?: boolean;
                artifact_sparkle?: boolean;
                last_backup_time?: number;
                coppa_queried?: boolean;
                coppa_restricted?: boolean;
                gdpr_consent_queried?: boolean;
                gdpr_age_restricted?: boolean;
                gdpr_consent_given?: boolean;
                age_queried?: boolean;
                age_restricted?: boolean;
                data_collection_consent_queried?: boolean;
                data_collection_consent_given?: boolean;
                last_day_age_queried?: number;
                user_ads_enabled?: boolean;
                user_cloud_enabled?: boolean;
                user_analytics_enabled?: boolean;
                user_personalized_ads_enabled?: boolean;
            }): Settings {
                const message = new Settings({});
                if (data.sfx != null) {
                    message.sfx = data.sfx;
                }
                if (data.music != null) {
                    message.music = data.music;
                }
                if (data.low_battery_mode != null) {
                    message.low_battery_mode = data.low_battery_mode;
                }
                if (data.low_performance_mode != null) {
                    message.low_performance_mode = data.low_performance_mode;
                }
                if (data.force_touch_chicken_btn != null) {
                    message.force_touch_chicken_btn = data.force_touch_chicken_btn;
                }
                if (data.notifications_queried != null) {
                    message.notifications_queried = data.notifications_queried;
                }
                if (data.last_notification_query_time != null) {
                    message.last_notification_query_time = data.last_notification_query_time;
                }
                if (data.notifications_on != null) {
                    message.notifications_on = data.notifications_on;
                }
                if (data.notify_daily_gift != null) {
                    message.notify_daily_gift = data.notify_daily_gift;
                }
                if (data.low_performance != null) {
                    message.low_performance = data.low_performance;
                }
                if (data.auto_stop_fueling != null) {
                    message.auto_stop_fueling = data.auto_stop_fueling;
                }
                if (data.max_enabled != null) {
                    message.max_enabled = data.max_enabled;
                }
                if (data.hide_cc_status != null) {
                    message.hide_cc_status = data.hide_cc_status;
                }
                if (data.contracts_widget_enabled != null) {
                    message.contracts_widget_enabled = data.contracts_widget_enabled;
                }
                if (data.artifact_sparkle != null) {
                    message.artifact_sparkle = data.artifact_sparkle;
                }
                if (data.last_backup_time != null) {
                    message.last_backup_time = data.last_backup_time;
                }
                if (data.coppa_queried != null) {
                    message.coppa_queried = data.coppa_queried;
                }
                if (data.coppa_restricted != null) {
                    message.coppa_restricted = data.coppa_restricted;
                }
                if (data.gdpr_consent_queried != null) {
                    message.gdpr_consent_queried = data.gdpr_consent_queried;
                }
                if (data.gdpr_age_restricted != null) {
                    message.gdpr_age_restricted = data.gdpr_age_restricted;
                }
                if (data.gdpr_consent_given != null) {
                    message.gdpr_consent_given = data.gdpr_consent_given;
                }
                if (data.age_queried != null) {
                    message.age_queried = data.age_queried;
                }
                if (data.age_restricted != null) {
                    message.age_restricted = data.age_restricted;
                }
                if (data.data_collection_consent_queried != null) {
                    message.data_collection_consent_queried = data.data_collection_consent_queried;
                }
                if (data.data_collection_consent_given != null) {
                    message.data_collection_consent_given = data.data_collection_consent_given;
                }
                if (data.last_day_age_queried != null) {
                    message.last_day_age_queried = data.last_day_age_queried;
                }
                if (data.user_ads_enabled != null) {
                    message.user_ads_enabled = data.user_ads_enabled;
                }
                if (data.user_cloud_enabled != null) {
                    message.user_cloud_enabled = data.user_cloud_enabled;
                }
                if (data.user_analytics_enabled != null) {
                    message.user_analytics_enabled = data.user_analytics_enabled;
                }
                if (data.user_personalized_ads_enabled != null) {
                    message.user_personalized_ads_enabled = data.user_personalized_ads_enabled;
                }
                return message;
            }
            toObject() {
                const data: {
                    sfx?: boolean;
                    music?: boolean;
                    low_battery_mode?: boolean;
                    low_performance_mode?: boolean;
                    force_touch_chicken_btn?: boolean;
                    notifications_queried?: boolean;
                    last_notification_query_time?: number;
                    notifications_on?: boolean;
                    notify_daily_gift?: boolean;
                    low_performance?: boolean;
                    auto_stop_fueling?: boolean;
                    max_enabled?: boolean;
                    hide_cc_status?: boolean;
                    contracts_widget_enabled?: boolean;
                    artifact_sparkle?: boolean;
                    last_backup_time?: number;
                    coppa_queried?: boolean;
                    coppa_restricted?: boolean;
                    gdpr_consent_queried?: boolean;
                    gdpr_age_restricted?: boolean;
                    gdpr_consent_given?: boolean;
                    age_queried?: boolean;
                    age_restricted?: boolean;
                    data_collection_consent_queried?: boolean;
                    data_collection_consent_given?: boolean;
                    last_day_age_queried?: number;
                    user_ads_enabled?: boolean;
                    user_cloud_enabled?: boolean;
                    user_analytics_enabled?: boolean;
                    user_personalized_ads_enabled?: boolean;
                } = {};
                if (this.sfx != null) {
                    data.sfx = this.sfx;
                }
                if (this.music != null) {
                    data.music = this.music;
                }
                if (this.low_battery_mode != null) {
                    data.low_battery_mode = this.low_battery_mode;
                }
                if (this.low_performance_mode != null) {
                    data.low_performance_mode = this.low_performance_mode;
                }
                if (this.force_touch_chicken_btn != null) {
                    data.force_touch_chicken_btn = this.force_touch_chicken_btn;
                }
                if (this.notifications_queried != null) {
                    data.notifications_queried = this.notifications_queried;
                }
                if (this.last_notification_query_time != null) {
                    data.last_notification_query_time = this.last_notification_query_time;
                }
                if (this.notifications_on != null) {
                    data.notifications_on = this.notifications_on;
                }
                if (this.notify_daily_gift != null) {
                    data.notify_daily_gift = this.notify_daily_gift;
                }
                if (this.low_performance != null) {
                    data.low_performance = this.low_performance;
                }
                if (this.auto_stop_fueling != null) {
                    data.auto_stop_fueling = this.auto_stop_fueling;
                }
                if (this.max_enabled != null) {
                    data.max_enabled = this.max_enabled;
                }
                if (this.hide_cc_status != null) {
                    data.hide_cc_status = this.hide_cc_status;
                }
                if (this.contracts_widget_enabled != null) {
                    data.contracts_widget_enabled = this.contracts_widget_enabled;
                }
                if (this.artifact_sparkle != null) {
                    data.artifact_sparkle = this.artifact_sparkle;
                }
                if (this.last_backup_time != null) {
                    data.last_backup_time = this.last_backup_time;
                }
                if (this.coppa_queried != null) {
                    data.coppa_queried = this.coppa_queried;
                }
                if (this.coppa_restricted != null) {
                    data.coppa_restricted = this.coppa_restricted;
                }
                if (this.gdpr_consent_queried != null) {
                    data.gdpr_consent_queried = this.gdpr_consent_queried;
                }
                if (this.gdpr_age_restricted != null) {
                    data.gdpr_age_restricted = this.gdpr_age_restricted;
                }
                if (this.gdpr_consent_given != null) {
                    data.gdpr_consent_given = this.gdpr_consent_given;
                }
                if (this.age_queried != null) {
                    data.age_queried = this.age_queried;
                }
                if (this.age_restricted != null) {
                    data.age_restricted = this.age_restricted;
                }
                if (this.data_collection_consent_queried != null) {
                    data.data_collection_consent_queried = this.data_collection_consent_queried;
                }
                if (this.data_collection_consent_given != null) {
                    data.data_collection_consent_given = this.data_collection_consent_given;
                }
                if (this.last_day_age_queried != null) {
                    data.last_day_age_queried = this.last_day_age_queried;
                }
                if (this.user_ads_enabled != null) {
                    data.user_ads_enabled = this.user_ads_enabled;
                }
                if (this.user_cloud_enabled != null) {
                    data.user_cloud_enabled = this.user_cloud_enabled;
                }
                if (this.user_analytics_enabled != null) {
                    data.user_analytics_enabled = this.user_analytics_enabled;
                }
                if (this.user_personalized_ads_enabled != null) {
                    data.user_personalized_ads_enabled = this.user_personalized_ads_enabled;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_sfx)
                    writer.writeBool(1, this.sfx);
                if (this.has_music)
                    writer.writeBool(2, this.music);
                if (this.has_low_battery_mode)
                    writer.writeBool(3, this.low_battery_mode);
                if (this.has_low_performance_mode)
                    writer.writeBool(4, this.low_performance_mode);
                if (this.has_force_touch_chicken_btn)
                    writer.writeBool(9, this.force_touch_chicken_btn);
                if (this.has_notifications_queried)
                    writer.writeBool(5, this.notifications_queried);
                if (this.has_last_notification_query_time)
                    writer.writeDouble(27, this.last_notification_query_time);
                if (this.has_notifications_on)
                    writer.writeBool(6, this.notifications_on);
                if (this.has_notify_daily_gift)
                    writer.writeBool(11, this.notify_daily_gift);
                if (this.has_low_performance)
                    writer.writeBool(10, this.low_performance);
                if (this.has_auto_stop_fueling)
                    writer.writeBool(25, this.auto_stop_fueling);
                if (this.has_max_enabled)
                    writer.writeBool(26, this.max_enabled);
                if (this.has_hide_cc_status)
                    writer.writeBool(28, this.hide_cc_status);
                if (this.has_contracts_widget_enabled)
                    writer.writeBool(29, this.contracts_widget_enabled);
                if (this.has_artifact_sparkle)
                    writer.writeBool(30, this.artifact_sparkle);
                if (this.has_last_backup_time)
                    writer.writeDouble(24, this.last_backup_time);
                if (this.has_coppa_queried)
                    writer.writeBool(7, this.coppa_queried);
                if (this.has_coppa_restricted)
                    writer.writeBool(8, this.coppa_restricted);
                if (this.has_gdpr_consent_queried)
                    writer.writeBool(12, this.gdpr_consent_queried);
                if (this.has_gdpr_age_restricted)
                    writer.writeBool(16, this.gdpr_age_restricted);
                if (this.has_gdpr_consent_given)
                    writer.writeBool(13, this.gdpr_consent_given);
                if (this.has_age_queried)
                    writer.writeBool(18, this.age_queried);
                if (this.has_age_restricted)
                    writer.writeBool(19, this.age_restricted);
                if (this.has_data_collection_consent_queried)
                    writer.writeBool(20, this.data_collection_consent_queried);
                if (this.has_data_collection_consent_given)
                    writer.writeBool(21, this.data_collection_consent_given);
                if (this.has_last_day_age_queried)
                    writer.writeUint32(17, this.last_day_age_queried);
                if (this.has_user_ads_enabled)
                    writer.writeBool(14, this.user_ads_enabled);
                if (this.has_user_cloud_enabled)
                    writer.writeBool(15, this.user_cloud_enabled);
                if (this.has_user_analytics_enabled)
                    writer.writeBool(22, this.user_analytics_enabled);
                if (this.has_user_personalized_ads_enabled)
                    writer.writeBool(23, this.user_personalized_ads_enabled);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Settings {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Settings();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.sfx = reader.readBool();
                            break;
                        case 2:
                            message.music = reader.readBool();
                            break;
                        case 3:
                            message.low_battery_mode = reader.readBool();
                            break;
                        case 4:
                            message.low_performance_mode = reader.readBool();
                            break;
                        case 9:
                            message.force_touch_chicken_btn = reader.readBool();
                            break;
                        case 5:
                            message.notifications_queried = reader.readBool();
                            break;
                        case 27:
                            message.last_notification_query_time = reader.readDouble();
                            break;
                        case 6:
                            message.notifications_on = reader.readBool();
                            break;
                        case 11:
                            message.notify_daily_gift = reader.readBool();
                            break;
                        case 10:
                            message.low_performance = reader.readBool();
                            break;
                        case 25:
                            message.auto_stop_fueling = reader.readBool();
                            break;
                        case 26:
                            message.max_enabled = reader.readBool();
                            break;
                        case 28:
                            message.hide_cc_status = reader.readBool();
                            break;
                        case 29:
                            message.contracts_widget_enabled = reader.readBool();
                            break;
                        case 30:
                            message.artifact_sparkle = reader.readBool();
                            break;
                        case 24:
                            message.last_backup_time = reader.readDouble();
                            break;
                        case 7:
                            message.coppa_queried = reader.readBool();
                            break;
                        case 8:
                            message.coppa_restricted = reader.readBool();
                            break;
                        case 12:
                            message.gdpr_consent_queried = reader.readBool();
                            break;
                        case 16:
                            message.gdpr_age_restricted = reader.readBool();
                            break;
                        case 13:
                            message.gdpr_consent_given = reader.readBool();
                            break;
                        case 18:
                            message.age_queried = reader.readBool();
                            break;
                        case 19:
                            message.age_restricted = reader.readBool();
                            break;
                        case 20:
                            message.data_collection_consent_queried = reader.readBool();
                            break;
                        case 21:
                            message.data_collection_consent_given = reader.readBool();
                            break;
                        case 17:
                            message.last_day_age_queried = reader.readUint32();
                            break;
                        case 14:
                            message.user_ads_enabled = reader.readBool();
                            break;
                        case 15:
                            message.user_cloud_enabled = reader.readBool();
                            break;
                        case 22:
                            message.user_analytics_enabled = reader.readBool();
                            break;
                        case 23:
                            message.user_personalized_ads_enabled = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Settings {
                return Settings.deserialize(bytes);
            }
        }
        export class Tutorial extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                intro_shown?: boolean;
                click_tutorial_shown?: boolean;
                buy_hab_shown?: boolean;
                hire_vehicle_shown?: boolean;
                q_num_shown?: boolean;
                s_num_shown?: boolean;
                contracts_tab_shown?: boolean;
                contract_info_shown?: boolean;
                join_coop_shown?: boolean;
                switch_farm_shown?: boolean;
                tutorial_shown: boolean[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("intro_shown" in data && data.intro_shown != undefined) {
                        this.intro_shown = data.intro_shown;
                    }
                    if ("click_tutorial_shown" in data && data.click_tutorial_shown != undefined) {
                        this.click_tutorial_shown = data.click_tutorial_shown;
                    }
                    if ("buy_hab_shown" in data && data.buy_hab_shown != undefined) {
                        this.buy_hab_shown = data.buy_hab_shown;
                    }
                    if ("hire_vehicle_shown" in data && data.hire_vehicle_shown != undefined) {
                        this.hire_vehicle_shown = data.hire_vehicle_shown;
                    }
                    if ("q_num_shown" in data && data.q_num_shown != undefined) {
                        this.q_num_shown = data.q_num_shown;
                    }
                    if ("s_num_shown" in data && data.s_num_shown != undefined) {
                        this.s_num_shown = data.s_num_shown;
                    }
                    if ("contracts_tab_shown" in data && data.contracts_tab_shown != undefined) {
                        this.contracts_tab_shown = data.contracts_tab_shown;
                    }
                    if ("contract_info_shown" in data && data.contract_info_shown != undefined) {
                        this.contract_info_shown = data.contract_info_shown;
                    }
                    if ("join_coop_shown" in data && data.join_coop_shown != undefined) {
                        this.join_coop_shown = data.join_coop_shown;
                    }
                    if ("switch_farm_shown" in data && data.switch_farm_shown != undefined) {
                        this.switch_farm_shown = data.switch_farm_shown;
                    }
                    this.tutorial_shown = data.tutorial_shown;
                }
            }
            get intro_shown() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }
            set intro_shown(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_intro_shown() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get click_tutorial_shown() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set click_tutorial_shown(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_click_tutorial_shown() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get buy_hab_shown() {
                return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
            }
            set buy_hab_shown(value: boolean) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_buy_hab_shown() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get hire_vehicle_shown() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set hire_vehicle_shown(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_hire_vehicle_shown() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get q_num_shown() {
                return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
            }
            set q_num_shown(value: boolean) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_q_num_shown() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get s_num_shown() {
                return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
            }
            set s_num_shown(value: boolean) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_s_num_shown() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get contracts_tab_shown() {
                return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
            }
            set contracts_tab_shown(value: boolean) {
                pb_1.Message.setField(this, 7, value);
            }
            get has_contracts_tab_shown() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get contract_info_shown() {
                return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
            }
            set contract_info_shown(value: boolean) {
                pb_1.Message.setField(this, 8, value);
            }
            get has_contract_info_shown() {
                return pb_1.Message.getField(this, 8) != null;
            }
            get join_coop_shown() {
                return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
            }
            set join_coop_shown(value: boolean) {
                pb_1.Message.setField(this, 9, value);
            }
            get has_join_coop_shown() {
                return pb_1.Message.getField(this, 9) != null;
            }
            get switch_farm_shown() {
                return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
            }
            set switch_farm_shown(value: boolean) {
                pb_1.Message.setField(this, 10, value);
            }
            get has_switch_farm_shown() {
                return pb_1.Message.getField(this, 10) != null;
            }
            get tutorial_shown() {
                return pb_1.Message.getFieldWithDefault(this, 11, []) as boolean[];
            }
            set tutorial_shown(value: boolean[]) {
                pb_1.Message.setField(this, 11, value);
            }
            static fromObject(data: {
                intro_shown?: boolean;
                click_tutorial_shown?: boolean;
                buy_hab_shown?: boolean;
                hire_vehicle_shown?: boolean;
                q_num_shown?: boolean;
                s_num_shown?: boolean;
                contracts_tab_shown?: boolean;
                contract_info_shown?: boolean;
                join_coop_shown?: boolean;
                switch_farm_shown?: boolean;
                tutorial_shown: boolean[];
            }): Tutorial {
                const message = new Tutorial({
                    tutorial_shown: data.tutorial_shown
                });
                if (data.intro_shown != null) {
                    message.intro_shown = data.intro_shown;
                }
                if (data.click_tutorial_shown != null) {
                    message.click_tutorial_shown = data.click_tutorial_shown;
                }
                if (data.buy_hab_shown != null) {
                    message.buy_hab_shown = data.buy_hab_shown;
                }
                if (data.hire_vehicle_shown != null) {
                    message.hire_vehicle_shown = data.hire_vehicle_shown;
                }
                if (data.q_num_shown != null) {
                    message.q_num_shown = data.q_num_shown;
                }
                if (data.s_num_shown != null) {
                    message.s_num_shown = data.s_num_shown;
                }
                if (data.contracts_tab_shown != null) {
                    message.contracts_tab_shown = data.contracts_tab_shown;
                }
                if (data.contract_info_shown != null) {
                    message.contract_info_shown = data.contract_info_shown;
                }
                if (data.join_coop_shown != null) {
                    message.join_coop_shown = data.join_coop_shown;
                }
                if (data.switch_farm_shown != null) {
                    message.switch_farm_shown = data.switch_farm_shown;
                }
                return message;
            }
            toObject() {
                const data: {
                    intro_shown?: boolean;
                    click_tutorial_shown?: boolean;
                    buy_hab_shown?: boolean;
                    hire_vehicle_shown?: boolean;
                    q_num_shown?: boolean;
                    s_num_shown?: boolean;
                    contracts_tab_shown?: boolean;
                    contract_info_shown?: boolean;
                    join_coop_shown?: boolean;
                    switch_farm_shown?: boolean;
                    tutorial_shown: boolean[];
                } = {
                    tutorial_shown: this.tutorial_shown
                };
                if (this.intro_shown != null) {
                    data.intro_shown = this.intro_shown;
                }
                if (this.click_tutorial_shown != null) {
                    data.click_tutorial_shown = this.click_tutorial_shown;
                }
                if (this.buy_hab_shown != null) {
                    data.buy_hab_shown = this.buy_hab_shown;
                }
                if (this.hire_vehicle_shown != null) {
                    data.hire_vehicle_shown = this.hire_vehicle_shown;
                }
                if (this.q_num_shown != null) {
                    data.q_num_shown = this.q_num_shown;
                }
                if (this.s_num_shown != null) {
                    data.s_num_shown = this.s_num_shown;
                }
                if (this.contracts_tab_shown != null) {
                    data.contracts_tab_shown = this.contracts_tab_shown;
                }
                if (this.contract_info_shown != null) {
                    data.contract_info_shown = this.contract_info_shown;
                }
                if (this.join_coop_shown != null) {
                    data.join_coop_shown = this.join_coop_shown;
                }
                if (this.switch_farm_shown != null) {
                    data.switch_farm_shown = this.switch_farm_shown;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_intro_shown)
                    writer.writeBool(1, this.intro_shown);
                if (this.has_click_tutorial_shown)
                    writer.writeBool(2, this.click_tutorial_shown);
                if (this.has_buy_hab_shown)
                    writer.writeBool(3, this.buy_hab_shown);
                if (this.has_hire_vehicle_shown)
                    writer.writeBool(4, this.hire_vehicle_shown);
                if (this.has_q_num_shown)
                    writer.writeBool(5, this.q_num_shown);
                if (this.has_s_num_shown)
                    writer.writeBool(6, this.s_num_shown);
                if (this.has_contracts_tab_shown)
                    writer.writeBool(7, this.contracts_tab_shown);
                if (this.has_contract_info_shown)
                    writer.writeBool(8, this.contract_info_shown);
                if (this.has_join_coop_shown)
                    writer.writeBool(9, this.join_coop_shown);
                if (this.has_switch_farm_shown)
                    writer.writeBool(10, this.switch_farm_shown);
                if (this.tutorial_shown.length)
                    writer.writeRepeatedBool(11, this.tutorial_shown);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Tutorial {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Tutorial();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.intro_shown = reader.readBool();
                            break;
                        case 2:
                            message.click_tutorial_shown = reader.readBool();
                            break;
                        case 3:
                            message.buy_hab_shown = reader.readBool();
                            break;
                        case 4:
                            message.hire_vehicle_shown = reader.readBool();
                            break;
                        case 5:
                            message.q_num_shown = reader.readBool();
                            break;
                        case 6:
                            message.s_num_shown = reader.readBool();
                            break;
                        case 7:
                            message.contracts_tab_shown = reader.readBool();
                            break;
                        case 8:
                            message.contract_info_shown = reader.readBool();
                            break;
                        case 9:
                            message.join_coop_shown = reader.readBool();
                            break;
                        case 10:
                            message.switch_farm_shown = reader.readBool();
                            break;
                        case 11:
                            pb_1.Message.addToRepeatedField(message, 11, reader.readBool());
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Tutorial {
                return Tutorial.deserialize(bytes);
            }
        }
        export class Stats extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                egg_totals_OLD: number[];
                egg_totals: number[];
                unlimited_chickens_uses?: number;
                refill_uses?: number;
                warp_1_uses?: number;
                warp_8_uses?: number;
                boosts_used?: number;
                video_doubler_uses?: number;
                drone_takedowns?: number;
                drone_takedowns_elite?: number;
                num_prestiges?: number;
                num_piggy_breaks?: number;
                iap_packs_purchased?: number;
                piggy_full?: boolean;
                piggy_found_full?: boolean;
                time_piggy_filled_realtime?: number;
                time_piggy_full_gametime?: number;
                lost_piggy_increments?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 8], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    this.egg_totals_OLD = data.egg_totals_OLD;
                    this.egg_totals = data.egg_totals;
                    if ("unlimited_chickens_uses" in data && data.unlimited_chickens_uses != undefined) {
                        this.unlimited_chickens_uses = data.unlimited_chickens_uses;
                    }
                    if ("refill_uses" in data && data.refill_uses != undefined) {
                        this.refill_uses = data.refill_uses;
                    }
                    if ("warp_1_uses" in data && data.warp_1_uses != undefined) {
                        this.warp_1_uses = data.warp_1_uses;
                    }
                    if ("warp_8_uses" in data && data.warp_8_uses != undefined) {
                        this.warp_8_uses = data.warp_8_uses;
                    }
                    if ("boosts_used" in data && data.boosts_used != undefined) {
                        this.boosts_used = data.boosts_used;
                    }
                    if ("video_doubler_uses" in data && data.video_doubler_uses != undefined) {
                        this.video_doubler_uses = data.video_doubler_uses;
                    }
                    if ("drone_takedowns" in data && data.drone_takedowns != undefined) {
                        this.drone_takedowns = data.drone_takedowns;
                    }
                    if ("drone_takedowns_elite" in data && data.drone_takedowns_elite != undefined) {
                        this.drone_takedowns_elite = data.drone_takedowns_elite;
                    }
                    if ("num_prestiges" in data && data.num_prestiges != undefined) {
                        this.num_prestiges = data.num_prestiges;
                    }
                    if ("num_piggy_breaks" in data && data.num_piggy_breaks != undefined) {
                        this.num_piggy_breaks = data.num_piggy_breaks;
                    }
                    if ("iap_packs_purchased" in data && data.iap_packs_purchased != undefined) {
                        this.iap_packs_purchased = data.iap_packs_purchased;
                    }
                    if ("piggy_full" in data && data.piggy_full != undefined) {
                        this.piggy_full = data.piggy_full;
                    }
                    if ("piggy_found_full" in data && data.piggy_found_full != undefined) {
                        this.piggy_found_full = data.piggy_found_full;
                    }
                    if ("time_piggy_filled_realtime" in data && data.time_piggy_filled_realtime != undefined) {
                        this.time_piggy_filled_realtime = data.time_piggy_filled_realtime;
                    }
                    if ("time_piggy_full_gametime" in data && data.time_piggy_full_gametime != undefined) {
                        this.time_piggy_full_gametime = data.time_piggy_full_gametime;
                    }
                    if ("lost_piggy_increments" in data && data.lost_piggy_increments != undefined) {
                        this.lost_piggy_increments = data.lost_piggy_increments;
                    }
                }
            }
            get egg_totals_OLD() {
                return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
            }
            set egg_totals_OLD(value: number[]) {
                pb_1.Message.setField(this, 1, value);
            }
            get egg_totals() {
                return pb_1.Message.getFieldWithDefault(this, 8, []) as number[];
            }
            set egg_totals(value: number[]) {
                pb_1.Message.setField(this, 8, value);
            }
            get unlimited_chickens_uses() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set unlimited_chickens_uses(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get has_unlimited_chickens_uses() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get refill_uses() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set refill_uses(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_refill_uses() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get warp_1_uses() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set warp_1_uses(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_warp_1_uses() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get warp_8_uses() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set warp_8_uses(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_warp_8_uses() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get boosts_used() {
                return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
            }
            set boosts_used(value: number) {
                pb_1.Message.setField(this, 13, value);
            }
            get has_boosts_used() {
                return pb_1.Message.getField(this, 13) != null;
            }
            get video_doubler_uses() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set video_doubler_uses(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_video_doubler_uses() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get drone_takedowns() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set drone_takedowns(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_drone_takedowns() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get drone_takedowns_elite() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }
            set drone_takedowns_elite(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get has_drone_takedowns_elite() {
                return pb_1.Message.getField(this, 10) != null;
            }
            get num_prestiges() {
                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
            }
            set num_prestiges(value: number) {
                pb_1.Message.setField(this, 9, value);
            }
            get has_num_prestiges() {
                return pb_1.Message.getField(this, 9) != null;
            }
            get num_piggy_breaks() {
                return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
            }
            set num_piggy_breaks(value: number) {
                pb_1.Message.setField(this, 11, value);
            }
            get has_num_piggy_breaks() {
                return pb_1.Message.getField(this, 11) != null;
            }
            get iap_packs_purchased() {
                return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
            }
            set iap_packs_purchased(value: number) {
                pb_1.Message.setField(this, 12, value);
            }
            get has_iap_packs_purchased() {
                return pb_1.Message.getField(this, 12) != null;
            }
            get piggy_full() {
                return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
            }
            set piggy_full(value: boolean) {
                pb_1.Message.setField(this, 14, value);
            }
            get has_piggy_full() {
                return pb_1.Message.getField(this, 14) != null;
            }
            get piggy_found_full() {
                return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
            }
            set piggy_found_full(value: boolean) {
                pb_1.Message.setField(this, 15, value);
            }
            get has_piggy_found_full() {
                return pb_1.Message.getField(this, 15) != null;
            }
            get time_piggy_filled_realtime() {
                return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
            }
            set time_piggy_filled_realtime(value: number) {
                pb_1.Message.setField(this, 16, value);
            }
            get has_time_piggy_filled_realtime() {
                return pb_1.Message.getField(this, 16) != null;
            }
            get time_piggy_full_gametime() {
                return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
            }
            set time_piggy_full_gametime(value: number) {
                pb_1.Message.setField(this, 17, value);
            }
            get has_time_piggy_full_gametime() {
                return pb_1.Message.getField(this, 17) != null;
            }
            get lost_piggy_increments() {
                return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
            }
            set lost_piggy_increments(value: number) {
                pb_1.Message.setField(this, 18, value);
            }
            get has_lost_piggy_increments() {
                return pb_1.Message.getField(this, 18) != null;
            }
            static fromObject(data: {
                egg_totals_OLD: number[];
                egg_totals: number[];
                unlimited_chickens_uses?: number;
                refill_uses?: number;
                warp_1_uses?: number;
                warp_8_uses?: number;
                boosts_used?: number;
                video_doubler_uses?: number;
                drone_takedowns?: number;
                drone_takedowns_elite?: number;
                num_prestiges?: number;
                num_piggy_breaks?: number;
                iap_packs_purchased?: number;
                piggy_full?: boolean;
                piggy_found_full?: boolean;
                time_piggy_filled_realtime?: number;
                time_piggy_full_gametime?: number;
                lost_piggy_increments?: number;
            }): Stats {
                const message = new Stats({
                    egg_totals_OLD: data.egg_totals_OLD,
                    egg_totals: data.egg_totals
                });
                if (data.unlimited_chickens_uses != null) {
                    message.unlimited_chickens_uses = data.unlimited_chickens_uses;
                }
                if (data.refill_uses != null) {
                    message.refill_uses = data.refill_uses;
                }
                if (data.warp_1_uses != null) {
                    message.warp_1_uses = data.warp_1_uses;
                }
                if (data.warp_8_uses != null) {
                    message.warp_8_uses = data.warp_8_uses;
                }
                if (data.boosts_used != null) {
                    message.boosts_used = data.boosts_used;
                }
                if (data.video_doubler_uses != null) {
                    message.video_doubler_uses = data.video_doubler_uses;
                }
                if (data.drone_takedowns != null) {
                    message.drone_takedowns = data.drone_takedowns;
                }
                if (data.drone_takedowns_elite != null) {
                    message.drone_takedowns_elite = data.drone_takedowns_elite;
                }
                if (data.num_prestiges != null) {
                    message.num_prestiges = data.num_prestiges;
                }
                if (data.num_piggy_breaks != null) {
                    message.num_piggy_breaks = data.num_piggy_breaks;
                }
                if (data.iap_packs_purchased != null) {
                    message.iap_packs_purchased = data.iap_packs_purchased;
                }
                if (data.piggy_full != null) {
                    message.piggy_full = data.piggy_full;
                }
                if (data.piggy_found_full != null) {
                    message.piggy_found_full = data.piggy_found_full;
                }
                if (data.time_piggy_filled_realtime != null) {
                    message.time_piggy_filled_realtime = data.time_piggy_filled_realtime;
                }
                if (data.time_piggy_full_gametime != null) {
                    message.time_piggy_full_gametime = data.time_piggy_full_gametime;
                }
                if (data.lost_piggy_increments != null) {
                    message.lost_piggy_increments = data.lost_piggy_increments;
                }
                return message;
            }
            toObject() {
                const data: {
                    egg_totals_OLD: number[];
                    egg_totals: number[];
                    unlimited_chickens_uses?: number;
                    refill_uses?: number;
                    warp_1_uses?: number;
                    warp_8_uses?: number;
                    boosts_used?: number;
                    video_doubler_uses?: number;
                    drone_takedowns?: number;
                    drone_takedowns_elite?: number;
                    num_prestiges?: number;
                    num_piggy_breaks?: number;
                    iap_packs_purchased?: number;
                    piggy_full?: boolean;
                    piggy_found_full?: boolean;
                    time_piggy_filled_realtime?: number;
                    time_piggy_full_gametime?: number;
                    lost_piggy_increments?: number;
                } = {
                    egg_totals_OLD: this.egg_totals_OLD,
                    egg_totals: this.egg_totals
                };
                if (this.unlimited_chickens_uses != null) {
                    data.unlimited_chickens_uses = this.unlimited_chickens_uses;
                }
                if (this.refill_uses != null) {
                    data.refill_uses = this.refill_uses;
                }
                if (this.warp_1_uses != null) {
                    data.warp_1_uses = this.warp_1_uses;
                }
                if (this.warp_8_uses != null) {
                    data.warp_8_uses = this.warp_8_uses;
                }
                if (this.boosts_used != null) {
                    data.boosts_used = this.boosts_used;
                }
                if (this.video_doubler_uses != null) {
                    data.video_doubler_uses = this.video_doubler_uses;
                }
                if (this.drone_takedowns != null) {
                    data.drone_takedowns = this.drone_takedowns;
                }
                if (this.drone_takedowns_elite != null) {
                    data.drone_takedowns_elite = this.drone_takedowns_elite;
                }
                if (this.num_prestiges != null) {
                    data.num_prestiges = this.num_prestiges;
                }
                if (this.num_piggy_breaks != null) {
                    data.num_piggy_breaks = this.num_piggy_breaks;
                }
                if (this.iap_packs_purchased != null) {
                    data.iap_packs_purchased = this.iap_packs_purchased;
                }
                if (this.piggy_full != null) {
                    data.piggy_full = this.piggy_full;
                }
                if (this.piggy_found_full != null) {
                    data.piggy_found_full = this.piggy_found_full;
                }
                if (this.time_piggy_filled_realtime != null) {
                    data.time_piggy_filled_realtime = this.time_piggy_filled_realtime;
                }
                if (this.time_piggy_full_gametime != null) {
                    data.time_piggy_full_gametime = this.time_piggy_full_gametime;
                }
                if (this.lost_piggy_increments != null) {
                    data.lost_piggy_increments = this.lost_piggy_increments;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.egg_totals_OLD.length)
                    writer.writeRepeatedUint64(1, this.egg_totals_OLD);
                if (this.egg_totals.length)
                    writer.writeRepeatedDouble(8, this.egg_totals);
                if (this.has_unlimited_chickens_uses)
                    writer.writeUint64(7, this.unlimited_chickens_uses);
                if (this.has_refill_uses)
                    writer.writeUint64(2, this.refill_uses);
                if (this.has_warp_1_uses)
                    writer.writeUint64(4, this.warp_1_uses);
                if (this.has_warp_8_uses)
                    writer.writeUint64(5, this.warp_8_uses);
                if (this.has_boosts_used)
                    writer.writeUint64(13, this.boosts_used);
                if (this.has_video_doubler_uses)
                    writer.writeUint64(3, this.video_doubler_uses);
                if (this.has_drone_takedowns)
                    writer.writeUint64(6, this.drone_takedowns);
                if (this.has_drone_takedowns_elite)
                    writer.writeUint64(10, this.drone_takedowns_elite);
                if (this.has_num_prestiges)
                    writer.writeUint64(9, this.num_prestiges);
                if (this.has_num_piggy_breaks)
                    writer.writeUint64(11, this.num_piggy_breaks);
                if (this.has_iap_packs_purchased)
                    writer.writeUint64(12, this.iap_packs_purchased);
                if (this.has_piggy_full)
                    writer.writeBool(14, this.piggy_full);
                if (this.has_piggy_found_full)
                    writer.writeBool(15, this.piggy_found_full);
                if (this.has_time_piggy_filled_realtime)
                    writer.writeDouble(16, this.time_piggy_filled_realtime);
                if (this.has_time_piggy_full_gametime)
                    writer.writeDouble(17, this.time_piggy_full_gametime);
                if (this.has_lost_piggy_increments)
                    writer.writeUint64(18, this.lost_piggy_increments);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Stats {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Stats();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            pb_1.Message.addToRepeatedField(message, 1, reader.readUint64());
                            break;
                        case 8:
                            pb_1.Message.addToRepeatedField(message, 8, reader.readDouble());
                            break;
                        case 7:
                            message.unlimited_chickens_uses = reader.readUint64();
                            break;
                        case 2:
                            message.refill_uses = reader.readUint64();
                            break;
                        case 4:
                            message.warp_1_uses = reader.readUint64();
                            break;
                        case 5:
                            message.warp_8_uses = reader.readUint64();
                            break;
                        case 13:
                            message.boosts_used = reader.readUint64();
                            break;
                        case 3:
                            message.video_doubler_uses = reader.readUint64();
                            break;
                        case 6:
                            message.drone_takedowns = reader.readUint64();
                            break;
                        case 10:
                            message.drone_takedowns_elite = reader.readUint64();
                            break;
                        case 9:
                            message.num_prestiges = reader.readUint64();
                            break;
                        case 11:
                            message.num_piggy_breaks = reader.readUint64();
                            break;
                        case 12:
                            message.iap_packs_purchased = reader.readUint64();
                            break;
                        case 14:
                            message.piggy_full = reader.readBool();
                            break;
                        case 15:
                            message.piggy_found_full = reader.readBool();
                            break;
                        case 16:
                            message.time_piggy_filled_realtime = reader.readDouble();
                            break;
                        case 17:
                            message.time_piggy_full_gametime = reader.readDouble();
                            break;
                        case 18:
                            message.lost_piggy_increments = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Stats {
                return Stats.deserialize(bytes);
            }
        }
        export class Game extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                current_farm?: number;
                max_egg_reached?: Egg;
                golden_eggs_earned?: number;
                golden_eggs_spent?: number;
                uncliamed_golden_eggs?: number;
                soul_eggs?: number;
                unclaimed_soul_eggs?: number;
                soul_eggs_d?: number;
                unclaimed_soul_eggs_d?: number;
                eggs_of_prophecy?: number;
                unclaimed_eggs_of_prophecy?: number;
                shell_scripts_earned?: number;
                shell_scripts_spent?: number;
                unclaimed_shell_scripts?: number;
                prestige_cash_earned?: number;
                prestige_soul_boost_cash?: number;
                lifetime_cash_earned?: number;
                piggy_bank?: number;
                piggy_full_alert_shown?: boolean;
                permit_level?: number;
                epic_research: Backup.ResearchItem[];
                hyperloop_station?: boolean;
                next_daily_gift_time?: number;
                last_daily_gift_collected_day?: number;
                num_daily_gifts_collected?: number;
                news: Backup.NewsHeadline[];
                last_news_time?: number;
                current_multiplier?: number;
                current_multiplier_expiration?: number;
                achievements: Backup.AchievementInfo[];
                max_farm_size_reached: number[];
                egg_medal_level: number[];
                long_idle_notification_set?: boolean;
                long_idle_notification_threshold?: number;
                long_idle_reward?: number;
                boosts: Backup.OwnedBoost[];
                total_time_cheats_detected?: number;
                force_elite_contracts?: boolean;
                new_player_event_end_time?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9, 11, 15, 18, 19, 30], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("current_farm" in data && data.current_farm != undefined) {
                        this.current_farm = data.current_farm;
                    }
                    if ("max_egg_reached" in data && data.max_egg_reached != undefined) {
                        this.max_egg_reached = data.max_egg_reached;
                    }
                    if ("golden_eggs_earned" in data && data.golden_eggs_earned != undefined) {
                        this.golden_eggs_earned = data.golden_eggs_earned;
                    }
                    if ("golden_eggs_spent" in data && data.golden_eggs_spent != undefined) {
                        this.golden_eggs_spent = data.golden_eggs_spent;
                    }
                    if ("uncliamed_golden_eggs" in data && data.uncliamed_golden_eggs != undefined) {
                        this.uncliamed_golden_eggs = data.uncliamed_golden_eggs;
                    }
                    if ("soul_eggs" in data && data.soul_eggs != undefined) {
                        this.soul_eggs = data.soul_eggs;
                    }
                    if ("unclaimed_soul_eggs" in data && data.unclaimed_soul_eggs != undefined) {
                        this.unclaimed_soul_eggs = data.unclaimed_soul_eggs;
                    }
                    if ("soul_eggs_d" in data && data.soul_eggs_d != undefined) {
                        this.soul_eggs_d = data.soul_eggs_d;
                    }
                    if ("unclaimed_soul_eggs_d" in data && data.unclaimed_soul_eggs_d != undefined) {
                        this.unclaimed_soul_eggs_d = data.unclaimed_soul_eggs_d;
                    }
                    if ("eggs_of_prophecy" in data && data.eggs_of_prophecy != undefined) {
                        this.eggs_of_prophecy = data.eggs_of_prophecy;
                    }
                    if ("unclaimed_eggs_of_prophecy" in data && data.unclaimed_eggs_of_prophecy != undefined) {
                        this.unclaimed_eggs_of_prophecy = data.unclaimed_eggs_of_prophecy;
                    }
                    if ("shell_scripts_earned" in data && data.shell_scripts_earned != undefined) {
                        this.shell_scripts_earned = data.shell_scripts_earned;
                    }
                    if ("shell_scripts_spent" in data && data.shell_scripts_spent != undefined) {
                        this.shell_scripts_spent = data.shell_scripts_spent;
                    }
                    if ("unclaimed_shell_scripts" in data && data.unclaimed_shell_scripts != undefined) {
                        this.unclaimed_shell_scripts = data.unclaimed_shell_scripts;
                    }
                    if ("prestige_cash_earned" in data && data.prestige_cash_earned != undefined) {
                        this.prestige_cash_earned = data.prestige_cash_earned;
                    }
                    if ("prestige_soul_boost_cash" in data && data.prestige_soul_boost_cash != undefined) {
                        this.prestige_soul_boost_cash = data.prestige_soul_boost_cash;
                    }
                    if ("lifetime_cash_earned" in data && data.lifetime_cash_earned != undefined) {
                        this.lifetime_cash_earned = data.lifetime_cash_earned;
                    }
                    if ("piggy_bank" in data && data.piggy_bank != undefined) {
                        this.piggy_bank = data.piggy_bank;
                    }
                    if ("piggy_full_alert_shown" in data && data.piggy_full_alert_shown != undefined) {
                        this.piggy_full_alert_shown = data.piggy_full_alert_shown;
                    }
                    if ("permit_level" in data && data.permit_level != undefined) {
                        this.permit_level = data.permit_level;
                    }
                    this.epic_research = data.epic_research;
                    if ("hyperloop_station" in data && data.hyperloop_station != undefined) {
                        this.hyperloop_station = data.hyperloop_station;
                    }
                    if ("next_daily_gift_time" in data && data.next_daily_gift_time != undefined) {
                        this.next_daily_gift_time = data.next_daily_gift_time;
                    }
                    if ("last_daily_gift_collected_day" in data && data.last_daily_gift_collected_day != undefined) {
                        this.last_daily_gift_collected_day = data.last_daily_gift_collected_day;
                    }
                    if ("num_daily_gifts_collected" in data && data.num_daily_gifts_collected != undefined) {
                        this.num_daily_gifts_collected = data.num_daily_gifts_collected;
                    }
                    this.news = data.news;
                    if ("last_news_time" in data && data.last_news_time != undefined) {
                        this.last_news_time = data.last_news_time;
                    }
                    if ("current_multiplier" in data && data.current_multiplier != undefined) {
                        this.current_multiplier = data.current_multiplier;
                    }
                    if ("current_multiplier_expiration" in data && data.current_multiplier_expiration != undefined) {
                        this.current_multiplier_expiration = data.current_multiplier_expiration;
                    }
                    this.achievements = data.achievements;
                    this.max_farm_size_reached = data.max_farm_size_reached;
                    this.egg_medal_level = data.egg_medal_level;
                    if ("long_idle_notification_set" in data && data.long_idle_notification_set != undefined) {
                        this.long_idle_notification_set = data.long_idle_notification_set;
                    }
                    if ("long_idle_notification_threshold" in data && data.long_idle_notification_threshold != undefined) {
                        this.long_idle_notification_threshold = data.long_idle_notification_threshold;
                    }
                    if ("long_idle_reward" in data && data.long_idle_reward != undefined) {
                        this.long_idle_reward = data.long_idle_reward;
                    }
                    this.boosts = data.boosts;
                    if ("total_time_cheats_detected" in data && data.total_time_cheats_detected != undefined) {
                        this.total_time_cheats_detected = data.total_time_cheats_detected;
                    }
                    if ("force_elite_contracts" in data && data.force_elite_contracts != undefined) {
                        this.force_elite_contracts = data.force_elite_contracts;
                    }
                    if ("new_player_event_end_time" in data && data.new_player_event_end_time != undefined) {
                        this.new_player_event_end_time = data.new_player_event_end_time;
                    }
                }
            }
            get current_farm() {
                return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
            }
            set current_farm(value: number) {
                pb_1.Message.setField(this, 22, value);
            }
            get has_current_farm() {
                return pb_1.Message.getField(this, 22) != null;
            }
            get max_egg_reached() {
                return pb_1.Message.getFieldWithDefault(this, 1, Egg.EDIBLE) as Egg;
            }
            set max_egg_reached(value: Egg) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_max_egg_reached() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get golden_eggs_earned() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set golden_eggs_earned(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_golden_eggs_earned() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get golden_eggs_spent() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set golden_eggs_spent(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_golden_eggs_spent() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get uncliamed_golden_eggs() {
                return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
            }
            set uncliamed_golden_eggs(value: number) {
                pb_1.Message.setField(this, 16, value);
            }
            get has_uncliamed_golden_eggs() {
                return pb_1.Message.getField(this, 16) != null;
            }
            get soul_eggs() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set soul_eggs(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_soul_eggs() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get unclaimed_soul_eggs() {
                return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
            }
            set unclaimed_soul_eggs(value: number) {
                pb_1.Message.setField(this, 17, value);
            }
            get has_unclaimed_soul_eggs() {
                return pb_1.Message.getField(this, 17) != null;
            }
            get soul_eggs_d() {
                return pb_1.Message.getFieldWithDefault(this, 34, 0) as number;
            }
            set soul_eggs_d(value: number) {
                pb_1.Message.setField(this, 34, value);
            }
            get has_soul_eggs_d() {
                return pb_1.Message.getField(this, 34) != null;
            }
            get unclaimed_soul_eggs_d() {
                return pb_1.Message.getFieldWithDefault(this, 35, 0) as number;
            }
            set unclaimed_soul_eggs_d(value: number) {
                pb_1.Message.setField(this, 35, value);
            }
            get has_unclaimed_soul_eggs_d() {
                return pb_1.Message.getField(this, 35) != null;
            }
            get eggs_of_prophecy() {
                return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
            }
            set eggs_of_prophecy(value: number) {
                pb_1.Message.setField(this, 23, value);
            }
            get has_eggs_of_prophecy() {
                return pb_1.Message.getField(this, 23) != null;
            }
            get unclaimed_eggs_of_prophecy() {
                return pb_1.Message.getFieldWithDefault(this, 24, 0) as number;
            }
            set unclaimed_eggs_of_prophecy(value: number) {
                pb_1.Message.setField(this, 24, value);
            }
            get has_unclaimed_eggs_of_prophecy() {
                return pb_1.Message.getField(this, 24) != null;
            }
            get shell_scripts_earned() {
                return pb_1.Message.getFieldWithDefault(this, 38, 0) as number;
            }
            set shell_scripts_earned(value: number) {
                pb_1.Message.setField(this, 38, value);
            }
            get has_shell_scripts_earned() {
                return pb_1.Message.getField(this, 38) != null;
            }
            get shell_scripts_spent() {
                return pb_1.Message.getFieldWithDefault(this, 39, 0) as number;
            }
            set shell_scripts_spent(value: number) {
                pb_1.Message.setField(this, 39, value);
            }
            get has_shell_scripts_spent() {
                return pb_1.Message.getField(this, 39) != null;
            }
            get unclaimed_shell_scripts() {
                return pb_1.Message.getFieldWithDefault(this, 40, 0) as number;
            }
            set unclaimed_shell_scripts(value: number) {
                pb_1.Message.setField(this, 40, value);
            }
            get has_unclaimed_shell_scripts() {
                return pb_1.Message.getField(this, 40) != null;
            }
            get prestige_cash_earned() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set prestige_cash_earned(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_prestige_cash_earned() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get prestige_soul_boost_cash() {
                return pb_1.Message.getFieldWithDefault(this, 33, 0) as number;
            }
            set prestige_soul_boost_cash(value: number) {
                pb_1.Message.setField(this, 33, value);
            }
            get has_prestige_soul_boost_cash() {
                return pb_1.Message.getField(this, 33) != null;
            }
            get lifetime_cash_earned() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set lifetime_cash_earned(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_lifetime_cash_earned() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get piggy_bank() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set piggy_bank(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get has_piggy_bank() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get piggy_full_alert_shown() {
                return pb_1.Message.getFieldWithDefault(this, 31, false) as boolean;
            }
            set piggy_full_alert_shown(value: boolean) {
                pb_1.Message.setField(this, 31, value);
            }
            get has_piggy_full_alert_shown() {
                return pb_1.Message.getField(this, 31) != null;
            }
            get permit_level() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set permit_level(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get has_permit_level() {
                return pb_1.Message.getField(this, 8) != null;
            }
            get epic_research() {
                return pb_1.Message.getRepeatedWrapperField(this, Backup.ResearchItem, 9) as Backup.ResearchItem[];
            }
            set epic_research(value: Backup.ResearchItem[]) {
                pb_1.Message.setRepeatedWrapperField(this, 9, value);
            }
            get hyperloop_station() {
                return pb_1.Message.getFieldWithDefault(this, 29, false) as boolean;
            }
            set hyperloop_station(value: boolean) {
                pb_1.Message.setField(this, 29, value);
            }
            get has_hyperloop_station() {
                return pb_1.Message.getField(this, 29) != null;
            }
            get next_daily_gift_time() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }
            set next_daily_gift_time(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get has_next_daily_gift_time() {
                return pb_1.Message.getField(this, 10) != null;
            }
            get last_daily_gift_collected_day() {
                return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
            }
            set last_daily_gift_collected_day(value: number) {
                pb_1.Message.setField(this, 20, value);
            }
            get has_last_daily_gift_collected_day() {
                return pb_1.Message.getField(this, 20) != null;
            }
            get num_daily_gifts_collected() {
                return pb_1.Message.getFieldWithDefault(this, 28, 0) as number;
            }
            set num_daily_gifts_collected(value: number) {
                pb_1.Message.setField(this, 28, value);
            }
            get has_num_daily_gifts_collected() {
                return pb_1.Message.getField(this, 28) != null;
            }
            get news() {
                return pb_1.Message.getRepeatedWrapperField(this, Backup.NewsHeadline, 11) as Backup.NewsHeadline[];
            }
            set news(value: Backup.NewsHeadline[]) {
                pb_1.Message.setRepeatedWrapperField(this, 11, value);
            }
            get last_news_time() {
                return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
            }
            set last_news_time(value: number) {
                pb_1.Message.setField(this, 12, value);
            }
            get has_last_news_time() {
                return pb_1.Message.getField(this, 12) != null;
            }
            get current_multiplier() {
                return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
            }
            set current_multiplier(value: number) {
                pb_1.Message.setField(this, 13, value);
            }
            get has_current_multiplier() {
                return pb_1.Message.getField(this, 13) != null;
            }
            get current_multiplier_expiration() {
                return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
            }
            set current_multiplier_expiration(value: number) {
                pb_1.Message.setField(this, 14, value);
            }
            get has_current_multiplier_expiration() {
                return pb_1.Message.getField(this, 14) != null;
            }
            get achievements() {
                return pb_1.Message.getRepeatedWrapperField(this, Backup.AchievementInfo, 15) as Backup.AchievementInfo[];
            }
            set achievements(value: Backup.AchievementInfo[]) {
                pb_1.Message.setRepeatedWrapperField(this, 15, value);
            }
            get max_farm_size_reached() {
                return pb_1.Message.getFieldWithDefault(this, 18, []) as number[];
            }
            set max_farm_size_reached(value: number[]) {
                pb_1.Message.setField(this, 18, value);
            }
            get egg_medal_level() {
                return pb_1.Message.getFieldWithDefault(this, 19, []) as number[];
            }
            set egg_medal_level(value: number[]) {
                pb_1.Message.setField(this, 19, value);
            }
            get long_idle_notification_set() {
                return pb_1.Message.getFieldWithDefault(this, 25, false) as boolean;
            }
            set long_idle_notification_set(value: boolean) {
                pb_1.Message.setField(this, 25, value);
            }
            get has_long_idle_notification_set() {
                return pb_1.Message.getField(this, 25) != null;
            }
            get long_idle_notification_threshold() {
                return pb_1.Message.getFieldWithDefault(this, 26, 0) as number;
            }
            set long_idle_notification_threshold(value: number) {
                pb_1.Message.setField(this, 26, value);
            }
            get has_long_idle_notification_threshold() {
                return pb_1.Message.getField(this, 26) != null;
            }
            get long_idle_reward() {
                return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
            }
            set long_idle_reward(value: number) {
                pb_1.Message.setField(this, 27, value);
            }
            get has_long_idle_reward() {
                return pb_1.Message.getField(this, 27) != null;
            }
            get boosts() {
                return pb_1.Message.getRepeatedWrapperField(this, Backup.OwnedBoost, 30) as Backup.OwnedBoost[];
            }
            set boosts(value: Backup.OwnedBoost[]) {
                pb_1.Message.setRepeatedWrapperField(this, 30, value);
            }
            get total_time_cheats_detected() {
                return pb_1.Message.getFieldWithDefault(this, 32, 0) as number;
            }
            set total_time_cheats_detected(value: number) {
                pb_1.Message.setField(this, 32, value);
            }
            get has_total_time_cheats_detected() {
                return pb_1.Message.getField(this, 32) != null;
            }
            get force_elite_contracts() {
                return pb_1.Message.getFieldWithDefault(this, 36, false) as boolean;
            }
            set force_elite_contracts(value: boolean) {
                pb_1.Message.setField(this, 36, value);
            }
            get has_force_elite_contracts() {
                return pb_1.Message.getField(this, 36) != null;
            }
            get new_player_event_end_time() {
                return pb_1.Message.getFieldWithDefault(this, 37, 0) as number;
            }
            set new_player_event_end_time(value: number) {
                pb_1.Message.setField(this, 37, value);
            }
            get has_new_player_event_end_time() {
                return pb_1.Message.getField(this, 37) != null;
            }
            static fromObject(data: {
                current_farm?: number;
                max_egg_reached?: Egg;
                golden_eggs_earned?: number;
                golden_eggs_spent?: number;
                uncliamed_golden_eggs?: number;
                soul_eggs?: number;
                unclaimed_soul_eggs?: number;
                soul_eggs_d?: number;
                unclaimed_soul_eggs_d?: number;
                eggs_of_prophecy?: number;
                unclaimed_eggs_of_prophecy?: number;
                shell_scripts_earned?: number;
                shell_scripts_spent?: number;
                unclaimed_shell_scripts?: number;
                prestige_cash_earned?: number;
                prestige_soul_boost_cash?: number;
                lifetime_cash_earned?: number;
                piggy_bank?: number;
                piggy_full_alert_shown?: boolean;
                permit_level?: number;
                epic_research?: ReturnType<typeof Backup.ResearchItem.prototype.toObject>[];
                hyperloop_station?: boolean;
                next_daily_gift_time?: number;
                last_daily_gift_collected_day?: number;
                num_daily_gifts_collected?: number;
                news?: ReturnType<typeof Backup.NewsHeadline.prototype.toObject>[];
                last_news_time?: number;
                current_multiplier?: number;
                current_multiplier_expiration?: number;
                achievements?: ReturnType<typeof Backup.AchievementInfo.prototype.toObject>[];
                max_farm_size_reached: number[];
                egg_medal_level: number[];
                long_idle_notification_set?: boolean;
                long_idle_notification_threshold?: number;
                long_idle_reward?: number;
                boosts?: ReturnType<typeof Backup.OwnedBoost.prototype.toObject>[];
                total_time_cheats_detected?: number;
                force_elite_contracts?: boolean;
                new_player_event_end_time?: number;
            }): Game {
                const message = new Game({
                    epic_research: data.epic_research.map(item => Backup.ResearchItem.fromObject(item)),
                    news: data.news.map(item => Backup.NewsHeadline.fromObject(item)),
                    achievements: data.achievements.map(item => Backup.AchievementInfo.fromObject(item)),
                    max_farm_size_reached: data.max_farm_size_reached,
                    egg_medal_level: data.egg_medal_level,
                    boosts: data.boosts.map(item => Backup.OwnedBoost.fromObject(item))
                });
                if (data.current_farm != null) {
                    message.current_farm = data.current_farm;
                }
                if (data.max_egg_reached != null) {
                    message.max_egg_reached = data.max_egg_reached;
                }
                if (data.golden_eggs_earned != null) {
                    message.golden_eggs_earned = data.golden_eggs_earned;
                }
                if (data.golden_eggs_spent != null) {
                    message.golden_eggs_spent = data.golden_eggs_spent;
                }
                if (data.uncliamed_golden_eggs != null) {
                    message.uncliamed_golden_eggs = data.uncliamed_golden_eggs;
                }
                if (data.soul_eggs != null) {
                    message.soul_eggs = data.soul_eggs;
                }
                if (data.unclaimed_soul_eggs != null) {
                    message.unclaimed_soul_eggs = data.unclaimed_soul_eggs;
                }
                if (data.soul_eggs_d != null) {
                    message.soul_eggs_d = data.soul_eggs_d;
                }
                if (data.unclaimed_soul_eggs_d != null) {
                    message.unclaimed_soul_eggs_d = data.unclaimed_soul_eggs_d;
                }
                if (data.eggs_of_prophecy != null) {
                    message.eggs_of_prophecy = data.eggs_of_prophecy;
                }
                if (data.unclaimed_eggs_of_prophecy != null) {
                    message.unclaimed_eggs_of_prophecy = data.unclaimed_eggs_of_prophecy;
                }
                if (data.shell_scripts_earned != null) {
                    message.shell_scripts_earned = data.shell_scripts_earned;
                }
                if (data.shell_scripts_spent != null) {
                    message.shell_scripts_spent = data.shell_scripts_spent;
                }
                if (data.unclaimed_shell_scripts != null) {
                    message.unclaimed_shell_scripts = data.unclaimed_shell_scripts;
                }
                if (data.prestige_cash_earned != null) {
                    message.prestige_cash_earned = data.prestige_cash_earned;
                }
                if (data.prestige_soul_boost_cash != null) {
                    message.prestige_soul_boost_cash = data.prestige_soul_boost_cash;
                }
                if (data.lifetime_cash_earned != null) {
                    message.lifetime_cash_earned = data.lifetime_cash_earned;
                }
                if (data.piggy_bank != null) {
                    message.piggy_bank = data.piggy_bank;
                }
                if (data.piggy_full_alert_shown != null) {
                    message.piggy_full_alert_shown = data.piggy_full_alert_shown;
                }
                if (data.permit_level != null) {
                    message.permit_level = data.permit_level;
                }
                if (data.hyperloop_station != null) {
                    message.hyperloop_station = data.hyperloop_station;
                }
                if (data.next_daily_gift_time != null) {
                    message.next_daily_gift_time = data.next_daily_gift_time;
                }
                if (data.last_daily_gift_collected_day != null) {
                    message.last_daily_gift_collected_day = data.last_daily_gift_collected_day;
                }
                if (data.num_daily_gifts_collected != null) {
                    message.num_daily_gifts_collected = data.num_daily_gifts_collected;
                }
                if (data.last_news_time != null) {
                    message.last_news_time = data.last_news_time;
                }
                if (data.current_multiplier != null) {
                    message.current_multiplier = data.current_multiplier;
                }
                if (data.current_multiplier_expiration != null) {
                    message.current_multiplier_expiration = data.current_multiplier_expiration;
                }
                if (data.long_idle_notification_set != null) {
                    message.long_idle_notification_set = data.long_idle_notification_set;
                }
                if (data.long_idle_notification_threshold != null) {
                    message.long_idle_notification_threshold = data.long_idle_notification_threshold;
                }
                if (data.long_idle_reward != null) {
                    message.long_idle_reward = data.long_idle_reward;
                }
                if (data.total_time_cheats_detected != null) {
                    message.total_time_cheats_detected = data.total_time_cheats_detected;
                }
                if (data.force_elite_contracts != null) {
                    message.force_elite_contracts = data.force_elite_contracts;
                }
                if (data.new_player_event_end_time != null) {
                    message.new_player_event_end_time = data.new_player_event_end_time;
                }
                return message;
            }
            toObject() {
                const data: {
                    current_farm?: number;
                    max_egg_reached?: Egg;
                    golden_eggs_earned?: number;
                    golden_eggs_spent?: number;
                    uncliamed_golden_eggs?: number;
                    soul_eggs?: number;
                    unclaimed_soul_eggs?: number;
                    soul_eggs_d?: number;
                    unclaimed_soul_eggs_d?: number;
                    eggs_of_prophecy?: number;
                    unclaimed_eggs_of_prophecy?: number;
                    shell_scripts_earned?: number;
                    shell_scripts_spent?: number;
                    unclaimed_shell_scripts?: number;
                    prestige_cash_earned?: number;
                    prestige_soul_boost_cash?: number;
                    lifetime_cash_earned?: number;
                    piggy_bank?: number;
                    piggy_full_alert_shown?: boolean;
                    permit_level?: number;
                    epic_research?: ReturnType<typeof Backup.ResearchItem.prototype.toObject>[];
                    hyperloop_station?: boolean;
                    next_daily_gift_time?: number;
                    last_daily_gift_collected_day?: number;
                    num_daily_gifts_collected?: number;
                    news?: ReturnType<typeof Backup.NewsHeadline.prototype.toObject>[];
                    last_news_time?: number;
                    current_multiplier?: number;
                    current_multiplier_expiration?: number;
                    achievements?: ReturnType<typeof Backup.AchievementInfo.prototype.toObject>[];
                    max_farm_size_reached: number[];
                    egg_medal_level: number[];
                    long_idle_notification_set?: boolean;
                    long_idle_notification_threshold?: number;
                    long_idle_reward?: number;
                    boosts?: ReturnType<typeof Backup.OwnedBoost.prototype.toObject>[];
                    total_time_cheats_detected?: number;
                    force_elite_contracts?: boolean;
                    new_player_event_end_time?: number;
                } = {
                    max_farm_size_reached: this.max_farm_size_reached,
                    egg_medal_level: this.egg_medal_level
                };
                if (this.current_farm != null) {
                    data.current_farm = this.current_farm;
                }
                if (this.max_egg_reached != null) {
                    data.max_egg_reached = this.max_egg_reached;
                }
                if (this.golden_eggs_earned != null) {
                    data.golden_eggs_earned = this.golden_eggs_earned;
                }
                if (this.golden_eggs_spent != null) {
                    data.golden_eggs_spent = this.golden_eggs_spent;
                }
                if (this.uncliamed_golden_eggs != null) {
                    data.uncliamed_golden_eggs = this.uncliamed_golden_eggs;
                }
                if (this.soul_eggs != null) {
                    data.soul_eggs = this.soul_eggs;
                }
                if (this.unclaimed_soul_eggs != null) {
                    data.unclaimed_soul_eggs = this.unclaimed_soul_eggs;
                }
                if (this.soul_eggs_d != null) {
                    data.soul_eggs_d = this.soul_eggs_d;
                }
                if (this.unclaimed_soul_eggs_d != null) {
                    data.unclaimed_soul_eggs_d = this.unclaimed_soul_eggs_d;
                }
                if (this.eggs_of_prophecy != null) {
                    data.eggs_of_prophecy = this.eggs_of_prophecy;
                }
                if (this.unclaimed_eggs_of_prophecy != null) {
                    data.unclaimed_eggs_of_prophecy = this.unclaimed_eggs_of_prophecy;
                }
                if (this.shell_scripts_earned != null) {
                    data.shell_scripts_earned = this.shell_scripts_earned;
                }
                if (this.shell_scripts_spent != null) {
                    data.shell_scripts_spent = this.shell_scripts_spent;
                }
                if (this.unclaimed_shell_scripts != null) {
                    data.unclaimed_shell_scripts = this.unclaimed_shell_scripts;
                }
                if (this.prestige_cash_earned != null) {
                    data.prestige_cash_earned = this.prestige_cash_earned;
                }
                if (this.prestige_soul_boost_cash != null) {
                    data.prestige_soul_boost_cash = this.prestige_soul_boost_cash;
                }
                if (this.lifetime_cash_earned != null) {
                    data.lifetime_cash_earned = this.lifetime_cash_earned;
                }
                if (this.piggy_bank != null) {
                    data.piggy_bank = this.piggy_bank;
                }
                if (this.piggy_full_alert_shown != null) {
                    data.piggy_full_alert_shown = this.piggy_full_alert_shown;
                }
                if (this.permit_level != null) {
                    data.permit_level = this.permit_level;
                }
                if (this.epic_research != null) {
                    data.epic_research = this.epic_research.map((item: Backup.ResearchItem) => item.toObject());
                }
                if (this.hyperloop_station != null) {
                    data.hyperloop_station = this.hyperloop_station;
                }
                if (this.next_daily_gift_time != null) {
                    data.next_daily_gift_time = this.next_daily_gift_time;
                }
                if (this.last_daily_gift_collected_day != null) {
                    data.last_daily_gift_collected_day = this.last_daily_gift_collected_day;
                }
                if (this.num_daily_gifts_collected != null) {
                    data.num_daily_gifts_collected = this.num_daily_gifts_collected;
                }
                if (this.news != null) {
                    data.news = this.news.map((item: Backup.NewsHeadline) => item.toObject());
                }
                if (this.last_news_time != null) {
                    data.last_news_time = this.last_news_time;
                }
                if (this.current_multiplier != null) {
                    data.current_multiplier = this.current_multiplier;
                }
                if (this.current_multiplier_expiration != null) {
                    data.current_multiplier_expiration = this.current_multiplier_expiration;
                }
                if (this.achievements != null) {
                    data.achievements = this.achievements.map((item: Backup.AchievementInfo) => item.toObject());
                }
                if (this.long_idle_notification_set != null) {
                    data.long_idle_notification_set = this.long_idle_notification_set;
                }
                if (this.long_idle_notification_threshold != null) {
                    data.long_idle_notification_threshold = this.long_idle_notification_threshold;
                }
                if (this.long_idle_reward != null) {
                    data.long_idle_reward = this.long_idle_reward;
                }
                if (this.boosts != null) {
                    data.boosts = this.boosts.map((item: Backup.OwnedBoost) => item.toObject());
                }
                if (this.total_time_cheats_detected != null) {
                    data.total_time_cheats_detected = this.total_time_cheats_detected;
                }
                if (this.force_elite_contracts != null) {
                    data.force_elite_contracts = this.force_elite_contracts;
                }
                if (this.new_player_event_end_time != null) {
                    data.new_player_event_end_time = this.new_player_event_end_time;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_current_farm)
                    writer.writeUint32(22, this.current_farm);
                if (this.has_max_egg_reached)
                    writer.writeEnum(1, this.max_egg_reached);
                if (this.has_golden_eggs_earned)
                    writer.writeUint64(2, this.golden_eggs_earned);
                if (this.has_golden_eggs_spent)
                    writer.writeUint64(3, this.golden_eggs_spent);
                if (this.has_uncliamed_golden_eggs)
                    writer.writeUint64(16, this.uncliamed_golden_eggs);
                if (this.has_soul_eggs)
                    writer.writeUint64(4, this.soul_eggs);
                if (this.has_unclaimed_soul_eggs)
                    writer.writeUint64(17, this.unclaimed_soul_eggs);
                if (this.has_soul_eggs_d)
                    writer.writeDouble(34, this.soul_eggs_d);
                if (this.has_unclaimed_soul_eggs_d)
                    writer.writeDouble(35, this.unclaimed_soul_eggs_d);
                if (this.has_eggs_of_prophecy)
                    writer.writeUint64(23, this.eggs_of_prophecy);
                if (this.has_unclaimed_eggs_of_prophecy)
                    writer.writeUint64(24, this.unclaimed_eggs_of_prophecy);
                if (this.has_shell_scripts_earned)
                    writer.writeUint64(38, this.shell_scripts_earned);
                if (this.has_shell_scripts_spent)
                    writer.writeUint64(39, this.shell_scripts_spent);
                if (this.has_unclaimed_shell_scripts)
                    writer.writeUint64(40, this.unclaimed_shell_scripts);
                if (this.has_prestige_cash_earned)
                    writer.writeDouble(5, this.prestige_cash_earned);
                if (this.has_prestige_soul_boost_cash)
                    writer.writeDouble(33, this.prestige_soul_boost_cash);
                if (this.has_lifetime_cash_earned)
                    writer.writeDouble(6, this.lifetime_cash_earned);
                if (this.has_piggy_bank)
                    writer.writeUint64(7, this.piggy_bank);
                if (this.has_piggy_full_alert_shown)
                    writer.writeBool(31, this.piggy_full_alert_shown);
                if (this.has_permit_level)
                    writer.writeUint32(8, this.permit_level);
                if (this.epic_research.length)
                    writer.writeRepeatedMessage(9, this.epic_research, (item: Backup.ResearchItem) => item.serialize(writer));
                if (this.has_hyperloop_station)
                    writer.writeBool(29, this.hyperloop_station);
                if (this.has_next_daily_gift_time)
                    writer.writeDouble(10, this.next_daily_gift_time);
                if (this.has_last_daily_gift_collected_day)
                    writer.writeUint32(20, this.last_daily_gift_collected_day);
                if (this.has_num_daily_gifts_collected)
                    writer.writeUint32(28, this.num_daily_gifts_collected);
                if (this.news.length)
                    writer.writeRepeatedMessage(11, this.news, (item: Backup.NewsHeadline) => item.serialize(writer));
                if (this.has_last_news_time)
                    writer.writeDouble(12, this.last_news_time);
                if (this.has_current_multiplier)
                    writer.writeDouble(13, this.current_multiplier);
                if (this.has_current_multiplier_expiration)
                    writer.writeDouble(14, this.current_multiplier_expiration);
                if (this.achievements.length)
                    writer.writeRepeatedMessage(15, this.achievements, (item: Backup.AchievementInfo) => item.serialize(writer));
                if (this.max_farm_size_reached.length)
                    writer.writeRepeatedUint64(18, this.max_farm_size_reached);
                if (this.egg_medal_level.length)
                    writer.writeRepeatedUint32(19, this.egg_medal_level);
                if (this.has_long_idle_notification_set)
                    writer.writeBool(25, this.long_idle_notification_set);
                if (this.has_long_idle_notification_threshold)
                    writer.writeDouble(26, this.long_idle_notification_threshold);
                if (this.has_long_idle_reward)
                    writer.writeDouble(27, this.long_idle_reward);
                if (this.boosts.length)
                    writer.writeRepeatedMessage(30, this.boosts, (item: Backup.OwnedBoost) => item.serialize(writer));
                if (this.has_total_time_cheats_detected)
                    writer.writeUint32(32, this.total_time_cheats_detected);
                if (this.has_force_elite_contracts)
                    writer.writeBool(36, this.force_elite_contracts);
                if (this.has_new_player_event_end_time)
                    writer.writeDouble(37, this.new_player_event_end_time);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Game {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Game();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 22:
                            message.current_farm = reader.readUint32();
                            break;
                        case 1:
                            message.max_egg_reached = reader.readEnum();
                            break;
                        case 2:
                            message.golden_eggs_earned = reader.readUint64();
                            break;
                        case 3:
                            message.golden_eggs_spent = reader.readUint64();
                            break;
                        case 16:
                            message.uncliamed_golden_eggs = reader.readUint64();
                            break;
                        case 4:
                            message.soul_eggs = reader.readUint64();
                            break;
                        case 17:
                            message.unclaimed_soul_eggs = reader.readUint64();
                            break;
                        case 34:
                            message.soul_eggs_d = reader.readDouble();
                            break;
                        case 35:
                            message.unclaimed_soul_eggs_d = reader.readDouble();
                            break;
                        case 23:
                            message.eggs_of_prophecy = reader.readUint64();
                            break;
                        case 24:
                            message.unclaimed_eggs_of_prophecy = reader.readUint64();
                            break;
                        case 38:
                            message.shell_scripts_earned = reader.readUint64();
                            break;
                        case 39:
                            message.shell_scripts_spent = reader.readUint64();
                            break;
                        case 40:
                            message.unclaimed_shell_scripts = reader.readUint64();
                            break;
                        case 5:
                            message.prestige_cash_earned = reader.readDouble();
                            break;
                        case 33:
                            message.prestige_soul_boost_cash = reader.readDouble();
                            break;
                        case 6:
                            message.lifetime_cash_earned = reader.readDouble();
                            break;
                        case 7:
                            message.piggy_bank = reader.readUint64();
                            break;
                        case 31:
                            message.piggy_full_alert_shown = reader.readBool();
                            break;
                        case 8:
                            message.permit_level = reader.readUint32();
                            break;
                        case 9:
                            reader.readMessage(message.epic_research, () => pb_1.Message.addToRepeatedWrapperField(message, 9, Backup.ResearchItem.deserialize(reader), Backup.ResearchItem));
                            break;
                        case 29:
                            message.hyperloop_station = reader.readBool();
                            break;
                        case 10:
                            message.next_daily_gift_time = reader.readDouble();
                            break;
                        case 20:
                            message.last_daily_gift_collected_day = reader.readUint32();
                            break;
                        case 28:
                            message.num_daily_gifts_collected = reader.readUint32();
                            break;
                        case 11:
                            reader.readMessage(message.news, () => pb_1.Message.addToRepeatedWrapperField(message, 11, Backup.NewsHeadline.deserialize(reader), Backup.NewsHeadline));
                            break;
                        case 12:
                            message.last_news_time = reader.readDouble();
                            break;
                        case 13:
                            message.current_multiplier = reader.readDouble();
                            break;
                        case 14:
                            message.current_multiplier_expiration = reader.readDouble();
                            break;
                        case 15:
                            reader.readMessage(message.achievements, () => pb_1.Message.addToRepeatedWrapperField(message, 15, Backup.AchievementInfo.deserialize(reader), Backup.AchievementInfo));
                            break;
                        case 18:
                            pb_1.Message.addToRepeatedField(message, 18, reader.readUint64());
                            break;
                        case 19:
                            pb_1.Message.addToRepeatedField(message, 19, reader.readUint32());
                            break;
                        case 25:
                            message.long_idle_notification_set = reader.readBool();
                            break;
                        case 26:
                            message.long_idle_notification_threshold = reader.readDouble();
                            break;
                        case 27:
                            message.long_idle_reward = reader.readDouble();
                            break;
                        case 30:
                            reader.readMessage(message.boosts, () => pb_1.Message.addToRepeatedWrapperField(message, 30, Backup.OwnedBoost.deserialize(reader), Backup.OwnedBoost));
                            break;
                        case 32:
                            message.total_time_cheats_detected = reader.readUint32();
                            break;
                        case 36:
                            message.force_elite_contracts = reader.readBool();
                            break;
                        case 37:
                            message.new_player_event_end_time = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Game {
                return Game.deserialize(bytes);
            }
        }
        export class Artifacts extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                infusing?: boolean;
                item_being_infused?: ArtifactInventoryItem;
                spec_being_infused?: ArtifactSpec;
                egg_type_infusing?: Egg;
                infusing_eggs_required?: number;
                eggs_infused?: number;
                flow_percentage_artifacts?: number;
                fueling_enabled?: boolean;
                tank_filling_enabled?: boolean;
                tank_level?: number;
                tank_fuels: number[];
                tank_limits: number[];
                last_fueled_ship?: MissionInfo.Spaceship;
                inventory_score?: number;
                crafting_xp?: number;
                enabled?: boolean;
                intro_shown?: boolean;
                infusing_enabled_DEPRECATED?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [16, 18], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("infusing" in data && data.infusing != undefined) {
                        this.infusing = data.infusing;
                    }
                    if ("item_being_infused" in data && data.item_being_infused != undefined) {
                        this.item_being_infused = data.item_being_infused;
                    }
                    if ("spec_being_infused" in data && data.spec_being_infused != undefined) {
                        this.spec_being_infused = data.spec_being_infused;
                    }
                    if ("egg_type_infusing" in data && data.egg_type_infusing != undefined) {
                        this.egg_type_infusing = data.egg_type_infusing;
                    }
                    if ("infusing_eggs_required" in data && data.infusing_eggs_required != undefined) {
                        this.infusing_eggs_required = data.infusing_eggs_required;
                    }
                    if ("eggs_infused" in data && data.eggs_infused != undefined) {
                        this.eggs_infused = data.eggs_infused;
                    }
                    if ("flow_percentage_artifacts" in data && data.flow_percentage_artifacts != undefined) {
                        this.flow_percentage_artifacts = data.flow_percentage_artifacts;
                    }
                    if ("fueling_enabled" in data && data.fueling_enabled != undefined) {
                        this.fueling_enabled = data.fueling_enabled;
                    }
                    if ("tank_filling_enabled" in data && data.tank_filling_enabled != undefined) {
                        this.tank_filling_enabled = data.tank_filling_enabled;
                    }
                    if ("tank_level" in data && data.tank_level != undefined) {
                        this.tank_level = data.tank_level;
                    }
                    this.tank_fuels = data.tank_fuels;
                    this.tank_limits = data.tank_limits;
                    if ("last_fueled_ship" in data && data.last_fueled_ship != undefined) {
                        this.last_fueled_ship = data.last_fueled_ship;
                    }
                    if ("inventory_score" in data && data.inventory_score != undefined) {
                        this.inventory_score = data.inventory_score;
                    }
                    if ("crafting_xp" in data && data.crafting_xp != undefined) {
                        this.crafting_xp = data.crafting_xp;
                    }
                    if ("enabled" in data && data.enabled != undefined) {
                        this.enabled = data.enabled;
                    }
                    if ("intro_shown" in data && data.intro_shown != undefined) {
                        this.intro_shown = data.intro_shown;
                    }
                    if ("infusing_enabled_DEPRECATED" in data && data.infusing_enabled_DEPRECATED != undefined) {
                        this.infusing_enabled_DEPRECATED = data.infusing_enabled_DEPRECATED;
                    }
                }
            }
            get infusing() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }
            set infusing(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_infusing() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get item_being_infused() {
                return pb_1.Message.getWrapperField(this, ArtifactInventoryItem, 2) as ArtifactInventoryItem;
            }
            set item_being_infused(value: ArtifactInventoryItem) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_item_being_infused() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get spec_being_infused() {
                return pb_1.Message.getWrapperField(this, ArtifactSpec, 13) as ArtifactSpec;
            }
            set spec_being_infused(value: ArtifactSpec) {
                pb_1.Message.setWrapperField(this, 13, value);
            }
            get has_spec_being_infused() {
                return pb_1.Message.getField(this, 13) != null;
            }
            get egg_type_infusing() {
                return pb_1.Message.getFieldWithDefault(this, 3, Egg.EDIBLE) as Egg;
            }
            set egg_type_infusing(value: Egg) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_egg_type_infusing() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get infusing_eggs_required() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set infusing_eggs_required(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_infusing_eggs_required() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get eggs_infused() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set eggs_infused(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_eggs_infused() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get flow_percentage_artifacts() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0.5) as number;
            }
            set flow_percentage_artifacts(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_flow_percentage_artifacts() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get fueling_enabled() {
                return pb_1.Message.getFieldWithDefault(this, 7, true) as boolean;
            }
            set fueling_enabled(value: boolean) {
                pb_1.Message.setField(this, 7, value);
            }
            get has_fueling_enabled() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get tank_filling_enabled() {
                return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
            }
            set tank_filling_enabled(value: boolean) {
                pb_1.Message.setField(this, 14, value);
            }
            get has_tank_filling_enabled() {
                return pb_1.Message.getField(this, 14) != null;
            }
            get tank_level() {
                return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
            }
            set tank_level(value: number) {
                pb_1.Message.setField(this, 15, value);
            }
            get has_tank_level() {
                return pb_1.Message.getField(this, 15) != null;
            }
            get tank_fuels() {
                return pb_1.Message.getFieldWithDefault(this, 16, []) as number[];
            }
            set tank_fuels(value: number[]) {
                pb_1.Message.setField(this, 16, value);
            }
            get tank_limits() {
                return pb_1.Message.getFieldWithDefault(this, 18, []) as number[];
            }
            set tank_limits(value: number[]) {
                pb_1.Message.setField(this, 18, value);
            }
            get last_fueled_ship() {
                return pb_1.Message.getFieldWithDefault(this, 9, 0) as MissionInfo.Spaceship;
            }
            set last_fueled_ship(value: MissionInfo.Spaceship) {
                pb_1.Message.setField(this, 9, value);
            }
            get has_last_fueled_ship() {
                return pb_1.Message.getField(this, 9) != null;
            }
            get inventory_score() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }
            set inventory_score(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get has_inventory_score() {
                return pb_1.Message.getField(this, 10) != null;
            }
            get crafting_xp() {
                return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
            }
            set crafting_xp(value: number) {
                pb_1.Message.setField(this, 17, value);
            }
            get has_crafting_xp() {
                return pb_1.Message.getField(this, 17) != null;
            }
            get enabled() {
                return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
            }
            set enabled(value: boolean) {
                pb_1.Message.setField(this, 11, value);
            }
            get has_enabled() {
                return pb_1.Message.getField(this, 11) != null;
            }
            get intro_shown() {
                return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
            }
            set intro_shown(value: boolean) {
                pb_1.Message.setField(this, 12, value);
            }
            get has_intro_shown() {
                return pb_1.Message.getField(this, 12) != null;
            }
            get infusing_enabled_DEPRECATED() {
                return pb_1.Message.getFieldWithDefault(this, 8, true) as boolean;
            }
            set infusing_enabled_DEPRECATED(value: boolean) {
                pb_1.Message.setField(this, 8, value);
            }
            get has_infusing_enabled_DEPRECATED() {
                return pb_1.Message.getField(this, 8) != null;
            }
            static fromObject(data: {
                infusing?: boolean;
                item_being_infused?: ReturnType<typeof ArtifactInventoryItem.prototype.toObject>;
                spec_being_infused?: ReturnType<typeof ArtifactSpec.prototype.toObject>;
                egg_type_infusing?: Egg;
                infusing_eggs_required?: number;
                eggs_infused?: number;
                flow_percentage_artifacts?: number;
                fueling_enabled?: boolean;
                tank_filling_enabled?: boolean;
                tank_level?: number;
                tank_fuels: number[];
                tank_limits: number[];
                last_fueled_ship?: MissionInfo.Spaceship;
                inventory_score?: number;
                crafting_xp?: number;
                enabled?: boolean;
                intro_shown?: boolean;
                infusing_enabled_DEPRECATED?: boolean;
            }): Artifacts {
                const message = new Artifacts({
                    tank_fuels: data.tank_fuels,
                    tank_limits: data.tank_limits
                });
                if (data.infusing != null) {
                    message.infusing = data.infusing;
                }
                if (data.item_being_infused != null) {
                    message.item_being_infused = ArtifactInventoryItem.fromObject(data.item_being_infused);
                }
                if (data.spec_being_infused != null) {
                    message.spec_being_infused = ArtifactSpec.fromObject(data.spec_being_infused);
                }
                if (data.egg_type_infusing != null) {
                    message.egg_type_infusing = data.egg_type_infusing;
                }
                if (data.infusing_eggs_required != null) {
                    message.infusing_eggs_required = data.infusing_eggs_required;
                }
                if (data.eggs_infused != null) {
                    message.eggs_infused = data.eggs_infused;
                }
                if (data.flow_percentage_artifacts != null) {
                    message.flow_percentage_artifacts = data.flow_percentage_artifacts;
                }
                if (data.fueling_enabled != null) {
                    message.fueling_enabled = data.fueling_enabled;
                }
                if (data.tank_filling_enabled != null) {
                    message.tank_filling_enabled = data.tank_filling_enabled;
                }
                if (data.tank_level != null) {
                    message.tank_level = data.tank_level;
                }
                if (data.last_fueled_ship != null) {
                    message.last_fueled_ship = data.last_fueled_ship;
                }
                if (data.inventory_score != null) {
                    message.inventory_score = data.inventory_score;
                }
                if (data.crafting_xp != null) {
                    message.crafting_xp = data.crafting_xp;
                }
                if (data.enabled != null) {
                    message.enabled = data.enabled;
                }
                if (data.intro_shown != null) {
                    message.intro_shown = data.intro_shown;
                }
                if (data.infusing_enabled_DEPRECATED != null) {
                    message.infusing_enabled_DEPRECATED = data.infusing_enabled_DEPRECATED;
                }
                return message;
            }
            toObject() {
                const data: {
                    infusing?: boolean;
                    item_being_infused?: ReturnType<typeof ArtifactInventoryItem.prototype.toObject>;
                    spec_being_infused?: ReturnType<typeof ArtifactSpec.prototype.toObject>;
                    egg_type_infusing?: Egg;
                    infusing_eggs_required?: number;
                    eggs_infused?: number;
                    flow_percentage_artifacts?: number;
                    fueling_enabled?: boolean;
                    tank_filling_enabled?: boolean;
                    tank_level?: number;
                    tank_fuels: number[];
                    tank_limits: number[];
                    last_fueled_ship?: MissionInfo.Spaceship;
                    inventory_score?: number;
                    crafting_xp?: number;
                    enabled?: boolean;
                    intro_shown?: boolean;
                    infusing_enabled_DEPRECATED?: boolean;
                } = {
                    tank_fuels: this.tank_fuels,
                    tank_limits: this.tank_limits
                };
                if (this.infusing != null) {
                    data.infusing = this.infusing;
                }
                if (this.item_being_infused != null) {
                    data.item_being_infused = this.item_being_infused.toObject();
                }
                if (this.spec_being_infused != null) {
                    data.spec_being_infused = this.spec_being_infused.toObject();
                }
                if (this.egg_type_infusing != null) {
                    data.egg_type_infusing = this.egg_type_infusing;
                }
                if (this.infusing_eggs_required != null) {
                    data.infusing_eggs_required = this.infusing_eggs_required;
                }
                if (this.eggs_infused != null) {
                    data.eggs_infused = this.eggs_infused;
                }
                if (this.flow_percentage_artifacts != null) {
                    data.flow_percentage_artifacts = this.flow_percentage_artifacts;
                }
                if (this.fueling_enabled != null) {
                    data.fueling_enabled = this.fueling_enabled;
                }
                if (this.tank_filling_enabled != null) {
                    data.tank_filling_enabled = this.tank_filling_enabled;
                }
                if (this.tank_level != null) {
                    data.tank_level = this.tank_level;
                }
                if (this.last_fueled_ship != null) {
                    data.last_fueled_ship = this.last_fueled_ship;
                }
                if (this.inventory_score != null) {
                    data.inventory_score = this.inventory_score;
                }
                if (this.crafting_xp != null) {
                    data.crafting_xp = this.crafting_xp;
                }
                if (this.enabled != null) {
                    data.enabled = this.enabled;
                }
                if (this.intro_shown != null) {
                    data.intro_shown = this.intro_shown;
                }
                if (this.infusing_enabled_DEPRECATED != null) {
                    data.infusing_enabled_DEPRECATED = this.infusing_enabled_DEPRECATED;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_infusing)
                    writer.writeBool(1, this.infusing);
                if (this.has_item_being_infused)
                    writer.writeMessage(2, this.item_being_infused, () => this.item_being_infused.serialize(writer));
                if (this.has_spec_being_infused)
                    writer.writeMessage(13, this.spec_being_infused, () => this.spec_being_infused.serialize(writer));
                if (this.has_egg_type_infusing)
                    writer.writeEnum(3, this.egg_type_infusing);
                if (this.has_infusing_eggs_required)
                    writer.writeDouble(4, this.infusing_eggs_required);
                if (this.has_eggs_infused)
                    writer.writeDouble(5, this.eggs_infused);
                if (this.has_flow_percentage_artifacts)
                    writer.writeDouble(6, this.flow_percentage_artifacts);
                if (this.has_fueling_enabled)
                    writer.writeBool(7, this.fueling_enabled);
                if (this.has_tank_filling_enabled)
                    writer.writeBool(14, this.tank_filling_enabled);
                if (this.has_tank_level)
                    writer.writeUint32(15, this.tank_level);
                if (this.tank_fuels.length)
                    writer.writeRepeatedDouble(16, this.tank_fuels);
                if (this.tank_limits.length)
                    writer.writeRepeatedDouble(18, this.tank_limits);
                if (this.has_last_fueled_ship)
                    writer.writeEnum(9, this.last_fueled_ship);
                if (this.has_inventory_score)
                    writer.writeDouble(10, this.inventory_score);
                if (this.has_crafting_xp)
                    writer.writeDouble(17, this.crafting_xp);
                if (this.has_enabled)
                    writer.writeBool(11, this.enabled);
                if (this.has_intro_shown)
                    writer.writeBool(12, this.intro_shown);
                if (this.has_infusing_enabled_DEPRECATED)
                    writer.writeBool(8, this.infusing_enabled_DEPRECATED);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Artifacts {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Artifacts();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.infusing = reader.readBool();
                            break;
                        case 2:
                            reader.readMessage(message.item_being_infused, () => message.item_being_infused = ArtifactInventoryItem.deserialize(reader));
                            break;
                        case 13:
                            reader.readMessage(message.spec_being_infused, () => message.spec_being_infused = ArtifactSpec.deserialize(reader));
                            break;
                        case 3:
                            message.egg_type_infusing = reader.readEnum();
                            break;
                        case 4:
                            message.infusing_eggs_required = reader.readDouble();
                            break;
                        case 5:
                            message.eggs_infused = reader.readDouble();
                            break;
                        case 6:
                            message.flow_percentage_artifacts = reader.readDouble();
                            break;
                        case 7:
                            message.fueling_enabled = reader.readBool();
                            break;
                        case 14:
                            message.tank_filling_enabled = reader.readBool();
                            break;
                        case 15:
                            message.tank_level = reader.readUint32();
                            break;
                        case 16:
                            pb_1.Message.addToRepeatedField(message, 16, reader.readDouble());
                            break;
                        case 18:
                            pb_1.Message.addToRepeatedField(message, 18, reader.readDouble());
                            break;
                        case 9:
                            message.last_fueled_ship = reader.readEnum();
                            break;
                        case 10:
                            message.inventory_score = reader.readDouble();
                            break;
                        case 17:
                            message.crafting_xp = reader.readDouble();
                            break;
                        case 11:
                            message.enabled = reader.readBool();
                            break;
                        case 12:
                            message.intro_shown = reader.readBool();
                            break;
                        case 8:
                            message.infusing_enabled_DEPRECATED = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Artifacts {
                return Artifacts.deserialize(bytes);
            }
        }
        export class Shells extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                intro_alert?: boolean;
                contracts_intro_alert?: boolean;
                num_new: number[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("intro_alert" in data && data.intro_alert != undefined) {
                        this.intro_alert = data.intro_alert;
                    }
                    if ("contracts_intro_alert" in data && data.contracts_intro_alert != undefined) {
                        this.contracts_intro_alert = data.contracts_intro_alert;
                    }
                    this.num_new = data.num_new;
                }
            }
            get intro_alert() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }
            set intro_alert(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_intro_alert() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get contracts_intro_alert() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set contracts_intro_alert(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_contracts_intro_alert() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get num_new() {
                return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
            }
            set num_new(value: number[]) {
                pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data: {
                intro_alert?: boolean;
                contracts_intro_alert?: boolean;
                num_new: number[];
            }): Shells {
                const message = new Shells({
                    num_new: data.num_new
                });
                if (data.intro_alert != null) {
                    message.intro_alert = data.intro_alert;
                }
                if (data.contracts_intro_alert != null) {
                    message.contracts_intro_alert = data.contracts_intro_alert;
                }
                return message;
            }
            toObject() {
                const data: {
                    intro_alert?: boolean;
                    contracts_intro_alert?: boolean;
                    num_new: number[];
                } = {
                    num_new: this.num_new
                };
                if (this.intro_alert != null) {
                    data.intro_alert = this.intro_alert;
                }
                if (this.contracts_intro_alert != null) {
                    data.contracts_intro_alert = this.contracts_intro_alert;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_intro_alert)
                    writer.writeBool(1, this.intro_alert);
                if (this.has_contracts_intro_alert)
                    writer.writeBool(2, this.contracts_intro_alert);
                if (this.num_new.length)
                    writer.writeRepeatedInt32(3, this.num_new);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Shells {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Shells();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.intro_alert = reader.readBool();
                            break;
                        case 2:
                            message.contracts_intro_alert = reader.readBool();
                            break;
                        case 3:
                            pb_1.Message.addToRepeatedField(message, 3, reader.readInt32());
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Shells {
                return Shells.deserialize(bytes);
            }
        }
        export class Simulation extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                egg_type?: Egg;
                farm_type?: FarmType;
                contract_id?: string;
                cash_earned?: number;
                cash_spent?: number;
                unclaimed_cash?: number;
                last_step_time?: number;
                num_chickens?: number;
                num_chickens_unsettled?: number;
                num_chickens_running?: number;
                eggs_laid?: number;
                eggs_shipped?: number;
                eggs_paid_for?: number;
                silos_owned?: number;
                habs: number[];
                hab_population: number[];
                hab_population_indound: number[];
                hab_incubator_popuplation: number[];
                hatchery_population?: number;
                vehicles: number[];
                train_length: number[];
                common_research: Backup.ResearchItem[];
                active_boosts: Backup.ActiveBoost[];
                last_cash_boost_time?: number;
                time_cheats_detected?: number;
                time_cheat_debt?: number;
                boost_tokens_received?: number;
                boost_tokens_spent?: number;
                boost_tokens_given?: number;
                unclaimed_boost_tokens?: number;
                gametime_until_next_boost_token?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [12, 13, 14, 15, 17, 21, 18, 22], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("egg_type" in data && data.egg_type != undefined) {
                        this.egg_type = data.egg_type;
                    }
                    if ("farm_type" in data && data.farm_type != undefined) {
                        this.farm_type = data.farm_type;
                    }
                    if ("contract_id" in data && data.contract_id != undefined) {
                        this.contract_id = data.contract_id;
                    }
                    if ("cash_earned" in data && data.cash_earned != undefined) {
                        this.cash_earned = data.cash_earned;
                    }
                    if ("cash_spent" in data && data.cash_spent != undefined) {
                        this.cash_spent = data.cash_spent;
                    }
                    if ("unclaimed_cash" in data && data.unclaimed_cash != undefined) {
                        this.unclaimed_cash = data.unclaimed_cash;
                    }
                    if ("last_step_time" in data && data.last_step_time != undefined) {
                        this.last_step_time = data.last_step_time;
                    }
                    if ("num_chickens" in data && data.num_chickens != undefined) {
                        this.num_chickens = data.num_chickens;
                    }
                    if ("num_chickens_unsettled" in data && data.num_chickens_unsettled != undefined) {
                        this.num_chickens_unsettled = data.num_chickens_unsettled;
                    }
                    if ("num_chickens_running" in data && data.num_chickens_running != undefined) {
                        this.num_chickens_running = data.num_chickens_running;
                    }
                    if ("eggs_laid" in data && data.eggs_laid != undefined) {
                        this.eggs_laid = data.eggs_laid;
                    }
                    if ("eggs_shipped" in data && data.eggs_shipped != undefined) {
                        this.eggs_shipped = data.eggs_shipped;
                    }
                    if ("eggs_paid_for" in data && data.eggs_paid_for != undefined) {
                        this.eggs_paid_for = data.eggs_paid_for;
                    }
                    if ("silos_owned" in data && data.silos_owned != undefined) {
                        this.silos_owned = data.silos_owned;
                    }
                    this.habs = data.habs;
                    this.hab_population = data.hab_population;
                    this.hab_population_indound = data.hab_population_indound;
                    this.hab_incubator_popuplation = data.hab_incubator_popuplation;
                    if ("hatchery_population" in data && data.hatchery_population != undefined) {
                        this.hatchery_population = data.hatchery_population;
                    }
                    this.vehicles = data.vehicles;
                    this.train_length = data.train_length;
                    this.common_research = data.common_research;
                    this.active_boosts = data.active_boosts;
                    if ("last_cash_boost_time" in data && data.last_cash_boost_time != undefined) {
                        this.last_cash_boost_time = data.last_cash_boost_time;
                    }
                    if ("time_cheats_detected" in data && data.time_cheats_detected != undefined) {
                        this.time_cheats_detected = data.time_cheats_detected;
                    }
                    if ("time_cheat_debt" in data && data.time_cheat_debt != undefined) {
                        this.time_cheat_debt = data.time_cheat_debt;
                    }
                    if ("boost_tokens_received" in data && data.boost_tokens_received != undefined) {
                        this.boost_tokens_received = data.boost_tokens_received;
                    }
                    if ("boost_tokens_spent" in data && data.boost_tokens_spent != undefined) {
                        this.boost_tokens_spent = data.boost_tokens_spent;
                    }
                    if ("boost_tokens_given" in data && data.boost_tokens_given != undefined) {
                        this.boost_tokens_given = data.boost_tokens_given;
                    }
                    if ("unclaimed_boost_tokens" in data && data.unclaimed_boost_tokens != undefined) {
                        this.unclaimed_boost_tokens = data.unclaimed_boost_tokens;
                    }
                    if ("gametime_until_next_boost_token" in data && data.gametime_until_next_boost_token != undefined) {
                        this.gametime_until_next_boost_token = data.gametime_until_next_boost_token;
                    }
                }
            }
            get egg_type() {
                return pb_1.Message.getFieldWithDefault(this, 1, Egg.EDIBLE) as Egg;
            }
            set egg_type(value: Egg) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_egg_type() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get farm_type() {
                return pb_1.Message.getFieldWithDefault(this, 19, FarmType.EMPTY) as FarmType;
            }
            set farm_type(value: FarmType) {
                pb_1.Message.setField(this, 19, value);
            }
            get has_farm_type() {
                return pb_1.Message.getField(this, 19) != null;
            }
            get contract_id() {
                return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
            }
            set contract_id(value: string) {
                pb_1.Message.setField(this, 20, value);
            }
            get has_contract_id() {
                return pb_1.Message.getField(this, 20) != null;
            }
            get cash_earned() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set cash_earned(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_cash_earned() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get cash_spent() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set cash_spent(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_cash_spent() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get unclaimed_cash() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set unclaimed_cash(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_unclaimed_cash() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get last_step_time() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set last_step_time(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_last_step_time() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get num_chickens() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set num_chickens(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_num_chickens() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get num_chickens_unsettled() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set num_chickens_unsettled(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get has_num_chickens_unsettled() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get num_chickens_running() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set num_chickens_running(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get has_num_chickens_running() {
                return pb_1.Message.getField(this, 8) != null;
            }
            get eggs_laid() {
                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
            }
            set eggs_laid(value: number) {
                pb_1.Message.setField(this, 9, value);
            }
            get has_eggs_laid() {
                return pb_1.Message.getField(this, 9) != null;
            }
            get eggs_shipped() {
                return pb_1.Message.getFieldWithDefault(this, 30, 0) as number;
            }
            set eggs_shipped(value: number) {
                pb_1.Message.setField(this, 30, value);
            }
            get has_eggs_shipped() {
                return pb_1.Message.getField(this, 30) != null;
            }
            get eggs_paid_for() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }
            set eggs_paid_for(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get has_eggs_paid_for() {
                return pb_1.Message.getField(this, 10) != null;
            }
            get silos_owned() {
                return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
            }
            set silos_owned(value: number) {
                pb_1.Message.setField(this, 11, value);
            }
            get has_silos_owned() {
                return pb_1.Message.getField(this, 11) != null;
            }
            get habs() {
                return pb_1.Message.getFieldWithDefault(this, 12, []) as number[];
            }
            set habs(value: number[]) {
                pb_1.Message.setField(this, 12, value);
            }
            get hab_population() {
                return pb_1.Message.getFieldWithDefault(this, 13, []) as number[];
            }
            set hab_population(value: number[]) {
                pb_1.Message.setField(this, 13, value);
            }
            get hab_population_indound() {
                return pb_1.Message.getFieldWithDefault(this, 14, []) as number[];
            }
            set hab_population_indound(value: number[]) {
                pb_1.Message.setField(this, 14, value);
            }
            get hab_incubator_popuplation() {
                return pb_1.Message.getFieldWithDefault(this, 15, []) as number[];
            }
            set hab_incubator_popuplation(value: number[]) {
                pb_1.Message.setField(this, 15, value);
            }
            get hatchery_population() {
                return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
            }
            set hatchery_population(value: number) {
                pb_1.Message.setField(this, 16, value);
            }
            get has_hatchery_population() {
                return pb_1.Message.getField(this, 16) != null;
            }
            get vehicles() {
                return pb_1.Message.getFieldWithDefault(this, 17, []) as number[];
            }
            set vehicles(value: number[]) {
                pb_1.Message.setField(this, 17, value);
            }
            get train_length() {
                return pb_1.Message.getFieldWithDefault(this, 21, []) as number[];
            }
            set train_length(value: number[]) {
                pb_1.Message.setField(this, 21, value);
            }
            get common_research() {
                return pb_1.Message.getRepeatedWrapperField(this, Backup.ResearchItem, 18) as Backup.ResearchItem[];
            }
            set common_research(value: Backup.ResearchItem[]) {
                pb_1.Message.setRepeatedWrapperField(this, 18, value);
            }
            get active_boosts() {
                return pb_1.Message.getRepeatedWrapperField(this, Backup.ActiveBoost, 22) as Backup.ActiveBoost[];
            }
            set active_boosts(value: Backup.ActiveBoost[]) {
                pb_1.Message.setRepeatedWrapperField(this, 22, value);
            }
            get last_cash_boost_time() {
                return pb_1.Message.getFieldWithDefault(this, 31, 0) as number;
            }
            set last_cash_boost_time(value: number) {
                pb_1.Message.setField(this, 31, value);
            }
            get has_last_cash_boost_time() {
                return pb_1.Message.getField(this, 31) != null;
            }
            get time_cheats_detected() {
                return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
            }
            set time_cheats_detected(value: number) {
                pb_1.Message.setField(this, 23, value);
            }
            get has_time_cheats_detected() {
                return pb_1.Message.getField(this, 23) != null;
            }
            get time_cheat_debt() {
                return pb_1.Message.getFieldWithDefault(this, 24, 0) as number;
            }
            set time_cheat_debt(value: number) {
                pb_1.Message.setField(this, 24, value);
            }
            get has_time_cheat_debt() {
                return pb_1.Message.getField(this, 24) != null;
            }
            get boost_tokens_received() {
                return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
            }
            set boost_tokens_received(value: number) {
                pb_1.Message.setField(this, 25, value);
            }
            get has_boost_tokens_received() {
                return pb_1.Message.getField(this, 25) != null;
            }
            get boost_tokens_spent() {
                return pb_1.Message.getFieldWithDefault(this, 26, 0) as number;
            }
            set boost_tokens_spent(value: number) {
                pb_1.Message.setField(this, 26, value);
            }
            get has_boost_tokens_spent() {
                return pb_1.Message.getField(this, 26) != null;
            }
            get boost_tokens_given() {
                return pb_1.Message.getFieldWithDefault(this, 28, 0) as number;
            }
            set boost_tokens_given(value: number) {
                pb_1.Message.setField(this, 28, value);
            }
            get has_boost_tokens_given() {
                return pb_1.Message.getField(this, 28) != null;
            }
            get unclaimed_boost_tokens() {
                return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
            }
            set unclaimed_boost_tokens(value: number) {
                pb_1.Message.setField(this, 27, value);
            }
            get has_unclaimed_boost_tokens() {
                return pb_1.Message.getField(this, 27) != null;
            }
            get gametime_until_next_boost_token() {
                return pb_1.Message.getFieldWithDefault(this, 29, 0) as number;
            }
            set gametime_until_next_boost_token(value: number) {
                pb_1.Message.setField(this, 29, value);
            }
            get has_gametime_until_next_boost_token() {
                return pb_1.Message.getField(this, 29) != null;
            }
            static fromObject(data: {
                egg_type?: Egg;
                farm_type?: FarmType;
                contract_id?: string;
                cash_earned?: number;
                cash_spent?: number;
                unclaimed_cash?: number;
                last_step_time?: number;
                num_chickens?: number;
                num_chickens_unsettled?: number;
                num_chickens_running?: number;
                eggs_laid?: number;
                eggs_shipped?: number;
                eggs_paid_for?: number;
                silos_owned?: number;
                habs: number[];
                hab_population: number[];
                hab_population_indound: number[];
                hab_incubator_popuplation: number[];
                hatchery_population?: number;
                vehicles: number[];
                train_length: number[];
                common_research?: ReturnType<typeof Backup.ResearchItem.prototype.toObject>[];
                active_boosts?: ReturnType<typeof Backup.ActiveBoost.prototype.toObject>[];
                last_cash_boost_time?: number;
                time_cheats_detected?: number;
                time_cheat_debt?: number;
                boost_tokens_received?: number;
                boost_tokens_spent?: number;
                boost_tokens_given?: number;
                unclaimed_boost_tokens?: number;
                gametime_until_next_boost_token?: number;
            }): Simulation {
                const message = new Simulation({
                    habs: data.habs,
                    hab_population: data.hab_population,
                    hab_population_indound: data.hab_population_indound,
                    hab_incubator_popuplation: data.hab_incubator_popuplation,
                    vehicles: data.vehicles,
                    train_length: data.train_length,
                    common_research: data.common_research.map(item => Backup.ResearchItem.fromObject(item)),
                    active_boosts: data.active_boosts.map(item => Backup.ActiveBoost.fromObject(item))
                });
                if (data.egg_type != null) {
                    message.egg_type = data.egg_type;
                }
                if (data.farm_type != null) {
                    message.farm_type = data.farm_type;
                }
                if (data.contract_id != null) {
                    message.contract_id = data.contract_id;
                }
                if (data.cash_earned != null) {
                    message.cash_earned = data.cash_earned;
                }
                if (data.cash_spent != null) {
                    message.cash_spent = data.cash_spent;
                }
                if (data.unclaimed_cash != null) {
                    message.unclaimed_cash = data.unclaimed_cash;
                }
                if (data.last_step_time != null) {
                    message.last_step_time = data.last_step_time;
                }
                if (data.num_chickens != null) {
                    message.num_chickens = data.num_chickens;
                }
                if (data.num_chickens_unsettled != null) {
                    message.num_chickens_unsettled = data.num_chickens_unsettled;
                }
                if (data.num_chickens_running != null) {
                    message.num_chickens_running = data.num_chickens_running;
                }
                if (data.eggs_laid != null) {
                    message.eggs_laid = data.eggs_laid;
                }
                if (data.eggs_shipped != null) {
                    message.eggs_shipped = data.eggs_shipped;
                }
                if (data.eggs_paid_for != null) {
                    message.eggs_paid_for = data.eggs_paid_for;
                }
                if (data.silos_owned != null) {
                    message.silos_owned = data.silos_owned;
                }
                if (data.hatchery_population != null) {
                    message.hatchery_population = data.hatchery_population;
                }
                if (data.last_cash_boost_time != null) {
                    message.last_cash_boost_time = data.last_cash_boost_time;
                }
                if (data.time_cheats_detected != null) {
                    message.time_cheats_detected = data.time_cheats_detected;
                }
                if (data.time_cheat_debt != null) {
                    message.time_cheat_debt = data.time_cheat_debt;
                }
                if (data.boost_tokens_received != null) {
                    message.boost_tokens_received = data.boost_tokens_received;
                }
                if (data.boost_tokens_spent != null) {
                    message.boost_tokens_spent = data.boost_tokens_spent;
                }
                if (data.boost_tokens_given != null) {
                    message.boost_tokens_given = data.boost_tokens_given;
                }
                if (data.unclaimed_boost_tokens != null) {
                    message.unclaimed_boost_tokens = data.unclaimed_boost_tokens;
                }
                if (data.gametime_until_next_boost_token != null) {
                    message.gametime_until_next_boost_token = data.gametime_until_next_boost_token;
                }
                return message;
            }
            toObject() {
                const data: {
                    egg_type?: Egg;
                    farm_type?: FarmType;
                    contract_id?: string;
                    cash_earned?: number;
                    cash_spent?: number;
                    unclaimed_cash?: number;
                    last_step_time?: number;
                    num_chickens?: number;
                    num_chickens_unsettled?: number;
                    num_chickens_running?: number;
                    eggs_laid?: number;
                    eggs_shipped?: number;
                    eggs_paid_for?: number;
                    silos_owned?: number;
                    habs: number[];
                    hab_population: number[];
                    hab_population_indound: number[];
                    hab_incubator_popuplation: number[];
                    hatchery_population?: number;
                    vehicles: number[];
                    train_length: number[];
                    common_research?: ReturnType<typeof Backup.ResearchItem.prototype.toObject>[];
                    active_boosts?: ReturnType<typeof Backup.ActiveBoost.prototype.toObject>[];
                    last_cash_boost_time?: number;
                    time_cheats_detected?: number;
                    time_cheat_debt?: number;
                    boost_tokens_received?: number;
                    boost_tokens_spent?: number;
                    boost_tokens_given?: number;
                    unclaimed_boost_tokens?: number;
                    gametime_until_next_boost_token?: number;
                } = {
                    habs: this.habs,
                    hab_population: this.hab_population,
                    hab_population_indound: this.hab_population_indound,
                    hab_incubator_popuplation: this.hab_incubator_popuplation,
                    vehicles: this.vehicles,
                    train_length: this.train_length
                };
                if (this.egg_type != null) {
                    data.egg_type = this.egg_type;
                }
                if (this.farm_type != null) {
                    data.farm_type = this.farm_type;
                }
                if (this.contract_id != null) {
                    data.contract_id = this.contract_id;
                }
                if (this.cash_earned != null) {
                    data.cash_earned = this.cash_earned;
                }
                if (this.cash_spent != null) {
                    data.cash_spent = this.cash_spent;
                }
                if (this.unclaimed_cash != null) {
                    data.unclaimed_cash = this.unclaimed_cash;
                }
                if (this.last_step_time != null) {
                    data.last_step_time = this.last_step_time;
                }
                if (this.num_chickens != null) {
                    data.num_chickens = this.num_chickens;
                }
                if (this.num_chickens_unsettled != null) {
                    data.num_chickens_unsettled = this.num_chickens_unsettled;
                }
                if (this.num_chickens_running != null) {
                    data.num_chickens_running = this.num_chickens_running;
                }
                if (this.eggs_laid != null) {
                    data.eggs_laid = this.eggs_laid;
                }
                if (this.eggs_shipped != null) {
                    data.eggs_shipped = this.eggs_shipped;
                }
                if (this.eggs_paid_for != null) {
                    data.eggs_paid_for = this.eggs_paid_for;
                }
                if (this.silos_owned != null) {
                    data.silos_owned = this.silos_owned;
                }
                if (this.hatchery_population != null) {
                    data.hatchery_population = this.hatchery_population;
                }
                if (this.common_research != null) {
                    data.common_research = this.common_research.map((item: Backup.ResearchItem) => item.toObject());
                }
                if (this.active_boosts != null) {
                    data.active_boosts = this.active_boosts.map((item: Backup.ActiveBoost) => item.toObject());
                }
                if (this.last_cash_boost_time != null) {
                    data.last_cash_boost_time = this.last_cash_boost_time;
                }
                if (this.time_cheats_detected != null) {
                    data.time_cheats_detected = this.time_cheats_detected;
                }
                if (this.time_cheat_debt != null) {
                    data.time_cheat_debt = this.time_cheat_debt;
                }
                if (this.boost_tokens_received != null) {
                    data.boost_tokens_received = this.boost_tokens_received;
                }
                if (this.boost_tokens_spent != null) {
                    data.boost_tokens_spent = this.boost_tokens_spent;
                }
                if (this.boost_tokens_given != null) {
                    data.boost_tokens_given = this.boost_tokens_given;
                }
                if (this.unclaimed_boost_tokens != null) {
                    data.unclaimed_boost_tokens = this.unclaimed_boost_tokens;
                }
                if (this.gametime_until_next_boost_token != null) {
                    data.gametime_until_next_boost_token = this.gametime_until_next_boost_token;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_egg_type)
                    writer.writeEnum(1, this.egg_type);
                if (this.has_farm_type)
                    writer.writeEnum(19, this.farm_type);
                if (this.has_contract_id && this.contract_id.length)
                    writer.writeString(20, this.contract_id);
                if (this.has_cash_earned)
                    writer.writeDouble(2, this.cash_earned);
                if (this.has_cash_spent)
                    writer.writeDouble(3, this.cash_spent);
                if (this.has_unclaimed_cash)
                    writer.writeDouble(4, this.unclaimed_cash);
                if (this.has_last_step_time)
                    writer.writeDouble(5, this.last_step_time);
                if (this.has_num_chickens)
                    writer.writeUint64(6, this.num_chickens);
                if (this.has_num_chickens_unsettled)
                    writer.writeUint64(7, this.num_chickens_unsettled);
                if (this.has_num_chickens_running)
                    writer.writeUint64(8, this.num_chickens_running);
                if (this.has_eggs_laid)
                    writer.writeDouble(9, this.eggs_laid);
                if (this.has_eggs_shipped)
                    writer.writeDouble(30, this.eggs_shipped);
                if (this.has_eggs_paid_for)
                    writer.writeDouble(10, this.eggs_paid_for);
                if (this.has_silos_owned)
                    writer.writeUint32(11, this.silos_owned);
                if (this.habs.length)
                    writer.writeRepeatedUint32(12, this.habs);
                if (this.hab_population.length)
                    writer.writeRepeatedUint64(13, this.hab_population);
                if (this.hab_population_indound.length)
                    writer.writeRepeatedUint64(14, this.hab_population_indound);
                if (this.hab_incubator_popuplation.length)
                    writer.writeRepeatedDouble(15, this.hab_incubator_popuplation);
                if (this.has_hatchery_population)
                    writer.writeDouble(16, this.hatchery_population);
                if (this.vehicles.length)
                    writer.writeRepeatedUint32(17, this.vehicles);
                if (this.train_length.length)
                    writer.writeRepeatedUint32(21, this.train_length);
                if (this.common_research.length)
                    writer.writeRepeatedMessage(18, this.common_research, (item: Backup.ResearchItem) => item.serialize(writer));
                if (this.active_boosts.length)
                    writer.writeRepeatedMessage(22, this.active_boosts, (item: Backup.ActiveBoost) => item.serialize(writer));
                if (this.has_last_cash_boost_time)
                    writer.writeDouble(31, this.last_cash_boost_time);
                if (this.has_time_cheats_detected)
                    writer.writeUint32(23, this.time_cheats_detected);
                if (this.has_time_cheat_debt)
                    writer.writeDouble(24, this.time_cheat_debt);
                if (this.has_boost_tokens_received)
                    writer.writeUint32(25, this.boost_tokens_received);
                if (this.has_boost_tokens_spent)
                    writer.writeUint32(26, this.boost_tokens_spent);
                if (this.has_boost_tokens_given)
                    writer.writeUint32(28, this.boost_tokens_given);
                if (this.has_unclaimed_boost_tokens)
                    writer.writeUint32(27, this.unclaimed_boost_tokens);
                if (this.has_gametime_until_next_boost_token)
                    writer.writeDouble(29, this.gametime_until_next_boost_token);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Simulation {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Simulation();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.egg_type = reader.readEnum();
                            break;
                        case 19:
                            message.farm_type = reader.readEnum();
                            break;
                        case 20:
                            message.contract_id = reader.readString();
                            break;
                        case 2:
                            message.cash_earned = reader.readDouble();
                            break;
                        case 3:
                            message.cash_spent = reader.readDouble();
                            break;
                        case 4:
                            message.unclaimed_cash = reader.readDouble();
                            break;
                        case 5:
                            message.last_step_time = reader.readDouble();
                            break;
                        case 6:
                            message.num_chickens = reader.readUint64();
                            break;
                        case 7:
                            message.num_chickens_unsettled = reader.readUint64();
                            break;
                        case 8:
                            message.num_chickens_running = reader.readUint64();
                            break;
                        case 9:
                            message.eggs_laid = reader.readDouble();
                            break;
                        case 30:
                            message.eggs_shipped = reader.readDouble();
                            break;
                        case 10:
                            message.eggs_paid_for = reader.readDouble();
                            break;
                        case 11:
                            message.silos_owned = reader.readUint32();
                            break;
                        case 12:
                            pb_1.Message.addToRepeatedField(message, 12, reader.readUint32());
                            break;
                        case 13:
                            pb_1.Message.addToRepeatedField(message, 13, reader.readUint64());
                            break;
                        case 14:
                            pb_1.Message.addToRepeatedField(message, 14, reader.readUint64());
                            break;
                        case 15:
                            pb_1.Message.addToRepeatedField(message, 15, reader.readDouble());
                            break;
                        case 16:
                            message.hatchery_population = reader.readDouble();
                            break;
                        case 17:
                            pb_1.Message.addToRepeatedField(message, 17, reader.readUint32());
                            break;
                        case 21:
                            pb_1.Message.addToRepeatedField(message, 21, reader.readUint32());
                            break;
                        case 18:
                            reader.readMessage(message.common_research, () => pb_1.Message.addToRepeatedWrapperField(message, 18, Backup.ResearchItem.deserialize(reader), Backup.ResearchItem));
                            break;
                        case 22:
                            reader.readMessage(message.active_boosts, () => pb_1.Message.addToRepeatedWrapperField(message, 22, Backup.ActiveBoost.deserialize(reader), Backup.ActiveBoost));
                            break;
                        case 31:
                            message.last_cash_boost_time = reader.readDouble();
                            break;
                        case 23:
                            message.time_cheats_detected = reader.readUint32();
                            break;
                        case 24:
                            message.time_cheat_debt = reader.readDouble();
                            break;
                        case 25:
                            message.boost_tokens_received = reader.readUint32();
                            break;
                        case 26:
                            message.boost_tokens_spent = reader.readUint32();
                            break;
                        case 28:
                            message.boost_tokens_given = reader.readUint32();
                            break;
                        case 27:
                            message.unclaimed_boost_tokens = reader.readUint32();
                            break;
                        case 29:
                            message.gametime_until_next_boost_token = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Simulation {
                return Simulation.deserialize(bytes);
            }
        }
        export class Mission extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                current_mission?: string;
                reference_value?: number;
                current_missions: string[];
                missions: Backup.MissionInfo[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("current_mission" in data && data.current_mission != undefined) {
                        this.current_mission = data.current_mission;
                    }
                    if ("reference_value" in data && data.reference_value != undefined) {
                        this.reference_value = data.reference_value;
                    }
                    this.current_missions = data.current_missions;
                    this.missions = data.missions;
                }
            }
            get current_mission() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set current_mission(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_current_mission() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get reference_value() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set reference_value(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_reference_value() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get current_missions() {
                return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
            }
            set current_missions(value: string[]) {
                pb_1.Message.setField(this, 4, value);
            }
            get missions() {
                return pb_1.Message.getRepeatedWrapperField(this, Backup.MissionInfo, 3) as Backup.MissionInfo[];
            }
            set missions(value: Backup.MissionInfo[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data: {
                current_mission?: string;
                reference_value?: number;
                current_missions: string[];
                missions?: ReturnType<typeof Backup.MissionInfo.prototype.toObject>[];
            }): Mission {
                const message = new Mission({
                    current_missions: data.current_missions,
                    missions: data.missions.map(item => Backup.MissionInfo.fromObject(item))
                });
                if (data.current_mission != null) {
                    message.current_mission = data.current_mission;
                }
                if (data.reference_value != null) {
                    message.reference_value = data.reference_value;
                }
                return message;
            }
            toObject() {
                const data: {
                    current_mission?: string;
                    reference_value?: number;
                    current_missions: string[];
                    missions?: ReturnType<typeof Backup.MissionInfo.prototype.toObject>[];
                } = {
                    current_missions: this.current_missions
                };
                if (this.current_mission != null) {
                    data.current_mission = this.current_mission;
                }
                if (this.reference_value != null) {
                    data.reference_value = this.reference_value;
                }
                if (this.missions != null) {
                    data.missions = this.missions.map((item: Backup.MissionInfo) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_current_mission && this.current_mission.length)
                    writer.writeString(1, this.current_mission);
                if (this.has_reference_value)
                    writer.writeDouble(2, this.reference_value);
                if (this.current_missions.length)
                    writer.writeRepeatedString(4, this.current_missions);
                if (this.missions.length)
                    writer.writeRepeatedMessage(3, this.missions, (item: Backup.MissionInfo) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Mission {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Mission();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.current_mission = reader.readString();
                            break;
                        case 2:
                            message.reference_value = reader.readDouble();
                            break;
                        case 4:
                            pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                            break;
                        case 3:
                            reader.readMessage(message.missions, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Backup.MissionInfo.deserialize(reader), Backup.MissionInfo));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Mission {
                return Mission.deserialize(bytes);
            }
        }
        export class Misc extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                chicken_btn_pref_big?: boolean;
                free_hatchery_refill_given?: boolean;
                last_share_farm_value?: number;
                last_share_swarm_farm_value?: number;
                last_share_swarm_size?: number;
                last_prestige_alert_soul_eggs_DEPRECATED?: number;
                friend_rank?: number;
                friend_rank_pop?: number;
                global_rank?: number;
                global_rank_pop?: number;
                challenges_alert?: boolean;
                trophy_alert?: boolean;
                ar_alert?: boolean;
                contracts_alert?: boolean;
                contracts_alert_v2?: boolean;
                coop_alert?: boolean;
                coop_alert_v2?: boolean;
                switch_alert?: boolean;
                egg_of_prophecy_alert?: boolean;
                boost_token_alert?: boolean;
                soul_egg_alert?: boolean;
                backup_reminder_alert?: boolean;
                max_button_alert?: boolean;
                mission_target_alert?: boolean;
                colleggtibles_alert?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("chicken_btn_pref_big" in data && data.chicken_btn_pref_big != undefined) {
                        this.chicken_btn_pref_big = data.chicken_btn_pref_big;
                    }
                    if ("free_hatchery_refill_given" in data && data.free_hatchery_refill_given != undefined) {
                        this.free_hatchery_refill_given = data.free_hatchery_refill_given;
                    }
                    if ("last_share_farm_value" in data && data.last_share_farm_value != undefined) {
                        this.last_share_farm_value = data.last_share_farm_value;
                    }
                    if ("last_share_swarm_farm_value" in data && data.last_share_swarm_farm_value != undefined) {
                        this.last_share_swarm_farm_value = data.last_share_swarm_farm_value;
                    }
                    if ("last_share_swarm_size" in data && data.last_share_swarm_size != undefined) {
                        this.last_share_swarm_size = data.last_share_swarm_size;
                    }
                    if ("last_prestige_alert_soul_eggs_DEPRECATED" in data && data.last_prestige_alert_soul_eggs_DEPRECATED != undefined) {
                        this.last_prestige_alert_soul_eggs_DEPRECATED = data.last_prestige_alert_soul_eggs_DEPRECATED;
                    }
                    if ("friend_rank" in data && data.friend_rank != undefined) {
                        this.friend_rank = data.friend_rank;
                    }
                    if ("friend_rank_pop" in data && data.friend_rank_pop != undefined) {
                        this.friend_rank_pop = data.friend_rank_pop;
                    }
                    if ("global_rank" in data && data.global_rank != undefined) {
                        this.global_rank = data.global_rank;
                    }
                    if ("global_rank_pop" in data && data.global_rank_pop != undefined) {
                        this.global_rank_pop = data.global_rank_pop;
                    }
                    if ("challenges_alert" in data && data.challenges_alert != undefined) {
                        this.challenges_alert = data.challenges_alert;
                    }
                    if ("trophy_alert" in data && data.trophy_alert != undefined) {
                        this.trophy_alert = data.trophy_alert;
                    }
                    if ("ar_alert" in data && data.ar_alert != undefined) {
                        this.ar_alert = data.ar_alert;
                    }
                    if ("contracts_alert" in data && data.contracts_alert != undefined) {
                        this.contracts_alert = data.contracts_alert;
                    }
                    if ("contracts_alert_v2" in data && data.contracts_alert_v2 != undefined) {
                        this.contracts_alert_v2 = data.contracts_alert_v2;
                    }
                    if ("coop_alert" in data && data.coop_alert != undefined) {
                        this.coop_alert = data.coop_alert;
                    }
                    if ("coop_alert_v2" in data && data.coop_alert_v2 != undefined) {
                        this.coop_alert_v2 = data.coop_alert_v2;
                    }
                    if ("switch_alert" in data && data.switch_alert != undefined) {
                        this.switch_alert = data.switch_alert;
                    }
                    if ("egg_of_prophecy_alert" in data && data.egg_of_prophecy_alert != undefined) {
                        this.egg_of_prophecy_alert = data.egg_of_prophecy_alert;
                    }
                    if ("boost_token_alert" in data && data.boost_token_alert != undefined) {
                        this.boost_token_alert = data.boost_token_alert;
                    }
                    if ("soul_egg_alert" in data && data.soul_egg_alert != undefined) {
                        this.soul_egg_alert = data.soul_egg_alert;
                    }
                    if ("backup_reminder_alert" in data && data.backup_reminder_alert != undefined) {
                        this.backup_reminder_alert = data.backup_reminder_alert;
                    }
                    if ("max_button_alert" in data && data.max_button_alert != undefined) {
                        this.max_button_alert = data.max_button_alert;
                    }
                    if ("mission_target_alert" in data && data.mission_target_alert != undefined) {
                        this.mission_target_alert = data.mission_target_alert;
                    }
                    if ("colleggtibles_alert" in data && data.colleggtibles_alert != undefined) {
                        this.colleggtibles_alert = data.colleggtibles_alert;
                    }
                }
            }
            get chicken_btn_pref_big() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }
            set chicken_btn_pref_big(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_chicken_btn_pref_big() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get free_hatchery_refill_given() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set free_hatchery_refill_given(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_free_hatchery_refill_given() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get last_share_farm_value() {
                return pb_1.Message.getFieldWithDefault(this, 3, 10000000) as number;
            }
            set last_share_farm_value(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_last_share_farm_value() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get last_share_swarm_farm_value() {
                return pb_1.Message.getFieldWithDefault(this, 4, 10000000) as number;
            }
            set last_share_swarm_farm_value(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_last_share_swarm_farm_value() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get last_share_swarm_size() {
                return pb_1.Message.getFieldWithDefault(this, 5, 140) as number;
            }
            set last_share_swarm_size(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_last_share_swarm_size() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get last_prestige_alert_soul_eggs_DEPRECATED() {
                return pb_1.Message.getFieldWithDefault(this, 10, 45) as number;
            }
            set last_prestige_alert_soul_eggs_DEPRECATED(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get has_last_prestige_alert_soul_eggs_DEPRECATED() {
                return pb_1.Message.getField(this, 10) != null;
            }
            get friend_rank() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set friend_rank(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_friend_rank() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get friend_rank_pop() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set friend_rank_pop(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get has_friend_rank_pop() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get global_rank() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set global_rank(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get has_global_rank() {
                return pb_1.Message.getField(this, 8) != null;
            }
            get global_rank_pop() {
                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
            }
            set global_rank_pop(value: number) {
                pb_1.Message.setField(this, 9, value);
            }
            get has_global_rank_pop() {
                return pb_1.Message.getField(this, 9) != null;
            }
            get challenges_alert() {
                return pb_1.Message.getFieldWithDefault(this, 20, false) as boolean;
            }
            set challenges_alert(value: boolean) {
                pb_1.Message.setField(this, 20, value);
            }
            get has_challenges_alert() {
                return pb_1.Message.getField(this, 20) != null;
            }
            get trophy_alert() {
                return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
            }
            set trophy_alert(value: boolean) {
                pb_1.Message.setField(this, 11, value);
            }
            get has_trophy_alert() {
                return pb_1.Message.getField(this, 11) != null;
            }
            get ar_alert() {
                return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
            }
            set ar_alert(value: boolean) {
                pb_1.Message.setField(this, 12, value);
            }
            get has_ar_alert() {
                return pb_1.Message.getField(this, 12) != null;
            }
            get contracts_alert() {
                return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
            }
            set contracts_alert(value: boolean) {
                pb_1.Message.setField(this, 13, value);
            }
            get has_contracts_alert() {
                return pb_1.Message.getField(this, 13) != null;
            }
            get contracts_alert_v2() {
                return pb_1.Message.getFieldWithDefault(this, 21, false) as boolean;
            }
            set contracts_alert_v2(value: boolean) {
                pb_1.Message.setField(this, 21, value);
            }
            get has_contracts_alert_v2() {
                return pb_1.Message.getField(this, 21) != null;
            }
            get coop_alert() {
                return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
            }
            set coop_alert(value: boolean) {
                pb_1.Message.setField(this, 14, value);
            }
            get has_coop_alert() {
                return pb_1.Message.getField(this, 14) != null;
            }
            get coop_alert_v2() {
                return pb_1.Message.getFieldWithDefault(this, 22, false) as boolean;
            }
            set coop_alert_v2(value: boolean) {
                pb_1.Message.setField(this, 22, value);
            }
            get has_coop_alert_v2() {
                return pb_1.Message.getField(this, 22) != null;
            }
            get switch_alert() {
                return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
            }
            set switch_alert(value: boolean) {
                pb_1.Message.setField(this, 15, value);
            }
            get has_switch_alert() {
                return pb_1.Message.getField(this, 15) != null;
            }
            get egg_of_prophecy_alert() {
                return pb_1.Message.getFieldWithDefault(this, 16, false) as boolean;
            }
            set egg_of_prophecy_alert(value: boolean) {
                pb_1.Message.setField(this, 16, value);
            }
            get has_egg_of_prophecy_alert() {
                return pb_1.Message.getField(this, 16) != null;
            }
            get boost_token_alert() {
                return pb_1.Message.getFieldWithDefault(this, 17, false) as boolean;
            }
            set boost_token_alert(value: boolean) {
                pb_1.Message.setField(this, 17, value);
            }
            get has_boost_token_alert() {
                return pb_1.Message.getField(this, 17) != null;
            }
            get soul_egg_alert() {
                return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
            }
            set soul_egg_alert(value: boolean) {
                pb_1.Message.setField(this, 18, value);
            }
            get has_soul_egg_alert() {
                return pb_1.Message.getField(this, 18) != null;
            }
            get backup_reminder_alert() {
                return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
            }
            set backup_reminder_alert(value: boolean) {
                pb_1.Message.setField(this, 19, value);
            }
            get has_backup_reminder_alert() {
                return pb_1.Message.getField(this, 19) != null;
            }
            get max_button_alert() {
                return pb_1.Message.getFieldWithDefault(this, 23, false) as boolean;
            }
            set max_button_alert(value: boolean) {
                pb_1.Message.setField(this, 23, value);
            }
            get has_max_button_alert() {
                return pb_1.Message.getField(this, 23) != null;
            }
            get mission_target_alert() {
                return pb_1.Message.getFieldWithDefault(this, 24, false) as boolean;
            }
            set mission_target_alert(value: boolean) {
                pb_1.Message.setField(this, 24, value);
            }
            get has_mission_target_alert() {
                return pb_1.Message.getField(this, 24) != null;
            }
            get colleggtibles_alert() {
                return pb_1.Message.getFieldWithDefault(this, 25, false) as boolean;
            }
            set colleggtibles_alert(value: boolean) {
                pb_1.Message.setField(this, 25, value);
            }
            get has_colleggtibles_alert() {
                return pb_1.Message.getField(this, 25) != null;
            }
            static fromObject(data: {
                chicken_btn_pref_big?: boolean;
                free_hatchery_refill_given?: boolean;
                last_share_farm_value?: number;
                last_share_swarm_farm_value?: number;
                last_share_swarm_size?: number;
                last_prestige_alert_soul_eggs_DEPRECATED?: number;
                friend_rank?: number;
                friend_rank_pop?: number;
                global_rank?: number;
                global_rank_pop?: number;
                challenges_alert?: boolean;
                trophy_alert?: boolean;
                ar_alert?: boolean;
                contracts_alert?: boolean;
                contracts_alert_v2?: boolean;
                coop_alert?: boolean;
                coop_alert_v2?: boolean;
                switch_alert?: boolean;
                egg_of_prophecy_alert?: boolean;
                boost_token_alert?: boolean;
                soul_egg_alert?: boolean;
                backup_reminder_alert?: boolean;
                max_button_alert?: boolean;
                mission_target_alert?: boolean;
                colleggtibles_alert?: boolean;
            }): Misc {
                const message = new Misc({});
                if (data.chicken_btn_pref_big != null) {
                    message.chicken_btn_pref_big = data.chicken_btn_pref_big;
                }
                if (data.free_hatchery_refill_given != null) {
                    message.free_hatchery_refill_given = data.free_hatchery_refill_given;
                }
                if (data.last_share_farm_value != null) {
                    message.last_share_farm_value = data.last_share_farm_value;
                }
                if (data.last_share_swarm_farm_value != null) {
                    message.last_share_swarm_farm_value = data.last_share_swarm_farm_value;
                }
                if (data.last_share_swarm_size != null) {
                    message.last_share_swarm_size = data.last_share_swarm_size;
                }
                if (data.last_prestige_alert_soul_eggs_DEPRECATED != null) {
                    message.last_prestige_alert_soul_eggs_DEPRECATED = data.last_prestige_alert_soul_eggs_DEPRECATED;
                }
                if (data.friend_rank != null) {
                    message.friend_rank = data.friend_rank;
                }
                if (data.friend_rank_pop != null) {
                    message.friend_rank_pop = data.friend_rank_pop;
                }
                if (data.global_rank != null) {
                    message.global_rank = data.global_rank;
                }
                if (data.global_rank_pop != null) {
                    message.global_rank_pop = data.global_rank_pop;
                }
                if (data.challenges_alert != null) {
                    message.challenges_alert = data.challenges_alert;
                }
                if (data.trophy_alert != null) {
                    message.trophy_alert = data.trophy_alert;
                }
                if (data.ar_alert != null) {
                    message.ar_alert = data.ar_alert;
                }
                if (data.contracts_alert != null) {
                    message.contracts_alert = data.contracts_alert;
                }
                if (data.contracts_alert_v2 != null) {
                    message.contracts_alert_v2 = data.contracts_alert_v2;
                }
                if (data.coop_alert != null) {
                    message.coop_alert = data.coop_alert;
                }
                if (data.coop_alert_v2 != null) {
                    message.coop_alert_v2 = data.coop_alert_v2;
                }
                if (data.switch_alert != null) {
                    message.switch_alert = data.switch_alert;
                }
                if (data.egg_of_prophecy_alert != null) {
                    message.egg_of_prophecy_alert = data.egg_of_prophecy_alert;
                }
                if (data.boost_token_alert != null) {
                    message.boost_token_alert = data.boost_token_alert;
                }
                if (data.soul_egg_alert != null) {
                    message.soul_egg_alert = data.soul_egg_alert;
                }
                if (data.backup_reminder_alert != null) {
                    message.backup_reminder_alert = data.backup_reminder_alert;
                }
                if (data.max_button_alert != null) {
                    message.max_button_alert = data.max_button_alert;
                }
                if (data.mission_target_alert != null) {
                    message.mission_target_alert = data.mission_target_alert;
                }
                if (data.colleggtibles_alert != null) {
                    message.colleggtibles_alert = data.colleggtibles_alert;
                }
                return message;
            }
            toObject() {
                const data: {
                    chicken_btn_pref_big?: boolean;
                    free_hatchery_refill_given?: boolean;
                    last_share_farm_value?: number;
                    last_share_swarm_farm_value?: number;
                    last_share_swarm_size?: number;
                    last_prestige_alert_soul_eggs_DEPRECATED?: number;
                    friend_rank?: number;
                    friend_rank_pop?: number;
                    global_rank?: number;
                    global_rank_pop?: number;
                    challenges_alert?: boolean;
                    trophy_alert?: boolean;
                    ar_alert?: boolean;
                    contracts_alert?: boolean;
                    contracts_alert_v2?: boolean;
                    coop_alert?: boolean;
                    coop_alert_v2?: boolean;
                    switch_alert?: boolean;
                    egg_of_prophecy_alert?: boolean;
                    boost_token_alert?: boolean;
                    soul_egg_alert?: boolean;
                    backup_reminder_alert?: boolean;
                    max_button_alert?: boolean;
                    mission_target_alert?: boolean;
                    colleggtibles_alert?: boolean;
                } = {};
                if (this.chicken_btn_pref_big != null) {
                    data.chicken_btn_pref_big = this.chicken_btn_pref_big;
                }
                if (this.free_hatchery_refill_given != null) {
                    data.free_hatchery_refill_given = this.free_hatchery_refill_given;
                }
                if (this.last_share_farm_value != null) {
                    data.last_share_farm_value = this.last_share_farm_value;
                }
                if (this.last_share_swarm_farm_value != null) {
                    data.last_share_swarm_farm_value = this.last_share_swarm_farm_value;
                }
                if (this.last_share_swarm_size != null) {
                    data.last_share_swarm_size = this.last_share_swarm_size;
                }
                if (this.last_prestige_alert_soul_eggs_DEPRECATED != null) {
                    data.last_prestige_alert_soul_eggs_DEPRECATED = this.last_prestige_alert_soul_eggs_DEPRECATED;
                }
                if (this.friend_rank != null) {
                    data.friend_rank = this.friend_rank;
                }
                if (this.friend_rank_pop != null) {
                    data.friend_rank_pop = this.friend_rank_pop;
                }
                if (this.global_rank != null) {
                    data.global_rank = this.global_rank;
                }
                if (this.global_rank_pop != null) {
                    data.global_rank_pop = this.global_rank_pop;
                }
                if (this.challenges_alert != null) {
                    data.challenges_alert = this.challenges_alert;
                }
                if (this.trophy_alert != null) {
                    data.trophy_alert = this.trophy_alert;
                }
                if (this.ar_alert != null) {
                    data.ar_alert = this.ar_alert;
                }
                if (this.contracts_alert != null) {
                    data.contracts_alert = this.contracts_alert;
                }
                if (this.contracts_alert_v2 != null) {
                    data.contracts_alert_v2 = this.contracts_alert_v2;
                }
                if (this.coop_alert != null) {
                    data.coop_alert = this.coop_alert;
                }
                if (this.coop_alert_v2 != null) {
                    data.coop_alert_v2 = this.coop_alert_v2;
                }
                if (this.switch_alert != null) {
                    data.switch_alert = this.switch_alert;
                }
                if (this.egg_of_prophecy_alert != null) {
                    data.egg_of_prophecy_alert = this.egg_of_prophecy_alert;
                }
                if (this.boost_token_alert != null) {
                    data.boost_token_alert = this.boost_token_alert;
                }
                if (this.soul_egg_alert != null) {
                    data.soul_egg_alert = this.soul_egg_alert;
                }
                if (this.backup_reminder_alert != null) {
                    data.backup_reminder_alert = this.backup_reminder_alert;
                }
                if (this.max_button_alert != null) {
                    data.max_button_alert = this.max_button_alert;
                }
                if (this.mission_target_alert != null) {
                    data.mission_target_alert = this.mission_target_alert;
                }
                if (this.colleggtibles_alert != null) {
                    data.colleggtibles_alert = this.colleggtibles_alert;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_chicken_btn_pref_big)
                    writer.writeBool(1, this.chicken_btn_pref_big);
                if (this.has_free_hatchery_refill_given)
                    writer.writeBool(2, this.free_hatchery_refill_given);
                if (this.has_last_share_farm_value)
                    writer.writeDouble(3, this.last_share_farm_value);
                if (this.has_last_share_swarm_farm_value)
                    writer.writeDouble(4, this.last_share_swarm_farm_value);
                if (this.has_last_share_swarm_size)
                    writer.writeDouble(5, this.last_share_swarm_size);
                if (this.has_last_prestige_alert_soul_eggs_DEPRECATED)
                    writer.writeUint64(10, this.last_prestige_alert_soul_eggs_DEPRECATED);
                if (this.has_friend_rank)
                    writer.writeUint64(6, this.friend_rank);
                if (this.has_friend_rank_pop)
                    writer.writeUint64(7, this.friend_rank_pop);
                if (this.has_global_rank)
                    writer.writeUint64(8, this.global_rank);
                if (this.has_global_rank_pop)
                    writer.writeUint64(9, this.global_rank_pop);
                if (this.has_challenges_alert)
                    writer.writeBool(20, this.challenges_alert);
                if (this.has_trophy_alert)
                    writer.writeBool(11, this.trophy_alert);
                if (this.has_ar_alert)
                    writer.writeBool(12, this.ar_alert);
                if (this.has_contracts_alert)
                    writer.writeBool(13, this.contracts_alert);
                if (this.has_contracts_alert_v2)
                    writer.writeBool(21, this.contracts_alert_v2);
                if (this.has_coop_alert)
                    writer.writeBool(14, this.coop_alert);
                if (this.has_coop_alert_v2)
                    writer.writeBool(22, this.coop_alert_v2);
                if (this.has_switch_alert)
                    writer.writeBool(15, this.switch_alert);
                if (this.has_egg_of_prophecy_alert)
                    writer.writeBool(16, this.egg_of_prophecy_alert);
                if (this.has_boost_token_alert)
                    writer.writeBool(17, this.boost_token_alert);
                if (this.has_soul_egg_alert)
                    writer.writeBool(18, this.soul_egg_alert);
                if (this.has_backup_reminder_alert)
                    writer.writeBool(19, this.backup_reminder_alert);
                if (this.has_max_button_alert)
                    writer.writeBool(23, this.max_button_alert);
                if (this.has_mission_target_alert)
                    writer.writeBool(24, this.mission_target_alert);
                if (this.has_colleggtibles_alert)
                    writer.writeBool(25, this.colleggtibles_alert);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Misc {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Misc();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.chicken_btn_pref_big = reader.readBool();
                            break;
                        case 2:
                            message.free_hatchery_refill_given = reader.readBool();
                            break;
                        case 3:
                            message.last_share_farm_value = reader.readDouble();
                            break;
                        case 4:
                            message.last_share_swarm_farm_value = reader.readDouble();
                            break;
                        case 5:
                            message.last_share_swarm_size = reader.readDouble();
                            break;
                        case 10:
                            message.last_prestige_alert_soul_eggs_DEPRECATED = reader.readUint64();
                            break;
                        case 6:
                            message.friend_rank = reader.readUint64();
                            break;
                        case 7:
                            message.friend_rank_pop = reader.readUint64();
                            break;
                        case 8:
                            message.global_rank = reader.readUint64();
                            break;
                        case 9:
                            message.global_rank_pop = reader.readUint64();
                            break;
                        case 20:
                            message.challenges_alert = reader.readBool();
                            break;
                        case 11:
                            message.trophy_alert = reader.readBool();
                            break;
                        case 12:
                            message.ar_alert = reader.readBool();
                            break;
                        case 13:
                            message.contracts_alert = reader.readBool();
                            break;
                        case 21:
                            message.contracts_alert_v2 = reader.readBool();
                            break;
                        case 14:
                            message.coop_alert = reader.readBool();
                            break;
                        case 22:
                            message.coop_alert_v2 = reader.readBool();
                            break;
                        case 15:
                            message.switch_alert = reader.readBool();
                            break;
                        case 16:
                            message.egg_of_prophecy_alert = reader.readBool();
                            break;
                        case 17:
                            message.boost_token_alert = reader.readBool();
                            break;
                        case 18:
                            message.soul_egg_alert = reader.readBool();
                            break;
                        case 19:
                            message.backup_reminder_alert = reader.readBool();
                            break;
                        case 23:
                            message.max_button_alert = reader.readBool();
                            break;
                        case 24:
                            message.mission_target_alert = reader.readBool();
                            break;
                        case 25:
                            message.colleggtibles_alert = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Misc {
                return Misc.deserialize(bytes);
            }
        }
        export class ResearchItem extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
                level?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("level" in data && data.level != undefined) {
                        this.level = data.level;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_id() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get level() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set level(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_level() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                id?: string;
                level?: number;
            }): ResearchItem {
                const message = new ResearchItem({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.level != null) {
                    message.level = data.level;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    level?: number;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.level != null) {
                    data.level = this.level;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_id && this.id.length)
                    writer.writeString(1, this.id);
                if (this.has_level)
                    writer.writeUint32(2, this.level);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResearchItem {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResearchItem();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.level = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ResearchItem {
                return ResearchItem.deserialize(bytes);
            }
        }
        export class NewsHeadline extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
                read?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("read" in data && data.read != undefined) {
                        this.read = data.read;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_id() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get read() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set read(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_read() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                id?: string;
                read?: boolean;
            }): NewsHeadline {
                const message = new NewsHeadline({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.read != null) {
                    message.read = data.read;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    read?: boolean;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.read != null) {
                    data.read = this.read;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_id && this.id.length)
                    writer.writeString(1, this.id);
                if (this.has_read)
                    writer.writeBool(2, this.read);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NewsHeadline {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NewsHeadline();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.read = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): NewsHeadline {
                return NewsHeadline.deserialize(bytes);
            }
        }
        export class AchievementInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
                achieved?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("achieved" in data && data.achieved != undefined) {
                        this.achieved = data.achieved;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_id() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get achieved() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set achieved(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_achieved() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                id?: string;
                achieved?: boolean;
            }): AchievementInfo {
                const message = new AchievementInfo({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.achieved != null) {
                    message.achieved = data.achieved;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    achieved?: boolean;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.achieved != null) {
                    data.achieved = this.achieved;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_id && this.id.length)
                    writer.writeString(1, this.id);
                if (this.has_achieved)
                    writer.writeBool(2, this.achieved);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AchievementInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AchievementInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.achieved = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): AchievementInfo {
                return AchievementInfo.deserialize(bytes);
            }
        }
        export class ActiveBoost extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                boost_id?: string;
                time_remaining?: number;
                reference_value?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("boost_id" in data && data.boost_id != undefined) {
                        this.boost_id = data.boost_id;
                    }
                    if ("time_remaining" in data && data.time_remaining != undefined) {
                        this.time_remaining = data.time_remaining;
                    }
                    if ("reference_value" in data && data.reference_value != undefined) {
                        this.reference_value = data.reference_value;
                    }
                }
            }
            get boost_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set boost_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_boost_id() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get time_remaining() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set time_remaining(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_time_remaining() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get reference_value() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set reference_value(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_reference_value() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                boost_id?: string;
                time_remaining?: number;
                reference_value?: number;
            }): ActiveBoost {
                const message = new ActiveBoost({});
                if (data.boost_id != null) {
                    message.boost_id = data.boost_id;
                }
                if (data.time_remaining != null) {
                    message.time_remaining = data.time_remaining;
                }
                if (data.reference_value != null) {
                    message.reference_value = data.reference_value;
                }
                return message;
            }
            toObject() {
                const data: {
                    boost_id?: string;
                    time_remaining?: number;
                    reference_value?: number;
                } = {};
                if (this.boost_id != null) {
                    data.boost_id = this.boost_id;
                }
                if (this.time_remaining != null) {
                    data.time_remaining = this.time_remaining;
                }
                if (this.reference_value != null) {
                    data.reference_value = this.reference_value;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_boost_id && this.boost_id.length)
                    writer.writeString(1, this.boost_id);
                if (this.has_time_remaining)
                    writer.writeDouble(2, this.time_remaining);
                if (this.has_reference_value)
                    writer.writeDouble(3, this.reference_value);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActiveBoost {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActiveBoost();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.boost_id = reader.readString();
                            break;
                        case 2:
                            message.time_remaining = reader.readDouble();
                            break;
                        case 3:
                            message.reference_value = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ActiveBoost {
                return ActiveBoost.deserialize(bytes);
            }
        }
        export class OwnedBoost extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                boost_id?: string;
                count?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("boost_id" in data && data.boost_id != undefined) {
                        this.boost_id = data.boost_id;
                    }
                    if ("count" in data && data.count != undefined) {
                        this.count = data.count;
                    }
                }
            }
            get boost_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set boost_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_boost_id() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get count() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set count(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_count() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                boost_id?: string;
                count?: number;
            }): OwnedBoost {
                const message = new OwnedBoost({});
                if (data.boost_id != null) {
                    message.boost_id = data.boost_id;
                }
                if (data.count != null) {
                    message.count = data.count;
                }
                return message;
            }
            toObject() {
                const data: {
                    boost_id?: string;
                    count?: number;
                } = {};
                if (this.boost_id != null) {
                    data.boost_id = this.boost_id;
                }
                if (this.count != null) {
                    data.count = this.count;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_boost_id && this.boost_id.length)
                    writer.writeString(1, this.boost_id);
                if (this.has_count)
                    writer.writeUint32(2, this.count);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OwnedBoost {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OwnedBoost();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.boost_id = reader.readString();
                            break;
                        case 2:
                            message.count = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): OwnedBoost {
                return OwnedBoost.deserialize(bytes);
            }
        }
        export class MissionInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
                completed?: boolean;
                reference_value?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("completed" in data && data.completed != undefined) {
                        this.completed = data.completed;
                    }
                    if ("reference_value" in data && data.reference_value != undefined) {
                        this.reference_value = data.reference_value;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_id() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get completed() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set completed(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_completed() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get reference_value() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set reference_value(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_reference_value() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                id?: string;
                completed?: boolean;
                reference_value?: number;
            }): MissionInfo {
                const message = new MissionInfo({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.completed != null) {
                    message.completed = data.completed;
                }
                if (data.reference_value != null) {
                    message.reference_value = data.reference_value;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    completed?: boolean;
                    reference_value?: number;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.completed != null) {
                    data.completed = this.completed;
                }
                if (this.reference_value != null) {
                    data.reference_value = this.reference_value;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_id && this.id.length)
                    writer.writeString(1, this.id);
                if (this.has_completed)
                    writer.writeBool(2, this.completed);
                if (this.has_reference_value)
                    writer.writeDouble(3, this.reference_value);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MissionInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MissionInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.completed = reader.readBool();
                            break;
                        case 3:
                            message.reference_value = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): MissionInfo {
                return MissionInfo.deserialize(bytes);
            }
        }
    }
    export class EggIncFirstContactRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            ei_user_id?: string;
            user_id?: string;
            game_services_id?: string;
            device_id?: string;
            username?: string;
            client_version?: number;
            platform?: Platform;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("ei_user_id" in data && data.ei_user_id != undefined) {
                    this.ei_user_id = data.ei_user_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("game_services_id" in data && data.game_services_id != undefined) {
                    this.game_services_id = data.game_services_id;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 8) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get ei_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set ei_user_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_ei_user_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get game_services_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set game_services_id(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_game_services_id() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_device_id() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_username() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 3, Platform.UNKNOWN_PLATFORM) as Platform;
        }
        set platform(value: Platform) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_platform() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            ei_user_id?: string;
            user_id?: string;
            game_services_id?: string;
            device_id?: string;
            username?: string;
            client_version?: number;
            platform?: Platform;
        }): EggIncFirstContactRequest {
            const message = new EggIncFirstContactRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.ei_user_id != null) {
                message.ei_user_id = data.ei_user_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.game_services_id != null) {
                message.game_services_id = data.game_services_id;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            if (data.platform != null) {
                message.platform = data.platform;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                ei_user_id?: string;
                user_id?: string;
                game_services_id?: string;
                device_id?: string;
                username?: string;
                client_version?: number;
                platform?: Platform;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.ei_user_id != null) {
                data.ei_user_id = this.ei_user_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.game_services_id != null) {
                data.game_services_id = this.game_services_id;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            if (this.platform != null) {
                data.platform = this.platform;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(8, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_ei_user_id && this.ei_user_id.length)
                writer.writeString(4, this.ei_user_id);
            if (this.has_user_id && this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_game_services_id && this.game_services_id.length)
                writer.writeString(7, this.game_services_id);
            if (this.has_device_id && this.device_id.length)
                writer.writeString(5, this.device_id);
            if (this.has_username && this.username.length)
                writer.writeString(6, this.username);
            if (this.has_client_version)
                writer.writeUint32(2, this.client_version);
            if (this.has_platform)
                writer.writeEnum(3, this.platform);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EggIncFirstContactRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EggIncFirstContactRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 8:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 4:
                        message.ei_user_id = reader.readString();
                        break;
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 7:
                        message.game_services_id = reader.readString();
                        break;
                    case 5:
                        message.device_id = reader.readString();
                        break;
                    case 6:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.client_version = reader.readUint32();
                        break;
                    case 3:
                        message.platform = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EggIncFirstContactRequest {
            return EggIncFirstContactRequest.deserialize(bytes);
        }
    }
    export class EggIncFirstContactResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ei_user_id?: string;
            ids_transferred: string[];
            error_code?: number;
            error_message?: string;
            backup?: Backup;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ei_user_id" in data && data.ei_user_id != undefined) {
                    this.ei_user_id = data.ei_user_id;
                }
                this.ids_transferred = data.ids_transferred;
                if ("error_code" in data && data.error_code != undefined) {
                    this.error_code = data.error_code;
                }
                if ("error_message" in data && data.error_message != undefined) {
                    this.error_message = data.error_message;
                }
                if ("backup" in data && data.backup != undefined) {
                    this.backup = data.backup;
                }
            }
        }
        get ei_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ei_user_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_ei_user_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get ids_transferred() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set ids_transferred(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get error_code() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set error_code(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_error_code() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get error_message() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set error_message(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_error_message() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get backup() {
            return pb_1.Message.getWrapperField(this, Backup, 1) as Backup;
        }
        set backup(value: Backup) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_backup() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            ei_user_id?: string;
            ids_transferred: string[];
            error_code?: number;
            error_message?: string;
            backup?: ReturnType<typeof Backup.prototype.toObject>;
        }): EggIncFirstContactResponse {
            const message = new EggIncFirstContactResponse({
                ids_transferred: data.ids_transferred
            });
            if (data.ei_user_id != null) {
                message.ei_user_id = data.ei_user_id;
            }
            if (data.error_code != null) {
                message.error_code = data.error_code;
            }
            if (data.error_message != null) {
                message.error_message = data.error_message;
            }
            if (data.backup != null) {
                message.backup = Backup.fromObject(data.backup);
            }
            return message;
        }
        toObject() {
            const data: {
                ei_user_id?: string;
                ids_transferred: string[];
                error_code?: number;
                error_message?: string;
                backup?: ReturnType<typeof Backup.prototype.toObject>;
            } = {
                ids_transferred: this.ids_transferred
            };
            if (this.ei_user_id != null) {
                data.ei_user_id = this.ei_user_id;
            }
            if (this.error_code != null) {
                data.error_code = this.error_code;
            }
            if (this.error_message != null) {
                data.error_message = this.error_message;
            }
            if (this.backup != null) {
                data.backup = this.backup.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ei_user_id && this.ei_user_id.length)
                writer.writeString(2, this.ei_user_id);
            if (this.ids_transferred.length)
                writer.writeRepeatedString(3, this.ids_transferred);
            if (this.has_error_code)
                writer.writeUint32(4, this.error_code);
            if (this.has_error_message && this.error_message.length)
                writer.writeString(5, this.error_message);
            if (this.has_backup)
                writer.writeMessage(1, this.backup, () => this.backup.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EggIncFirstContactResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EggIncFirstContactResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.ei_user_id = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.error_code = reader.readUint32();
                        break;
                    case 5:
                        message.error_message = reader.readString();
                        break;
                    case 1:
                        reader.readMessage(message.backup, () => message.backup = Backup.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EggIncFirstContactResponse {
            return EggIncFirstContactResponse.deserialize(bytes);
        }
    }
    export namespace EggIncFirstContactResponse {
        export enum ErrorCodes {
            NO_ERROR = 0,
            EXISTING_USER_W_GAMER_ID = 1,
            USER_NOT_FOUND = 2,
            BACKUP_CONFLICT = 3
        }
    }
    export class EggIncAdConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            network_priority: AdNetwork[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.network_priority = data.network_priority;
            }
        }
        get network_priority() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as AdNetwork[];
        }
        set network_priority(value: AdNetwork[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            network_priority: AdNetwork[];
        }): EggIncAdConfig {
            const message = new EggIncAdConfig({
                network_priority: data.network_priority
            });
            return message;
        }
        toObject() {
            const data: {
                network_priority: AdNetwork[];
            } = {
                network_priority: this.network_priority
            };
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.network_priority.length)
                writer.writeRepeatedEnum(1, this.network_priority);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EggIncAdConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EggIncAdConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readEnum());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EggIncAdConfig {
            return EggIncAdConfig.deserialize(bytes);
        }
    }
    export class DailyGiftInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            current_day?: number;
            seconds_to_next_day?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("current_day" in data && data.current_day != undefined) {
                    this.current_day = data.current_day;
                }
                if ("seconds_to_next_day" in data && data.seconds_to_next_day != undefined) {
                    this.seconds_to_next_day = data.seconds_to_next_day;
                }
            }
        }
        get current_day() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set current_day(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_current_day() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get seconds_to_next_day() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set seconds_to_next_day(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_seconds_to_next_day() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            current_day?: number;
            seconds_to_next_day?: number;
        }): DailyGiftInfo {
            const message = new DailyGiftInfo({});
            if (data.current_day != null) {
                message.current_day = data.current_day;
            }
            if (data.seconds_to_next_day != null) {
                message.seconds_to_next_day = data.seconds_to_next_day;
            }
            return message;
        }
        toObject() {
            const data: {
                current_day?: number;
                seconds_to_next_day?: number;
            } = {};
            if (this.current_day != null) {
                data.current_day = this.current_day;
            }
            if (this.seconds_to_next_day != null) {
                data.seconds_to_next_day = this.seconds_to_next_day;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_current_day)
                writer.writeUint32(1, this.current_day);
            if (this.has_seconds_to_next_day)
                writer.writeDouble(2, this.seconds_to_next_day);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyGiftInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DailyGiftInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.current_day = reader.readUint32();
                        break;
                    case 2:
                        message.seconds_to_next_day = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DailyGiftInfo {
            return DailyGiftInfo.deserialize(bytes);
        }
    }
    export class SalesInfoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            piggy_full?: boolean;
            piggy_found_full?: boolean;
            seconds_full_realtime?: number;
            seconds_full_gametime?: number;
            lost_increments?: number;
            current_client_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("piggy_full" in data && data.piggy_full != undefined) {
                    this.piggy_full = data.piggy_full;
                }
                if ("piggy_found_full" in data && data.piggy_found_full != undefined) {
                    this.piggy_found_full = data.piggy_found_full;
                }
                if ("seconds_full_realtime" in data && data.seconds_full_realtime != undefined) {
                    this.seconds_full_realtime = data.seconds_full_realtime;
                }
                if ("seconds_full_gametime" in data && data.seconds_full_gametime != undefined) {
                    this.seconds_full_gametime = data.seconds_full_gametime;
                }
                if ("lost_increments" in data && data.lost_increments != undefined) {
                    this.lost_increments = data.lost_increments;
                }
                if ("current_client_version" in data && data.current_client_version != undefined) {
                    this.current_client_version = data.current_client_version;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get piggy_full() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set piggy_full(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_piggy_full() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get piggy_found_full() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set piggy_found_full(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_piggy_found_full() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get seconds_full_realtime() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set seconds_full_realtime(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_seconds_full_realtime() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get seconds_full_gametime() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set seconds_full_gametime(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_seconds_full_gametime() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get lost_increments() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set lost_increments(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_lost_increments() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get current_client_version() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set current_client_version(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_current_client_version() {
            return pb_1.Message.getField(this, 10) != null;
        }
        static fromObject(data: {
            user_id?: string;
            piggy_full?: boolean;
            piggy_found_full?: boolean;
            seconds_full_realtime?: number;
            seconds_full_gametime?: number;
            lost_increments?: number;
            current_client_version?: number;
        }): SalesInfoRequest {
            const message = new SalesInfoRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.piggy_full != null) {
                message.piggy_full = data.piggy_full;
            }
            if (data.piggy_found_full != null) {
                message.piggy_found_full = data.piggy_found_full;
            }
            if (data.seconds_full_realtime != null) {
                message.seconds_full_realtime = data.seconds_full_realtime;
            }
            if (data.seconds_full_gametime != null) {
                message.seconds_full_gametime = data.seconds_full_gametime;
            }
            if (data.lost_increments != null) {
                message.lost_increments = data.lost_increments;
            }
            if (data.current_client_version != null) {
                message.current_client_version = data.current_client_version;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                piggy_full?: boolean;
                piggy_found_full?: boolean;
                seconds_full_realtime?: number;
                seconds_full_gametime?: number;
                lost_increments?: number;
                current_client_version?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.piggy_full != null) {
                data.piggy_full = this.piggy_full;
            }
            if (this.piggy_found_full != null) {
                data.piggy_found_full = this.piggy_found_full;
            }
            if (this.seconds_full_realtime != null) {
                data.seconds_full_realtime = this.seconds_full_realtime;
            }
            if (this.seconds_full_gametime != null) {
                data.seconds_full_gametime = this.seconds_full_gametime;
            }
            if (this.lost_increments != null) {
                data.lost_increments = this.lost_increments;
            }
            if (this.current_client_version != null) {
                data.current_client_version = this.current_client_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user_id && this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_piggy_full)
                writer.writeBool(2, this.piggy_full);
            if (this.has_piggy_found_full)
                writer.writeBool(3, this.piggy_found_full);
            if (this.has_seconds_full_realtime)
                writer.writeDouble(4, this.seconds_full_realtime);
            if (this.has_seconds_full_gametime)
                writer.writeDouble(5, this.seconds_full_gametime);
            if (this.has_lost_increments)
                writer.writeUint32(7, this.lost_increments);
            if (this.has_current_client_version)
                writer.writeUint32(10, this.current_client_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SalesInfoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SalesInfoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.piggy_full = reader.readBool();
                        break;
                    case 3:
                        message.piggy_found_full = reader.readBool();
                        break;
                    case 4:
                        message.seconds_full_realtime = reader.readDouble();
                        break;
                    case 5:
                        message.seconds_full_gametime = reader.readDouble();
                        break;
                    case 7:
                        message.lost_increments = reader.readUint32();
                        break;
                    case 10:
                        message.current_client_version = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SalesInfoRequest {
            return SalesInfoRequest.deserialize(bytes);
        }
    }
    export class IAPSaleEntry extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            product_id?: string;
            seconds_remaining?: number;
            discount_string?: string;
            sale_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("product_id" in data && data.product_id != undefined) {
                    this.product_id = data.product_id;
                }
                if ("seconds_remaining" in data && data.seconds_remaining != undefined) {
                    this.seconds_remaining = data.seconds_remaining;
                }
                if ("discount_string" in data && data.discount_string != undefined) {
                    this.discount_string = data.discount_string;
                }
                if ("sale_id" in data && data.sale_id != undefined) {
                    this.sale_id = data.sale_id;
                }
            }
        }
        get product_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set product_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_product_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get seconds_remaining() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set seconds_remaining(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_seconds_remaining() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get discount_string() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set discount_string(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_discount_string() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get sale_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set sale_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_sale_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            product_id?: string;
            seconds_remaining?: number;
            discount_string?: string;
            sale_id?: string;
        }): IAPSaleEntry {
            const message = new IAPSaleEntry({});
            if (data.product_id != null) {
                message.product_id = data.product_id;
            }
            if (data.seconds_remaining != null) {
                message.seconds_remaining = data.seconds_remaining;
            }
            if (data.discount_string != null) {
                message.discount_string = data.discount_string;
            }
            if (data.sale_id != null) {
                message.sale_id = data.sale_id;
            }
            return message;
        }
        toObject() {
            const data: {
                product_id?: string;
                seconds_remaining?: number;
                discount_string?: string;
                sale_id?: string;
            } = {};
            if (this.product_id != null) {
                data.product_id = this.product_id;
            }
            if (this.seconds_remaining != null) {
                data.seconds_remaining = this.seconds_remaining;
            }
            if (this.discount_string != null) {
                data.discount_string = this.discount_string;
            }
            if (this.sale_id != null) {
                data.sale_id = this.sale_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_product_id && this.product_id.length)
                writer.writeString(1, this.product_id);
            if (this.has_seconds_remaining)
                writer.writeDouble(2, this.seconds_remaining);
            if (this.has_discount_string && this.discount_string.length)
                writer.writeString(3, this.discount_string);
            if (this.has_sale_id && this.sale_id.length)
                writer.writeString(4, this.sale_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IAPSaleEntry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IAPSaleEntry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.product_id = reader.readString();
                        break;
                    case 2:
                        message.seconds_remaining = reader.readDouble();
                        break;
                    case 3:
                        message.discount_string = reader.readString();
                        break;
                    case 4:
                        message.sale_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IAPSaleEntry {
            return IAPSaleEntry.deserialize(bytes);
        }
    }
    export class SalesInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sales: IAPSaleEntry[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.sales = data.sales;
            }
        }
        get sales() {
            return pb_1.Message.getRepeatedWrapperField(this, IAPSaleEntry, 1) as IAPSaleEntry[];
        }
        set sales(value: IAPSaleEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            sales?: ReturnType<typeof IAPSaleEntry.prototype.toObject>[];
        }): SalesInfo {
            const message = new SalesInfo({
                sales: data.sales.map(item => IAPSaleEntry.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                sales?: ReturnType<typeof IAPSaleEntry.prototype.toObject>[];
            } = {};
            if (this.sales != null) {
                data.sales = this.sales.map((item: IAPSaleEntry) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sales.length)
                writer.writeRepeatedMessage(1, this.sales, (item: IAPSaleEntry) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SalesInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SalesInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.sales, () => pb_1.Message.addToRepeatedWrapperField(message, 1, IAPSaleEntry.deserialize(reader), IAPSaleEntry));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SalesInfo {
            return SalesInfo.deserialize(bytes);
        }
    }
    export class EggIncEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            identifier?: string;
            seconds_remaining?: number;
            type?: string;
            multiplier?: number;
            subtitle?: string;
            start_time?: number;
            duration?: number;
            cc_only?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("identifier" in data && data.identifier != undefined) {
                    this.identifier = data.identifier;
                }
                if ("seconds_remaining" in data && data.seconds_remaining != undefined) {
                    this.seconds_remaining = data.seconds_remaining;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("multiplier" in data && data.multiplier != undefined) {
                    this.multiplier = data.multiplier;
                }
                if ("subtitle" in data && data.subtitle != undefined) {
                    this.subtitle = data.subtitle;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("cc_only" in data && data.cc_only != undefined) {
                    this.cc_only = data.cc_only;
                }
            }
        }
        get identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get seconds_remaining() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set seconds_remaining(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_seconds_remaining() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_type() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get multiplier() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set multiplier(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_multiplier() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get subtitle() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set subtitle(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_subtitle() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get duration() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set duration(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_duration() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get cc_only() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set cc_only(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_cc_only() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            identifier?: string;
            seconds_remaining?: number;
            type?: string;
            multiplier?: number;
            subtitle?: string;
            start_time?: number;
            duration?: number;
            cc_only?: boolean;
        }): EggIncEvent {
            const message = new EggIncEvent({});
            if (data.identifier != null) {
                message.identifier = data.identifier;
            }
            if (data.seconds_remaining != null) {
                message.seconds_remaining = data.seconds_remaining;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.multiplier != null) {
                message.multiplier = data.multiplier;
            }
            if (data.subtitle != null) {
                message.subtitle = data.subtitle;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.duration != null) {
                message.duration = data.duration;
            }
            if (data.cc_only != null) {
                message.cc_only = data.cc_only;
            }
            return message;
        }
        toObject() {
            const data: {
                identifier?: string;
                seconds_remaining?: number;
                type?: string;
                multiplier?: number;
                subtitle?: string;
                start_time?: number;
                duration?: number;
                cc_only?: boolean;
            } = {};
            if (this.identifier != null) {
                data.identifier = this.identifier;
            }
            if (this.seconds_remaining != null) {
                data.seconds_remaining = this.seconds_remaining;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.multiplier != null) {
                data.multiplier = this.multiplier;
            }
            if (this.subtitle != null) {
                data.subtitle = this.subtitle;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.duration != null) {
                data.duration = this.duration;
            }
            if (this.cc_only != null) {
                data.cc_only = this.cc_only;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_identifier && this.identifier.length)
                writer.writeString(1, this.identifier);
            if (this.has_seconds_remaining)
                writer.writeDouble(2, this.seconds_remaining);
            if (this.has_type && this.type.length)
                writer.writeString(3, this.type);
            if (this.has_multiplier)
                writer.writeDouble(4, this.multiplier);
            if (this.has_subtitle && this.subtitle.length)
                writer.writeString(5, this.subtitle);
            if (this.has_start_time)
                writer.writeDouble(6, this.start_time);
            if (this.has_duration)
                writer.writeDouble(7, this.duration);
            if (this.has_cc_only)
                writer.writeBool(8, this.cc_only);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EggIncEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EggIncEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.identifier = reader.readString();
                        break;
                    case 2:
                        message.seconds_remaining = reader.readDouble();
                        break;
                    case 3:
                        message.type = reader.readString();
                        break;
                    case 4:
                        message.multiplier = reader.readDouble();
                        break;
                    case 5:
                        message.subtitle = reader.readString();
                        break;
                    case 6:
                        message.start_time = reader.readDouble();
                        break;
                    case 7:
                        message.duration = reader.readDouble();
                        break;
                    case 8:
                        message.cc_only = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EggIncEvent {
            return EggIncEvent.deserialize(bytes);
        }
    }
    export class EggIncCurrentEvents extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            events: EggIncEvent[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.events = data.events;
            }
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, EggIncEvent, 1) as EggIncEvent[];
        }
        set events(value: EggIncEvent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            events?: ReturnType<typeof EggIncEvent.prototype.toObject>[];
        }): EggIncCurrentEvents {
            const message = new EggIncCurrentEvents({
                events: data.events.map(item => EggIncEvent.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                events?: ReturnType<typeof EggIncEvent.prototype.toObject>[];
            } = {};
            if (this.events != null) {
                data.events = this.events.map((item: EggIncEvent) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.events.length)
                writer.writeRepeatedMessage(1, this.events, (item: EggIncEvent) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EggIncCurrentEvents {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EggIncCurrentEvents();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EggIncEvent.deserialize(reader), EggIncEvent));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EggIncCurrentEvents {
            return EggIncCurrentEvents.deserialize(bytes);
        }
    }
    export class DeviceInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_id?: string;
            advertising_id?: string;
            platform?: string;
            form_factor?: string;
            device_name?: string;
            platform_version?: string;
            locale_country?: string;
            locale_language?: string;
            gpu_vendor?: string;
            gpu_model?: string;
            device_bucket?: string;
            screen_width?: number;
            screen_height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("advertising_id" in data && data.advertising_id != undefined) {
                    this.advertising_id = data.advertising_id;
                }
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
                if ("form_factor" in data && data.form_factor != undefined) {
                    this.form_factor = data.form_factor;
                }
                if ("device_name" in data && data.device_name != undefined) {
                    this.device_name = data.device_name;
                }
                if ("platform_version" in data && data.platform_version != undefined) {
                    this.platform_version = data.platform_version;
                }
                if ("locale_country" in data && data.locale_country != undefined) {
                    this.locale_country = data.locale_country;
                }
                if ("locale_language" in data && data.locale_language != undefined) {
                    this.locale_language = data.locale_language;
                }
                if ("gpu_vendor" in data && data.gpu_vendor != undefined) {
                    this.gpu_vendor = data.gpu_vendor;
                }
                if ("gpu_model" in data && data.gpu_model != undefined) {
                    this.gpu_model = data.gpu_model;
                }
                if ("device_bucket" in data && data.device_bucket != undefined) {
                    this.device_bucket = data.device_bucket;
                }
                if ("screen_width" in data && data.screen_width != undefined) {
                    this.screen_width = data.screen_width;
                }
                if ("screen_height" in data && data.screen_height != undefined) {
                    this.screen_height = data.screen_height;
                }
            }
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_device_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get advertising_id() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set advertising_id(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_advertising_id() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set platform(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_platform() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get form_factor() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set form_factor(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_form_factor() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get device_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set device_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_device_name() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get platform_version() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set platform_version(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_platform_version() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get locale_country() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set locale_country(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_locale_country() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get locale_language() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set locale_language(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_locale_language() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get gpu_vendor() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set gpu_vendor(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_gpu_vendor() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get gpu_model() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set gpu_model(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_gpu_model() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get device_bucket() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set device_bucket(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_device_bucket() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get screen_width() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set screen_width(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_screen_width() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get screen_height() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set screen_height(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_screen_height() {
            return pb_1.Message.getField(this, 12) != null;
        }
        static fromObject(data: {
            device_id?: string;
            advertising_id?: string;
            platform?: string;
            form_factor?: string;
            device_name?: string;
            platform_version?: string;
            locale_country?: string;
            locale_language?: string;
            gpu_vendor?: string;
            gpu_model?: string;
            device_bucket?: string;
            screen_width?: number;
            screen_height?: number;
        }): DeviceInfo {
            const message = new DeviceInfo({});
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.advertising_id != null) {
                message.advertising_id = data.advertising_id;
            }
            if (data.platform != null) {
                message.platform = data.platform;
            }
            if (data.form_factor != null) {
                message.form_factor = data.form_factor;
            }
            if (data.device_name != null) {
                message.device_name = data.device_name;
            }
            if (data.platform_version != null) {
                message.platform_version = data.platform_version;
            }
            if (data.locale_country != null) {
                message.locale_country = data.locale_country;
            }
            if (data.locale_language != null) {
                message.locale_language = data.locale_language;
            }
            if (data.gpu_vendor != null) {
                message.gpu_vendor = data.gpu_vendor;
            }
            if (data.gpu_model != null) {
                message.gpu_model = data.gpu_model;
            }
            if (data.device_bucket != null) {
                message.device_bucket = data.device_bucket;
            }
            if (data.screen_width != null) {
                message.screen_width = data.screen_width;
            }
            if (data.screen_height != null) {
                message.screen_height = data.screen_height;
            }
            return message;
        }
        toObject() {
            const data: {
                device_id?: string;
                advertising_id?: string;
                platform?: string;
                form_factor?: string;
                device_name?: string;
                platform_version?: string;
                locale_country?: string;
                locale_language?: string;
                gpu_vendor?: string;
                gpu_model?: string;
                device_bucket?: string;
                screen_width?: number;
                screen_height?: number;
            } = {};
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.advertising_id != null) {
                data.advertising_id = this.advertising_id;
            }
            if (this.platform != null) {
                data.platform = this.platform;
            }
            if (this.form_factor != null) {
                data.form_factor = this.form_factor;
            }
            if (this.device_name != null) {
                data.device_name = this.device_name;
            }
            if (this.platform_version != null) {
                data.platform_version = this.platform_version;
            }
            if (this.locale_country != null) {
                data.locale_country = this.locale_country;
            }
            if (this.locale_language != null) {
                data.locale_language = this.locale_language;
            }
            if (this.gpu_vendor != null) {
                data.gpu_vendor = this.gpu_vendor;
            }
            if (this.gpu_model != null) {
                data.gpu_model = this.gpu_model;
            }
            if (this.device_bucket != null) {
                data.device_bucket = this.device_bucket;
            }
            if (this.screen_width != null) {
                data.screen_width = this.screen_width;
            }
            if (this.screen_height != null) {
                data.screen_height = this.screen_height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_device_id && this.device_id.length)
                writer.writeString(1, this.device_id);
            if (this.has_advertising_id && this.advertising_id.length)
                writer.writeString(13, this.advertising_id);
            if (this.has_platform && this.platform.length)
                writer.writeString(2, this.platform);
            if (this.has_form_factor && this.form_factor.length)
                writer.writeString(3, this.form_factor);
            if (this.has_device_name && this.device_name.length)
                writer.writeString(4, this.device_name);
            if (this.has_platform_version && this.platform_version.length)
                writer.writeString(5, this.platform_version);
            if (this.has_locale_country && this.locale_country.length)
                writer.writeString(6, this.locale_country);
            if (this.has_locale_language && this.locale_language.length)
                writer.writeString(7, this.locale_language);
            if (this.has_gpu_vendor && this.gpu_vendor.length)
                writer.writeString(8, this.gpu_vendor);
            if (this.has_gpu_model && this.gpu_model.length)
                writer.writeString(9, this.gpu_model);
            if (this.has_device_bucket && this.device_bucket.length)
                writer.writeString(10, this.device_bucket);
            if (this.has_screen_width)
                writer.writeUint32(11, this.screen_width);
            if (this.has_screen_height)
                writer.writeUint32(12, this.screen_height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeviceInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeviceInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_id = reader.readString();
                        break;
                    case 13:
                        message.advertising_id = reader.readString();
                        break;
                    case 2:
                        message.platform = reader.readString();
                        break;
                    case 3:
                        message.form_factor = reader.readString();
                        break;
                    case 4:
                        message.device_name = reader.readString();
                        break;
                    case 5:
                        message.platform_version = reader.readString();
                        break;
                    case 6:
                        message.locale_country = reader.readString();
                        break;
                    case 7:
                        message.locale_language = reader.readString();
                        break;
                    case 8:
                        message.gpu_vendor = reader.readString();
                        break;
                    case 9:
                        message.gpu_model = reader.readString();
                        break;
                    case 10:
                        message.device_bucket = reader.readString();
                        break;
                    case 11:
                        message.screen_width = reader.readUint32();
                        break;
                    case 12:
                        message.screen_height = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeviceInfo {
            return DeviceInfo.deserialize(bytes);
        }
    }
    export class AppInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            version_str?: string;
            sessions?: number;
            num_prestiges?: number;
            soul_eggs?: number;
            current_egg?: number;
            gold_earned?: number;
            gold_spent?: number;
            current_mission?: number;
            piggy_size?: number;
            num_piggy_breaks?: number;
            verified_piggy_breaks?: number;
            iap_packs_purchased?: number;
            permit_level?: number;
            video_doubler_uses?: number;
            drone_takedowns?: number;
            drone_takedowns_elite?: number;
            trophies_unlocked?: boolean;
            egg_level?: number;
            struggle_factor?: number;
            piggy_full?: boolean;
            piggy_found_full?: boolean;
            time_piggy_full_realtime?: number;
            time_piggy_full_gametime?: number;
            lost_piggy_increments?: number;
            sale_id?: string;
            unlimited_chickens_uses?: number;
            refill_uses?: number;
            short_warp_uses?: number;
            long_warp_uses?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("version_str" in data && data.version_str != undefined) {
                    this.version_str = data.version_str;
                }
                if ("sessions" in data && data.sessions != undefined) {
                    this.sessions = data.sessions;
                }
                if ("num_prestiges" in data && data.num_prestiges != undefined) {
                    this.num_prestiges = data.num_prestiges;
                }
                if ("soul_eggs" in data && data.soul_eggs != undefined) {
                    this.soul_eggs = data.soul_eggs;
                }
                if ("current_egg" in data && data.current_egg != undefined) {
                    this.current_egg = data.current_egg;
                }
                if ("gold_earned" in data && data.gold_earned != undefined) {
                    this.gold_earned = data.gold_earned;
                }
                if ("gold_spent" in data && data.gold_spent != undefined) {
                    this.gold_spent = data.gold_spent;
                }
                if ("current_mission" in data && data.current_mission != undefined) {
                    this.current_mission = data.current_mission;
                }
                if ("piggy_size" in data && data.piggy_size != undefined) {
                    this.piggy_size = data.piggy_size;
                }
                if ("num_piggy_breaks" in data && data.num_piggy_breaks != undefined) {
                    this.num_piggy_breaks = data.num_piggy_breaks;
                }
                if ("verified_piggy_breaks" in data && data.verified_piggy_breaks != undefined) {
                    this.verified_piggy_breaks = data.verified_piggy_breaks;
                }
                if ("iap_packs_purchased" in data && data.iap_packs_purchased != undefined) {
                    this.iap_packs_purchased = data.iap_packs_purchased;
                }
                if ("permit_level" in data && data.permit_level != undefined) {
                    this.permit_level = data.permit_level;
                }
                if ("video_doubler_uses" in data && data.video_doubler_uses != undefined) {
                    this.video_doubler_uses = data.video_doubler_uses;
                }
                if ("drone_takedowns" in data && data.drone_takedowns != undefined) {
                    this.drone_takedowns = data.drone_takedowns;
                }
                if ("drone_takedowns_elite" in data && data.drone_takedowns_elite != undefined) {
                    this.drone_takedowns_elite = data.drone_takedowns_elite;
                }
                if ("trophies_unlocked" in data && data.trophies_unlocked != undefined) {
                    this.trophies_unlocked = data.trophies_unlocked;
                }
                if ("egg_level" in data && data.egg_level != undefined) {
                    this.egg_level = data.egg_level;
                }
                if ("struggle_factor" in data && data.struggle_factor != undefined) {
                    this.struggle_factor = data.struggle_factor;
                }
                if ("piggy_full" in data && data.piggy_full != undefined) {
                    this.piggy_full = data.piggy_full;
                }
                if ("piggy_found_full" in data && data.piggy_found_full != undefined) {
                    this.piggy_found_full = data.piggy_found_full;
                }
                if ("time_piggy_full_realtime" in data && data.time_piggy_full_realtime != undefined) {
                    this.time_piggy_full_realtime = data.time_piggy_full_realtime;
                }
                if ("time_piggy_full_gametime" in data && data.time_piggy_full_gametime != undefined) {
                    this.time_piggy_full_gametime = data.time_piggy_full_gametime;
                }
                if ("lost_piggy_increments" in data && data.lost_piggy_increments != undefined) {
                    this.lost_piggy_increments = data.lost_piggy_increments;
                }
                if ("sale_id" in data && data.sale_id != undefined) {
                    this.sale_id = data.sale_id;
                }
                if ("unlimited_chickens_uses" in data && data.unlimited_chickens_uses != undefined) {
                    this.unlimited_chickens_uses = data.unlimited_chickens_uses;
                }
                if ("refill_uses" in data && data.refill_uses != undefined) {
                    this.refill_uses = data.refill_uses;
                }
                if ("short_warp_uses" in data && data.short_warp_uses != undefined) {
                    this.short_warp_uses = data.short_warp_uses;
                }
                if ("long_warp_uses" in data && data.long_warp_uses != undefined) {
                    this.long_warp_uses = data.long_warp_uses;
                }
            }
        }
        get version_str() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set version_str(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_version_str() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get sessions() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set sessions(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_sessions() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get num_prestiges() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set num_prestiges(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_num_prestiges() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get soul_eggs() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set soul_eggs(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_soul_eggs() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get current_egg() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set current_egg(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_current_egg() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get gold_earned() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set gold_earned(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_gold_earned() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get gold_spent() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set gold_spent(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_gold_spent() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get current_mission() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set current_mission(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_current_mission() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get piggy_size() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set piggy_size(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_piggy_size() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get num_piggy_breaks() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set num_piggy_breaks(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_num_piggy_breaks() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get verified_piggy_breaks() {
            return pb_1.Message.getFieldWithDefault(this, 29, 0) as number;
        }
        set verified_piggy_breaks(value: number) {
            pb_1.Message.setField(this, 29, value);
        }
        get has_verified_piggy_breaks() {
            return pb_1.Message.getField(this, 29) != null;
        }
        get iap_packs_purchased() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set iap_packs_purchased(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_iap_packs_purchased() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get permit_level() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set permit_level(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_permit_level() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get video_doubler_uses() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set video_doubler_uses(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_video_doubler_uses() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get drone_takedowns() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set drone_takedowns(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get has_drone_takedowns() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get drone_takedowns_elite() {
            return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
        }
        set drone_takedowns_elite(value: number) {
            pb_1.Message.setField(this, 19, value);
        }
        get has_drone_takedowns_elite() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get trophies_unlocked() {
            return pb_1.Message.getFieldWithDefault(this, 20, false) as boolean;
        }
        set trophies_unlocked(value: boolean) {
            pb_1.Message.setField(this, 20, value);
        }
        get has_trophies_unlocked() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get egg_level() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set egg_level(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get has_egg_level() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get struggle_factor() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set struggle_factor(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        get has_struggle_factor() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get piggy_full() {
            return pb_1.Message.getFieldWithDefault(this, 23, false) as boolean;
        }
        set piggy_full(value: boolean) {
            pb_1.Message.setField(this, 23, value);
        }
        get has_piggy_full() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get piggy_found_full() {
            return pb_1.Message.getFieldWithDefault(this, 24, false) as boolean;
        }
        set piggy_found_full(value: boolean) {
            pb_1.Message.setField(this, 24, value);
        }
        get has_piggy_found_full() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get time_piggy_full_realtime() {
            return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
        }
        set time_piggy_full_realtime(value: number) {
            pb_1.Message.setField(this, 25, value);
        }
        get has_time_piggy_full_realtime() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get time_piggy_full_gametime() {
            return pb_1.Message.getFieldWithDefault(this, 26, 0) as number;
        }
        set time_piggy_full_gametime(value: number) {
            pb_1.Message.setField(this, 26, value);
        }
        get has_time_piggy_full_gametime() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get lost_piggy_increments() {
            return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
        }
        set lost_piggy_increments(value: number) {
            pb_1.Message.setField(this, 27, value);
        }
        get has_lost_piggy_increments() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get sale_id() {
            return pb_1.Message.getFieldWithDefault(this, 28, "") as string;
        }
        set sale_id(value: string) {
            pb_1.Message.setField(this, 28, value);
        }
        get has_sale_id() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get unlimited_chickens_uses() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set unlimited_chickens_uses(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_unlimited_chickens_uses() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get refill_uses() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set refill_uses(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_refill_uses() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get short_warp_uses() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set short_warp_uses(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_short_warp_uses() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get long_warp_uses() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set long_warp_uses(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get has_long_warp_uses() {
            return pb_1.Message.getField(this, 17) != null;
        }
        static fromObject(data: {
            version_str?: string;
            sessions?: number;
            num_prestiges?: number;
            soul_eggs?: number;
            current_egg?: number;
            gold_earned?: number;
            gold_spent?: number;
            current_mission?: number;
            piggy_size?: number;
            num_piggy_breaks?: number;
            verified_piggy_breaks?: number;
            iap_packs_purchased?: number;
            permit_level?: number;
            video_doubler_uses?: number;
            drone_takedowns?: number;
            drone_takedowns_elite?: number;
            trophies_unlocked?: boolean;
            egg_level?: number;
            struggle_factor?: number;
            piggy_full?: boolean;
            piggy_found_full?: boolean;
            time_piggy_full_realtime?: number;
            time_piggy_full_gametime?: number;
            lost_piggy_increments?: number;
            sale_id?: string;
            unlimited_chickens_uses?: number;
            refill_uses?: number;
            short_warp_uses?: number;
            long_warp_uses?: number;
        }): AppInfo {
            const message = new AppInfo({});
            if (data.version_str != null) {
                message.version_str = data.version_str;
            }
            if (data.sessions != null) {
                message.sessions = data.sessions;
            }
            if (data.num_prestiges != null) {
                message.num_prestiges = data.num_prestiges;
            }
            if (data.soul_eggs != null) {
                message.soul_eggs = data.soul_eggs;
            }
            if (data.current_egg != null) {
                message.current_egg = data.current_egg;
            }
            if (data.gold_earned != null) {
                message.gold_earned = data.gold_earned;
            }
            if (data.gold_spent != null) {
                message.gold_spent = data.gold_spent;
            }
            if (data.current_mission != null) {
                message.current_mission = data.current_mission;
            }
            if (data.piggy_size != null) {
                message.piggy_size = data.piggy_size;
            }
            if (data.num_piggy_breaks != null) {
                message.num_piggy_breaks = data.num_piggy_breaks;
            }
            if (data.verified_piggy_breaks != null) {
                message.verified_piggy_breaks = data.verified_piggy_breaks;
            }
            if (data.iap_packs_purchased != null) {
                message.iap_packs_purchased = data.iap_packs_purchased;
            }
            if (data.permit_level != null) {
                message.permit_level = data.permit_level;
            }
            if (data.video_doubler_uses != null) {
                message.video_doubler_uses = data.video_doubler_uses;
            }
            if (data.drone_takedowns != null) {
                message.drone_takedowns = data.drone_takedowns;
            }
            if (data.drone_takedowns_elite != null) {
                message.drone_takedowns_elite = data.drone_takedowns_elite;
            }
            if (data.trophies_unlocked != null) {
                message.trophies_unlocked = data.trophies_unlocked;
            }
            if (data.egg_level != null) {
                message.egg_level = data.egg_level;
            }
            if (data.struggle_factor != null) {
                message.struggle_factor = data.struggle_factor;
            }
            if (data.piggy_full != null) {
                message.piggy_full = data.piggy_full;
            }
            if (data.piggy_found_full != null) {
                message.piggy_found_full = data.piggy_found_full;
            }
            if (data.time_piggy_full_realtime != null) {
                message.time_piggy_full_realtime = data.time_piggy_full_realtime;
            }
            if (data.time_piggy_full_gametime != null) {
                message.time_piggy_full_gametime = data.time_piggy_full_gametime;
            }
            if (data.lost_piggy_increments != null) {
                message.lost_piggy_increments = data.lost_piggy_increments;
            }
            if (data.sale_id != null) {
                message.sale_id = data.sale_id;
            }
            if (data.unlimited_chickens_uses != null) {
                message.unlimited_chickens_uses = data.unlimited_chickens_uses;
            }
            if (data.refill_uses != null) {
                message.refill_uses = data.refill_uses;
            }
            if (data.short_warp_uses != null) {
                message.short_warp_uses = data.short_warp_uses;
            }
            if (data.long_warp_uses != null) {
                message.long_warp_uses = data.long_warp_uses;
            }
            return message;
        }
        toObject() {
            const data: {
                version_str?: string;
                sessions?: number;
                num_prestiges?: number;
                soul_eggs?: number;
                current_egg?: number;
                gold_earned?: number;
                gold_spent?: number;
                current_mission?: number;
                piggy_size?: number;
                num_piggy_breaks?: number;
                verified_piggy_breaks?: number;
                iap_packs_purchased?: number;
                permit_level?: number;
                video_doubler_uses?: number;
                drone_takedowns?: number;
                drone_takedowns_elite?: number;
                trophies_unlocked?: boolean;
                egg_level?: number;
                struggle_factor?: number;
                piggy_full?: boolean;
                piggy_found_full?: boolean;
                time_piggy_full_realtime?: number;
                time_piggy_full_gametime?: number;
                lost_piggy_increments?: number;
                sale_id?: string;
                unlimited_chickens_uses?: number;
                refill_uses?: number;
                short_warp_uses?: number;
                long_warp_uses?: number;
            } = {};
            if (this.version_str != null) {
                data.version_str = this.version_str;
            }
            if (this.sessions != null) {
                data.sessions = this.sessions;
            }
            if (this.num_prestiges != null) {
                data.num_prestiges = this.num_prestiges;
            }
            if (this.soul_eggs != null) {
                data.soul_eggs = this.soul_eggs;
            }
            if (this.current_egg != null) {
                data.current_egg = this.current_egg;
            }
            if (this.gold_earned != null) {
                data.gold_earned = this.gold_earned;
            }
            if (this.gold_spent != null) {
                data.gold_spent = this.gold_spent;
            }
            if (this.current_mission != null) {
                data.current_mission = this.current_mission;
            }
            if (this.piggy_size != null) {
                data.piggy_size = this.piggy_size;
            }
            if (this.num_piggy_breaks != null) {
                data.num_piggy_breaks = this.num_piggy_breaks;
            }
            if (this.verified_piggy_breaks != null) {
                data.verified_piggy_breaks = this.verified_piggy_breaks;
            }
            if (this.iap_packs_purchased != null) {
                data.iap_packs_purchased = this.iap_packs_purchased;
            }
            if (this.permit_level != null) {
                data.permit_level = this.permit_level;
            }
            if (this.video_doubler_uses != null) {
                data.video_doubler_uses = this.video_doubler_uses;
            }
            if (this.drone_takedowns != null) {
                data.drone_takedowns = this.drone_takedowns;
            }
            if (this.drone_takedowns_elite != null) {
                data.drone_takedowns_elite = this.drone_takedowns_elite;
            }
            if (this.trophies_unlocked != null) {
                data.trophies_unlocked = this.trophies_unlocked;
            }
            if (this.egg_level != null) {
                data.egg_level = this.egg_level;
            }
            if (this.struggle_factor != null) {
                data.struggle_factor = this.struggle_factor;
            }
            if (this.piggy_full != null) {
                data.piggy_full = this.piggy_full;
            }
            if (this.piggy_found_full != null) {
                data.piggy_found_full = this.piggy_found_full;
            }
            if (this.time_piggy_full_realtime != null) {
                data.time_piggy_full_realtime = this.time_piggy_full_realtime;
            }
            if (this.time_piggy_full_gametime != null) {
                data.time_piggy_full_gametime = this.time_piggy_full_gametime;
            }
            if (this.lost_piggy_increments != null) {
                data.lost_piggy_increments = this.lost_piggy_increments;
            }
            if (this.sale_id != null) {
                data.sale_id = this.sale_id;
            }
            if (this.unlimited_chickens_uses != null) {
                data.unlimited_chickens_uses = this.unlimited_chickens_uses;
            }
            if (this.refill_uses != null) {
                data.refill_uses = this.refill_uses;
            }
            if (this.short_warp_uses != null) {
                data.short_warp_uses = this.short_warp_uses;
            }
            if (this.long_warp_uses != null) {
                data.long_warp_uses = this.long_warp_uses;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_version_str && this.version_str.length)
                writer.writeString(1, this.version_str);
            if (this.has_sessions)
                writer.writeUint32(2, this.sessions);
            if (this.has_num_prestiges)
                writer.writeUint32(3, this.num_prestiges);
            if (this.has_soul_eggs)
                writer.writeUint64(4, this.soul_eggs);
            if (this.has_current_egg)
                writer.writeUint32(5, this.current_egg);
            if (this.has_gold_earned)
                writer.writeUint64(6, this.gold_earned);
            if (this.has_gold_spent)
                writer.writeUint64(7, this.gold_spent);
            if (this.has_current_mission)
                writer.writeUint32(8, this.current_mission);
            if (this.has_piggy_size)
                writer.writeUint32(9, this.piggy_size);
            if (this.has_num_piggy_breaks)
                writer.writeUint64(10, this.num_piggy_breaks);
            if (this.has_verified_piggy_breaks)
                writer.writeUint64(29, this.verified_piggy_breaks);
            if (this.has_iap_packs_purchased)
                writer.writeUint64(11, this.iap_packs_purchased);
            if (this.has_permit_level)
                writer.writeUint32(12, this.permit_level);
            if (this.has_video_doubler_uses)
                writer.writeUint64(15, this.video_doubler_uses);
            if (this.has_drone_takedowns)
                writer.writeUint64(18, this.drone_takedowns);
            if (this.has_drone_takedowns_elite)
                writer.writeUint64(19, this.drone_takedowns_elite);
            if (this.has_trophies_unlocked)
                writer.writeBool(20, this.trophies_unlocked);
            if (this.has_egg_level)
                writer.writeFloat(21, this.egg_level);
            if (this.has_struggle_factor)
                writer.writeFloat(22, this.struggle_factor);
            if (this.has_piggy_full)
                writer.writeBool(23, this.piggy_full);
            if (this.has_piggy_found_full)
                writer.writeBool(24, this.piggy_found_full);
            if (this.has_time_piggy_full_realtime)
                writer.writeDouble(25, this.time_piggy_full_realtime);
            if (this.has_time_piggy_full_gametime)
                writer.writeDouble(26, this.time_piggy_full_gametime);
            if (this.has_lost_piggy_increments)
                writer.writeUint64(27, this.lost_piggy_increments);
            if (this.has_sale_id && this.sale_id.length)
                writer.writeString(28, this.sale_id);
            if (this.has_unlimited_chickens_uses)
                writer.writeUint64(13, this.unlimited_chickens_uses);
            if (this.has_refill_uses)
                writer.writeUint64(14, this.refill_uses);
            if (this.has_short_warp_uses)
                writer.writeUint64(16, this.short_warp_uses);
            if (this.has_long_warp_uses)
                writer.writeUint64(17, this.long_warp_uses);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AppInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AppInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.version_str = reader.readString();
                        break;
                    case 2:
                        message.sessions = reader.readUint32();
                        break;
                    case 3:
                        message.num_prestiges = reader.readUint32();
                        break;
                    case 4:
                        message.soul_eggs = reader.readUint64();
                        break;
                    case 5:
                        message.current_egg = reader.readUint32();
                        break;
                    case 6:
                        message.gold_earned = reader.readUint64();
                        break;
                    case 7:
                        message.gold_spent = reader.readUint64();
                        break;
                    case 8:
                        message.current_mission = reader.readUint32();
                        break;
                    case 9:
                        message.piggy_size = reader.readUint32();
                        break;
                    case 10:
                        message.num_piggy_breaks = reader.readUint64();
                        break;
                    case 29:
                        message.verified_piggy_breaks = reader.readUint64();
                        break;
                    case 11:
                        message.iap_packs_purchased = reader.readUint64();
                        break;
                    case 12:
                        message.permit_level = reader.readUint32();
                        break;
                    case 15:
                        message.video_doubler_uses = reader.readUint64();
                        break;
                    case 18:
                        message.drone_takedowns = reader.readUint64();
                        break;
                    case 19:
                        message.drone_takedowns_elite = reader.readUint64();
                        break;
                    case 20:
                        message.trophies_unlocked = reader.readBool();
                        break;
                    case 21:
                        message.egg_level = reader.readFloat();
                        break;
                    case 22:
                        message.struggle_factor = reader.readFloat();
                        break;
                    case 23:
                        message.piggy_full = reader.readBool();
                        break;
                    case 24:
                        message.piggy_found_full = reader.readBool();
                        break;
                    case 25:
                        message.time_piggy_full_realtime = reader.readDouble();
                        break;
                    case 26:
                        message.time_piggy_full_gametime = reader.readDouble();
                        break;
                    case 27:
                        message.lost_piggy_increments = reader.readUint64();
                        break;
                    case 28:
                        message.sale_id = reader.readString();
                        break;
                    case 13:
                        message.unlimited_chickens_uses = reader.readUint64();
                        break;
                    case 14:
                        message.refill_uses = reader.readUint64();
                        break;
                    case 16:
                        message.short_warp_uses = reader.readUint64();
                        break;
                    case 17:
                        message.long_warp_uses = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AppInfo {
            return AppInfo.deserialize(bytes);
        }
    }
    export class ActionKeyValuePair extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key: string;
            value: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.key = data.key;
                this.value = data.value;
            }
        }
        get key() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_key() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get value() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            key?: string;
            value?: string;
        }): ActionKeyValuePair {
            const message = new ActionKeyValuePair({
                key: data.key,
                value: data.value
            });
            return message;
        }
        toObject() {
            const data: {
                key?: string;
                value?: string;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_key && this.key.length)
                writer.writeString(1, this.key);
            if (this.has_value && this.value.length)
                writer.writeString(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActionKeyValuePair {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActionKeyValuePair();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActionKeyValuePair {
            return ActionKeyValuePair.deserialize(bytes);
        }
    }
    export class GenericAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            cc_user?: boolean;
            advertising_id?: string;
            approx_time_DEP?: number;
            approx_time?: number;
            action_name?: string;
            data: ActionKeyValuePair[];
            app?: AppInfo;
            device?: DeviceInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("cc_user" in data && data.cc_user != undefined) {
                    this.cc_user = data.cc_user;
                }
                if ("advertising_id" in data && data.advertising_id != undefined) {
                    this.advertising_id = data.advertising_id;
                }
                if ("approx_time_DEP" in data && data.approx_time_DEP != undefined) {
                    this.approx_time_DEP = data.approx_time_DEP;
                }
                if ("approx_time" in data && data.approx_time != undefined) {
                    this.approx_time = data.approx_time;
                }
                if ("action_name" in data && data.action_name != undefined) {
                    this.action_name = data.action_name;
                }
                this.data = data.data;
                if ("app" in data && data.app != undefined) {
                    this.app = data.app;
                }
                if ("device" in data && data.device != undefined) {
                    this.device = data.device;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get cc_user() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set cc_user(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_cc_user() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get advertising_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set advertising_id(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_advertising_id() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get approx_time_DEP() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set approx_time_DEP(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_approx_time_DEP() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get approx_time() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set approx_time(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_approx_time() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get action_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set action_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_action_name() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, ActionKeyValuePair, 4) as ActionKeyValuePair[];
        }
        set data(value: ActionKeyValuePair[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get app() {
            return pb_1.Message.getWrapperField(this, AppInfo, 5) as AppInfo;
        }
        set app(value: AppInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_app() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get device() {
            return pb_1.Message.getWrapperField(this, DeviceInfo, 6) as DeviceInfo;
        }
        set device(value: DeviceInfo) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_device() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            user_id?: string;
            cc_user?: boolean;
            advertising_id?: string;
            approx_time_DEP?: number;
            approx_time?: number;
            action_name?: string;
            data?: ReturnType<typeof ActionKeyValuePair.prototype.toObject>[];
            app?: ReturnType<typeof AppInfo.prototype.toObject>;
            device?: ReturnType<typeof DeviceInfo.prototype.toObject>;
        }): GenericAction {
            const message = new GenericAction({
                data: data.data.map(item => ActionKeyValuePair.fromObject(item))
            });
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.cc_user != null) {
                message.cc_user = data.cc_user;
            }
            if (data.advertising_id != null) {
                message.advertising_id = data.advertising_id;
            }
            if (data.approx_time_DEP != null) {
                message.approx_time_DEP = data.approx_time_DEP;
            }
            if (data.approx_time != null) {
                message.approx_time = data.approx_time;
            }
            if (data.action_name != null) {
                message.action_name = data.action_name;
            }
            if (data.app != null) {
                message.app = AppInfo.fromObject(data.app);
            }
            if (data.device != null) {
                message.device = DeviceInfo.fromObject(data.device);
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                cc_user?: boolean;
                advertising_id?: string;
                approx_time_DEP?: number;
                approx_time?: number;
                action_name?: string;
                data?: ReturnType<typeof ActionKeyValuePair.prototype.toObject>[];
                app?: ReturnType<typeof AppInfo.prototype.toObject>;
                device?: ReturnType<typeof DeviceInfo.prototype.toObject>;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.cc_user != null) {
                data.cc_user = this.cc_user;
            }
            if (this.advertising_id != null) {
                data.advertising_id = this.advertising_id;
            }
            if (this.approx_time_DEP != null) {
                data.approx_time_DEP = this.approx_time_DEP;
            }
            if (this.approx_time != null) {
                data.approx_time = this.approx_time;
            }
            if (this.action_name != null) {
                data.action_name = this.action_name;
            }
            if (this.data != null) {
                data.data = this.data.map((item: ActionKeyValuePair) => item.toObject());
            }
            if (this.app != null) {
                data.app = this.app.toObject();
            }
            if (this.device != null) {
                data.device = this.device.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user_id && this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_cc_user)
                writer.writeBool(9, this.cc_user);
            if (this.has_advertising_id && this.advertising_id.length)
                writer.writeString(7, this.advertising_id);
            if (this.has_approx_time_DEP)
                writer.writeFloat(2, this.approx_time_DEP);
            if (this.has_approx_time)
                writer.writeDouble(8, this.approx_time);
            if (this.has_action_name && this.action_name.length)
                writer.writeString(3, this.action_name);
            if (this.data.length)
                writer.writeRepeatedMessage(4, this.data, (item: ActionKeyValuePair) => item.serialize(writer));
            if (this.has_app)
                writer.writeMessage(5, this.app, () => this.app.serialize(writer));
            if (this.has_device)
                writer.writeMessage(6, this.device, () => this.device.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenericAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenericAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 9:
                        message.cc_user = reader.readBool();
                        break;
                    case 7:
                        message.advertising_id = reader.readString();
                        break;
                    case 2:
                        message.approx_time_DEP = reader.readFloat();
                        break;
                    case 8:
                        message.approx_time = reader.readDouble();
                        break;
                    case 3:
                        message.action_name = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ActionKeyValuePair.deserialize(reader), ActionKeyValuePair));
                        break;
                    case 5:
                        reader.readMessage(message.app, () => message.app = AppInfo.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.device, () => message.device = DeviceInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenericAction {
            return GenericAction.deserialize(bytes);
        }
    }
    export class GenericActionBatchRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            actions: GenericAction[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                this.actions = data.actions;
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 1) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get actions() {
            return pb_1.Message.getRepeatedWrapperField(this, GenericAction, 2) as GenericAction[];
        }
        set actions(value: GenericAction[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            actions?: ReturnType<typeof GenericAction.prototype.toObject>[];
        }): GenericActionBatchRequest {
            const message = new GenericActionBatchRequest({
                actions: data.actions.map(item => GenericAction.fromObject(item))
            });
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                actions?: ReturnType<typeof GenericAction.prototype.toObject>[];
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.actions != null) {
                data.actions = this.actions.map((item: GenericAction) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(1, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.actions.length)
                writer.writeRepeatedMessage(2, this.actions, (item: GenericAction) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenericActionBatchRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenericActionBatchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.actions, () => pb_1.Message.addToRepeatedWrapperField(message, 2, GenericAction.deserialize(reader), GenericAction));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenericActionBatchRequest {
            return GenericActionBatchRequest.deserialize(bytes);
        }
    }
    export class VerifyPurchaseRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            sku?: string;
            transaction_id?: string;
            original_transaction_id?: string;
            receipt?: string;
            platform?: string;
            sandbox?: boolean;
            log?: GenericAction;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("sku" in data && data.sku != undefined) {
                    this.sku = data.sku;
                }
                if ("transaction_id" in data && data.transaction_id != undefined) {
                    this.transaction_id = data.transaction_id;
                }
                if ("original_transaction_id" in data && data.original_transaction_id != undefined) {
                    this.original_transaction_id = data.original_transaction_id;
                }
                if ("receipt" in data && data.receipt != undefined) {
                    this.receipt = data.receipt;
                }
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
                if ("sandbox" in data && data.sandbox != undefined) {
                    this.sandbox = data.sandbox;
                }
                if ("log" in data && data.log != undefined) {
                    this.log = data.log;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 6) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get sku() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sku(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_sku() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get transaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set transaction_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_transaction_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get original_transaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set original_transaction_id(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_original_transaction_id() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get receipt() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set receipt(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_receipt() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set platform(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_platform() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get sandbox() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set sandbox(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_sandbox() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get log() {
            return pb_1.Message.getWrapperField(this, GenericAction, 5) as GenericAction;
        }
        set log(value: GenericAction) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_log() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            sku?: string;
            transaction_id?: string;
            original_transaction_id?: string;
            receipt?: string;
            platform?: string;
            sandbox?: boolean;
            log?: ReturnType<typeof GenericAction.prototype.toObject>;
        }): VerifyPurchaseRequest {
            const message = new VerifyPurchaseRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.sku != null) {
                message.sku = data.sku;
            }
            if (data.transaction_id != null) {
                message.transaction_id = data.transaction_id;
            }
            if (data.original_transaction_id != null) {
                message.original_transaction_id = data.original_transaction_id;
            }
            if (data.receipt != null) {
                message.receipt = data.receipt;
            }
            if (data.platform != null) {
                message.platform = data.platform;
            }
            if (data.sandbox != null) {
                message.sandbox = data.sandbox;
            }
            if (data.log != null) {
                message.log = GenericAction.fromObject(data.log);
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                sku?: string;
                transaction_id?: string;
                original_transaction_id?: string;
                receipt?: string;
                platform?: string;
                sandbox?: boolean;
                log?: ReturnType<typeof GenericAction.prototype.toObject>;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.sku != null) {
                data.sku = this.sku;
            }
            if (this.transaction_id != null) {
                data.transaction_id = this.transaction_id;
            }
            if (this.original_transaction_id != null) {
                data.original_transaction_id = this.original_transaction_id;
            }
            if (this.receipt != null) {
                data.receipt = this.receipt;
            }
            if (this.platform != null) {
                data.platform = this.platform;
            }
            if (this.sandbox != null) {
                data.sandbox = this.sandbox;
            }
            if (this.log != null) {
                data.log = this.log.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(6, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_sku && this.sku.length)
                writer.writeString(1, this.sku);
            if (this.has_transaction_id && this.transaction_id.length)
                writer.writeString(2, this.transaction_id);
            if (this.has_original_transaction_id && this.original_transaction_id.length)
                writer.writeString(8, this.original_transaction_id);
            if (this.has_receipt && this.receipt.length)
                writer.writeString(3, this.receipt);
            if (this.has_platform && this.platform.length)
                writer.writeString(4, this.platform);
            if (this.has_sandbox)
                writer.writeBool(7, this.sandbox);
            if (this.has_log)
                writer.writeMessage(5, this.log, () => this.log.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyPurchaseRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyPurchaseRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 6:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.sku = reader.readString();
                        break;
                    case 2:
                        message.transaction_id = reader.readString();
                        break;
                    case 8:
                        message.original_transaction_id = reader.readString();
                        break;
                    case 3:
                        message.receipt = reader.readString();
                        break;
                    case 4:
                        message.platform = reader.readString();
                        break;
                    case 7:
                        message.sandbox = reader.readBool();
                        break;
                    case 5:
                        reader.readMessage(message.log, () => message.log = GenericAction.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyPurchaseRequest {
            return VerifyPurchaseRequest.deserialize(bytes);
        }
    }
    export class VerifyPurchaseResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            verified?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("verified" in data && data.verified != undefined) {
                    this.verified = data.verified;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get verified() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set verified(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_verified() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            verified?: boolean;
            message?: string;
        }): VerifyPurchaseResponse {
            const message = new VerifyPurchaseResponse({});
            if (data.verified != null) {
                message.verified = data.verified;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                verified?: boolean;
                message?: string;
            } = {};
            if (this.verified != null) {
                data.verified = this.verified;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_verified)
                writer.writeBool(1, this.verified);
            if (this.has_message && this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyPurchaseResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyPurchaseResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.verified = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyPurchaseResponse {
            return VerifyPurchaseResponse.deserialize(bytes);
        }
    }
    export class CurrencyFlowLog extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            approx_time?: number;
            currency?: RewardType;
            amount?: number;
            location?: string;
            version?: string;
            platform?: string;
            soul_eggs?: number;
            tickets_spent?: number;
            gold_spent?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("approx_time" in data && data.approx_time != undefined) {
                    this.approx_time = data.approx_time;
                }
                if ("currency" in data && data.currency != undefined) {
                    this.currency = data.currency;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("location" in data && data.location != undefined) {
                    this.location = data.location;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
                if ("soul_eggs" in data && data.soul_eggs != undefined) {
                    this.soul_eggs = data.soul_eggs;
                }
                if ("tickets_spent" in data && data.tickets_spent != undefined) {
                    this.tickets_spent = data.tickets_spent;
                }
                if ("gold_spent" in data && data.gold_spent != undefined) {
                    this.gold_spent = data.gold_spent;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get approx_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set approx_time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_approx_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get currency() {
            return pb_1.Message.getFieldWithDefault(this, 3, RewardType.CASH) as RewardType;
        }
        set currency(value: RewardType) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_currency() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get location() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set location(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_location() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_version() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set platform(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_platform() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get soul_eggs() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set soul_eggs(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_soul_eggs() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get tickets_spent() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set tickets_spent(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_tickets_spent() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get gold_spent() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set gold_spent(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_gold_spent() {
            return pb_1.Message.getField(this, 10) != null;
        }
        static fromObject(data: {
            user_id?: string;
            approx_time?: number;
            currency?: RewardType;
            amount?: number;
            location?: string;
            version?: string;
            platform?: string;
            soul_eggs?: number;
            tickets_spent?: number;
            gold_spent?: number;
        }): CurrencyFlowLog {
            const message = new CurrencyFlowLog({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.approx_time != null) {
                message.approx_time = data.approx_time;
            }
            if (data.currency != null) {
                message.currency = data.currency;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.location != null) {
                message.location = data.location;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.platform != null) {
                message.platform = data.platform;
            }
            if (data.soul_eggs != null) {
                message.soul_eggs = data.soul_eggs;
            }
            if (data.tickets_spent != null) {
                message.tickets_spent = data.tickets_spent;
            }
            if (data.gold_spent != null) {
                message.gold_spent = data.gold_spent;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                approx_time?: number;
                currency?: RewardType;
                amount?: number;
                location?: string;
                version?: string;
                platform?: string;
                soul_eggs?: number;
                tickets_spent?: number;
                gold_spent?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.approx_time != null) {
                data.approx_time = this.approx_time;
            }
            if (this.currency != null) {
                data.currency = this.currency;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.location != null) {
                data.location = this.location;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.platform != null) {
                data.platform = this.platform;
            }
            if (this.soul_eggs != null) {
                data.soul_eggs = this.soul_eggs;
            }
            if (this.tickets_spent != null) {
                data.tickets_spent = this.tickets_spent;
            }
            if (this.gold_spent != null) {
                data.gold_spent = this.gold_spent;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user_id && this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_approx_time)
                writer.writeDouble(2, this.approx_time);
            if (this.has_currency)
                writer.writeEnum(3, this.currency);
            if (this.has_amount)
                writer.writeInt64(4, this.amount);
            if (this.has_location && this.location.length)
                writer.writeString(5, this.location);
            if (this.has_version && this.version.length)
                writer.writeString(6, this.version);
            if (this.has_platform && this.platform.length)
                writer.writeString(7, this.platform);
            if (this.has_soul_eggs)
                writer.writeDouble(8, this.soul_eggs);
            if (this.has_tickets_spent)
                writer.writeUint64(9, this.tickets_spent);
            if (this.has_gold_spent)
                writer.writeUint64(10, this.gold_spent);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CurrencyFlowLog {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CurrencyFlowLog();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.approx_time = reader.readDouble();
                        break;
                    case 3:
                        message.currency = reader.readEnum();
                        break;
                    case 4:
                        message.amount = reader.readInt64();
                        break;
                    case 5:
                        message.location = reader.readString();
                        break;
                    case 6:
                        message.version = reader.readString();
                        break;
                    case 7:
                        message.platform = reader.readString();
                        break;
                    case 8:
                        message.soul_eggs = reader.readDouble();
                        break;
                    case 9:
                        message.tickets_spent = reader.readUint64();
                        break;
                    case 10:
                        message.gold_spent = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CurrencyFlowLog {
            return CurrencyFlowLog.deserialize(bytes);
        }
    }
    export class CurrencyFlowBatchRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            logs: CurrencyFlowLog[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                this.logs = data.logs;
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 2) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get logs() {
            return pb_1.Message.getRepeatedWrapperField(this, CurrencyFlowLog, 1) as CurrencyFlowLog[];
        }
        set logs(value: CurrencyFlowLog[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            logs?: ReturnType<typeof CurrencyFlowLog.prototype.toObject>[];
        }): CurrencyFlowBatchRequest {
            const message = new CurrencyFlowBatchRequest({
                logs: data.logs.map(item => CurrencyFlowLog.fromObject(item))
            });
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                logs?: ReturnType<typeof CurrencyFlowLog.prototype.toObject>[];
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.logs != null) {
                data.logs = this.logs.map((item: CurrencyFlowLog) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(2, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.logs.length)
                writer.writeRepeatedMessage(1, this.logs, (item: CurrencyFlowLog) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CurrencyFlowBatchRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CurrencyFlowBatchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        reader.readMessage(message.logs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CurrencyFlowLog.deserialize(reader), CurrencyFlowLog));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CurrencyFlowBatchRequest {
            return CurrencyFlowBatchRequest.deserialize(bytes);
        }
    }
    export class Reward extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reward_type?: RewardType;
            reward_sub_type?: string;
            reward_amount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reward_type" in data && data.reward_type != undefined) {
                    this.reward_type = data.reward_type;
                }
                if ("reward_sub_type" in data && data.reward_sub_type != undefined) {
                    this.reward_sub_type = data.reward_sub_type;
                }
                if ("reward_amount" in data && data.reward_amount != undefined) {
                    this.reward_amount = data.reward_amount;
                }
            }
        }
        get reward_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, RewardType.CASH) as RewardType;
        }
        set reward_type(value: RewardType) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_reward_type() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get reward_sub_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set reward_sub_type(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_reward_sub_type() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get reward_amount() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set reward_amount(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_reward_amount() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            reward_type?: RewardType;
            reward_sub_type?: string;
            reward_amount?: number;
        }): Reward {
            const message = new Reward({});
            if (data.reward_type != null) {
                message.reward_type = data.reward_type;
            }
            if (data.reward_sub_type != null) {
                message.reward_sub_type = data.reward_sub_type;
            }
            if (data.reward_amount != null) {
                message.reward_amount = data.reward_amount;
            }
            return message;
        }
        toObject() {
            const data: {
                reward_type?: RewardType;
                reward_sub_type?: string;
                reward_amount?: number;
            } = {};
            if (this.reward_type != null) {
                data.reward_type = this.reward_type;
            }
            if (this.reward_sub_type != null) {
                data.reward_sub_type = this.reward_sub_type;
            }
            if (this.reward_amount != null) {
                data.reward_amount = this.reward_amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_reward_type)
                writer.writeEnum(1, this.reward_type);
            if (this.has_reward_sub_type && this.reward_sub_type.length)
                writer.writeString(2, this.reward_sub_type);
            if (this.has_reward_amount)
                writer.writeDouble(3, this.reward_amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Reward {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Reward();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.reward_type = reader.readEnum();
                        break;
                    case 2:
                        message.reward_sub_type = reader.readString();
                        break;
                    case 3:
                        message.reward_amount = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Reward {
            return Reward.deserialize(bytes);
        }
    }
    export class GameModifier extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            dimension?: GameModifier.GameDimension;
            value?: number;
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("dimension" in data && data.dimension != undefined) {
                    this.dimension = data.dimension;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get dimension() {
            return pb_1.Message.getFieldWithDefault(this, 1, GameModifier.GameDimension.INVALID) as GameModifier.GameDimension;
        }
        set dimension(value: GameModifier.GameDimension) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_dimension() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            dimension?: GameModifier.GameDimension;
            value?: number;
            description?: string;
        }): GameModifier {
            const message = new GameModifier({});
            if (data.dimension != null) {
                message.dimension = data.dimension;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                dimension?: GameModifier.GameDimension;
                value?: number;
                description?: string;
            } = {};
            if (this.dimension != null) {
                data.dimension = this.dimension;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_dimension)
                writer.writeEnum(1, this.dimension);
            if (this.has_value)
                writer.writeDouble(2, this.value);
            if (this.has_description && this.description.length)
                writer.writeString(3, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameModifier {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameModifier();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.dimension = reader.readEnum();
                        break;
                    case 2:
                        message.value = reader.readDouble();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameModifier {
            return GameModifier.deserialize(bytes);
        }
    }
    export namespace GameModifier {
        export enum GameDimension {
            INVALID = 0,
            EARNINGS = 1,
            AWAY_EARNINGS = 2,
            INTERNAL_HATCHERY_RATE = 3,
            EGG_LAYING_RATE = 4,
            SHIPPING_CAPACITY = 5,
            HAB_CAPACITY = 6,
            VEHICLE_COST = 7,
            HAB_COST = 8,
            RESEARCH_COST = 9
        }
    }
    export class CustomEgg extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            identifier?: string;
            name?: string;
            description?: string;
            value?: number;
            hatchery_id?: string;
            hatchery_max_x?: number;
            icon?: DLCItem;
            icon_width?: number;
            icon_height?: number;
            buffs: GameModifier[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("identifier" in data && data.identifier != undefined) {
                    this.identifier = data.identifier;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("hatchery_id" in data && data.hatchery_id != undefined) {
                    this.hatchery_id = data.hatchery_id;
                }
                if ("hatchery_max_x" in data && data.hatchery_max_x != undefined) {
                    this.hatchery_max_x = data.hatchery_max_x;
                }
                if ("icon" in data && data.icon != undefined) {
                    this.icon = data.icon;
                }
                if ("icon_width" in data && data.icon_width != undefined) {
                    this.icon_width = data.icon_width;
                }
                if ("icon_height" in data && data.icon_height != undefined) {
                    this.icon_height = data.icon_height;
                }
                this.buffs = data.buffs;
            }
        }
        get identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get hatchery_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set hatchery_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_hatchery_id() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get hatchery_max_x() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set hatchery_max_x(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_hatchery_max_x() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get icon() {
            return pb_1.Message.getWrapperField(this, DLCItem, 7) as DLCItem;
        }
        set icon(value: DLCItem) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_icon() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get icon_width() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set icon_width(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get has_icon_width() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get icon_height() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set icon_height(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        get has_icon_height() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get buffs() {
            return pb_1.Message.getRepeatedWrapperField(this, GameModifier, 8) as GameModifier[];
        }
        set buffs(value: GameModifier[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        static fromObject(data: {
            identifier?: string;
            name?: string;
            description?: string;
            value?: number;
            hatchery_id?: string;
            hatchery_max_x?: number;
            icon?: ReturnType<typeof DLCItem.prototype.toObject>;
            icon_width?: number;
            icon_height?: number;
            buffs?: ReturnType<typeof GameModifier.prototype.toObject>[];
        }): CustomEgg {
            const message = new CustomEgg({
                buffs: data.buffs.map(item => GameModifier.fromObject(item))
            });
            if (data.identifier != null) {
                message.identifier = data.identifier;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.hatchery_id != null) {
                message.hatchery_id = data.hatchery_id;
            }
            if (data.hatchery_max_x != null) {
                message.hatchery_max_x = data.hatchery_max_x;
            }
            if (data.icon != null) {
                message.icon = DLCItem.fromObject(data.icon);
            }
            if (data.icon_width != null) {
                message.icon_width = data.icon_width;
            }
            if (data.icon_height != null) {
                message.icon_height = data.icon_height;
            }
            return message;
        }
        toObject() {
            const data: {
                identifier?: string;
                name?: string;
                description?: string;
                value?: number;
                hatchery_id?: string;
                hatchery_max_x?: number;
                icon?: ReturnType<typeof DLCItem.prototype.toObject>;
                icon_width?: number;
                icon_height?: number;
                buffs?: ReturnType<typeof GameModifier.prototype.toObject>[];
            } = {};
            if (this.identifier != null) {
                data.identifier = this.identifier;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.hatchery_id != null) {
                data.hatchery_id = this.hatchery_id;
            }
            if (this.hatchery_max_x != null) {
                data.hatchery_max_x = this.hatchery_max_x;
            }
            if (this.icon != null) {
                data.icon = this.icon.toObject();
            }
            if (this.icon_width != null) {
                data.icon_width = this.icon_width;
            }
            if (this.icon_height != null) {
                data.icon_height = this.icon_height;
            }
            if (this.buffs != null) {
                data.buffs = this.buffs.map((item: GameModifier) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_identifier && this.identifier.length)
                writer.writeString(1, this.identifier);
            if (this.has_name && this.name.length)
                writer.writeString(2, this.name);
            if (this.has_description && this.description.length)
                writer.writeString(3, this.description);
            if (this.has_value)
                writer.writeDouble(4, this.value);
            if (this.has_hatchery_id && this.hatchery_id.length)
                writer.writeString(5, this.hatchery_id);
            if (this.has_hatchery_max_x)
                writer.writeDouble(6, this.hatchery_max_x);
            if (this.has_icon)
                writer.writeMessage(7, this.icon, () => this.icon.serialize(writer));
            if (this.has_icon_width)
                writer.writeDouble(21, this.icon_width);
            if (this.has_icon_height)
                writer.writeDouble(22, this.icon_height);
            if (this.buffs.length)
                writer.writeRepeatedMessage(8, this.buffs, (item: GameModifier) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomEgg {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomEgg();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.identifier = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.value = reader.readDouble();
                        break;
                    case 5:
                        message.hatchery_id = reader.readString();
                        break;
                    case 6:
                        message.hatchery_max_x = reader.readDouble();
                        break;
                    case 7:
                        reader.readMessage(message.icon, () => message.icon = DLCItem.deserialize(reader));
                        break;
                    case 21:
                        message.icon_width = reader.readDouble();
                        break;
                    case 22:
                        message.icon_height = reader.readDouble();
                        break;
                    case 8:
                        reader.readMessage(message.buffs, () => pb_1.Message.addToRepeatedWrapperField(message, 8, GameModifier.deserialize(reader), GameModifier));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CustomEgg {
            return CustomEgg.deserialize(bytes);
        }
    }
    export class Contract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            identifier?: string;
            name?: string;
            description?: string;
            egg?: Egg;
            custom_egg_id?: string;
            goals: Contract.Goal[];
            goal_sets: Contract.GoalSet[];
            grade_specs: Contract.GradeSpec[];
            season_id?: string;
            coop_allowed?: boolean;
            max_coop_size?: number;
            max_boosts?: number;
            minutes_per_token?: number;
            chicken_run_cooldown_minutes?: number;
            start_time?: number;
            expiration_time?: number;
            length_seconds?: number;
            max_soul_eggs?: number;
            min_client_version?: number;
            leggacy?: boolean;
            cc_only?: boolean;
            default_shell_ids: string[];
            debug?: boolean;
            key?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 16, 20, 24], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("identifier" in data && data.identifier != undefined) {
                    this.identifier = data.identifier;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("egg" in data && data.egg != undefined) {
                    this.egg = data.egg;
                }
                if ("custom_egg_id" in data && data.custom_egg_id != undefined) {
                    this.custom_egg_id = data.custom_egg_id;
                }
                this.goals = data.goals;
                this.goal_sets = data.goal_sets;
                this.grade_specs = data.grade_specs;
                if ("season_id" in data && data.season_id != undefined) {
                    this.season_id = data.season_id;
                }
                if ("coop_allowed" in data && data.coop_allowed != undefined) {
                    this.coop_allowed = data.coop_allowed;
                }
                if ("max_coop_size" in data && data.max_coop_size != undefined) {
                    this.max_coop_size = data.max_coop_size;
                }
                if ("max_boosts" in data && data.max_boosts != undefined) {
                    this.max_boosts = data.max_boosts;
                }
                if ("minutes_per_token" in data && data.minutes_per_token != undefined) {
                    this.minutes_per_token = data.minutes_per_token;
                }
                if ("chicken_run_cooldown_minutes" in data && data.chicken_run_cooldown_minutes != undefined) {
                    this.chicken_run_cooldown_minutes = data.chicken_run_cooldown_minutes;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("expiration_time" in data && data.expiration_time != undefined) {
                    this.expiration_time = data.expiration_time;
                }
                if ("length_seconds" in data && data.length_seconds != undefined) {
                    this.length_seconds = data.length_seconds;
                }
                if ("max_soul_eggs" in data && data.max_soul_eggs != undefined) {
                    this.max_soul_eggs = data.max_soul_eggs;
                }
                if ("min_client_version" in data && data.min_client_version != undefined) {
                    this.min_client_version = data.min_client_version;
                }
                if ("leggacy" in data && data.leggacy != undefined) {
                    this.leggacy = data.leggacy;
                }
                if ("cc_only" in data && data.cc_only != undefined) {
                    this.cc_only = data.cc_only;
                }
                this.default_shell_ids = data.default_shell_ids;
                if ("debug" in data && data.debug != undefined) {
                    this.debug = data.debug;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
            }
        }
        get identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get egg() {
            return pb_1.Message.getFieldWithDefault(this, 2, Egg.EDIBLE) as Egg;
        }
        set egg(value: Egg) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_egg() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get custom_egg_id() {
            return pb_1.Message.getFieldWithDefault(this, 25, "") as string;
        }
        set custom_egg_id(value: string) {
            pb_1.Message.setField(this, 25, value);
        }
        get has_custom_egg_id() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get goals() {
            return pb_1.Message.getRepeatedWrapperField(this, Contract.Goal, 3) as Contract.Goal[];
        }
        set goals(value: Contract.Goal[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get goal_sets() {
            return pb_1.Message.getRepeatedWrapperField(this, Contract.GoalSet, 16) as Contract.GoalSet[];
        }
        set goal_sets(value: Contract.GoalSet[]) {
            pb_1.Message.setRepeatedWrapperField(this, 16, value);
        }
        get grade_specs() {
            return pb_1.Message.getRepeatedWrapperField(this, Contract.GradeSpec, 20) as Contract.GradeSpec[];
        }
        set grade_specs(value: Contract.GradeSpec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 20, value);
        }
        get season_id() {
            return pb_1.Message.getFieldWithDefault(this, 23, "") as string;
        }
        set season_id(value: string) {
            pb_1.Message.setField(this, 23, value);
        }
        get has_season_id() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get coop_allowed() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set coop_allowed(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_coop_allowed() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get max_coop_size() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set max_coop_size(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_max_coop_size() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get max_boosts() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set max_boosts(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_max_boosts() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get minutes_per_token() {
            return pb_1.Message.getFieldWithDefault(this, 15, 60) as number;
        }
        set minutes_per_token(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_minutes_per_token() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get chicken_run_cooldown_minutes() {
            return pb_1.Message.getFieldWithDefault(this, 18, 180) as number;
        }
        set chicken_run_cooldown_minutes(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get has_chicken_run_cooldown_minutes() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get expiration_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set expiration_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_expiration_time() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get length_seconds() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set length_seconds(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_length_seconds() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get max_soul_eggs() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set max_soul_eggs(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_max_soul_eggs() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get min_client_version() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set min_client_version(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_min_client_version() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get leggacy() {
            return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
        }
        set leggacy(value: boolean) {
            pb_1.Message.setField(this, 19, value);
        }
        get has_leggacy() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get cc_only() {
            return pb_1.Message.getFieldWithDefault(this, 22, false) as boolean;
        }
        set cc_only(value: boolean) {
            pb_1.Message.setField(this, 22, value);
        }
        get has_cc_only() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get default_shell_ids() {
            return pb_1.Message.getFieldWithDefault(this, 24, []) as string[];
        }
        set default_shell_ids(value: string[]) {
            pb_1.Message.setField(this, 24, value);
        }
        get debug() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set debug(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_debug() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get has_key() {
            return pb_1.Message.getField(this, 21) != null;
        }
        static fromObject(data: {
            identifier?: string;
            name?: string;
            description?: string;
            egg?: Egg;
            custom_egg_id?: string;
            goals?: ReturnType<typeof Contract.Goal.prototype.toObject>[];
            goal_sets?: ReturnType<typeof Contract.GoalSet.prototype.toObject>[];
            grade_specs?: ReturnType<typeof Contract.GradeSpec.prototype.toObject>[];
            season_id?: string;
            coop_allowed?: boolean;
            max_coop_size?: number;
            max_boosts?: number;
            minutes_per_token?: number;
            chicken_run_cooldown_minutes?: number;
            start_time?: number;
            expiration_time?: number;
            length_seconds?: number;
            max_soul_eggs?: number;
            min_client_version?: number;
            leggacy?: boolean;
            cc_only?: boolean;
            default_shell_ids: string[];
            debug?: boolean;
            key?: string;
        }): Contract {
            const message = new Contract({
                goals: data.goals.map(item => Contract.Goal.fromObject(item)),
                goal_sets: data.goal_sets.map(item => Contract.GoalSet.fromObject(item)),
                grade_specs: data.grade_specs.map(item => Contract.GradeSpec.fromObject(item)),
                default_shell_ids: data.default_shell_ids
            });
            if (data.identifier != null) {
                message.identifier = data.identifier;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.egg != null) {
                message.egg = data.egg;
            }
            if (data.custom_egg_id != null) {
                message.custom_egg_id = data.custom_egg_id;
            }
            if (data.season_id != null) {
                message.season_id = data.season_id;
            }
            if (data.coop_allowed != null) {
                message.coop_allowed = data.coop_allowed;
            }
            if (data.max_coop_size != null) {
                message.max_coop_size = data.max_coop_size;
            }
            if (data.max_boosts != null) {
                message.max_boosts = data.max_boosts;
            }
            if (data.minutes_per_token != null) {
                message.minutes_per_token = data.minutes_per_token;
            }
            if (data.chicken_run_cooldown_minutes != null) {
                message.chicken_run_cooldown_minutes = data.chicken_run_cooldown_minutes;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.expiration_time != null) {
                message.expiration_time = data.expiration_time;
            }
            if (data.length_seconds != null) {
                message.length_seconds = data.length_seconds;
            }
            if (data.max_soul_eggs != null) {
                message.max_soul_eggs = data.max_soul_eggs;
            }
            if (data.min_client_version != null) {
                message.min_client_version = data.min_client_version;
            }
            if (data.leggacy != null) {
                message.leggacy = data.leggacy;
            }
            if (data.cc_only != null) {
                message.cc_only = data.cc_only;
            }
            if (data.debug != null) {
                message.debug = data.debug;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            return message;
        }
        toObject() {
            const data: {
                identifier?: string;
                name?: string;
                description?: string;
                egg?: Egg;
                custom_egg_id?: string;
                goals?: ReturnType<typeof Contract.Goal.prototype.toObject>[];
                goal_sets?: ReturnType<typeof Contract.GoalSet.prototype.toObject>[];
                grade_specs?: ReturnType<typeof Contract.GradeSpec.prototype.toObject>[];
                season_id?: string;
                coop_allowed?: boolean;
                max_coop_size?: number;
                max_boosts?: number;
                minutes_per_token?: number;
                chicken_run_cooldown_minutes?: number;
                start_time?: number;
                expiration_time?: number;
                length_seconds?: number;
                max_soul_eggs?: number;
                min_client_version?: number;
                leggacy?: boolean;
                cc_only?: boolean;
                default_shell_ids: string[];
                debug?: boolean;
                key?: string;
            } = {
                default_shell_ids: this.default_shell_ids
            };
            if (this.identifier != null) {
                data.identifier = this.identifier;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.egg != null) {
                data.egg = this.egg;
            }
            if (this.custom_egg_id != null) {
                data.custom_egg_id = this.custom_egg_id;
            }
            if (this.goals != null) {
                data.goals = this.goals.map((item: Contract.Goal) => item.toObject());
            }
            if (this.goal_sets != null) {
                data.goal_sets = this.goal_sets.map((item: Contract.GoalSet) => item.toObject());
            }
            if (this.grade_specs != null) {
                data.grade_specs = this.grade_specs.map((item: Contract.GradeSpec) => item.toObject());
            }
            if (this.season_id != null) {
                data.season_id = this.season_id;
            }
            if (this.coop_allowed != null) {
                data.coop_allowed = this.coop_allowed;
            }
            if (this.max_coop_size != null) {
                data.max_coop_size = this.max_coop_size;
            }
            if (this.max_boosts != null) {
                data.max_boosts = this.max_boosts;
            }
            if (this.minutes_per_token != null) {
                data.minutes_per_token = this.minutes_per_token;
            }
            if (this.chicken_run_cooldown_minutes != null) {
                data.chicken_run_cooldown_minutes = this.chicken_run_cooldown_minutes;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.expiration_time != null) {
                data.expiration_time = this.expiration_time;
            }
            if (this.length_seconds != null) {
                data.length_seconds = this.length_seconds;
            }
            if (this.max_soul_eggs != null) {
                data.max_soul_eggs = this.max_soul_eggs;
            }
            if (this.min_client_version != null) {
                data.min_client_version = this.min_client_version;
            }
            if (this.leggacy != null) {
                data.leggacy = this.leggacy;
            }
            if (this.cc_only != null) {
                data.cc_only = this.cc_only;
            }
            if (this.debug != null) {
                data.debug = this.debug;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_identifier && this.identifier.length)
                writer.writeString(1, this.identifier);
            if (this.has_name && this.name.length)
                writer.writeString(9, this.name);
            if (this.has_description && this.description.length)
                writer.writeString(10, this.description);
            if (this.has_egg)
                writer.writeEnum(2, this.egg);
            if (this.has_custom_egg_id && this.custom_egg_id.length)
                writer.writeString(25, this.custom_egg_id);
            if (this.goals.length)
                writer.writeRepeatedMessage(3, this.goals, (item: Contract.Goal) => item.serialize(writer));
            if (this.goal_sets.length)
                writer.writeRepeatedMessage(16, this.goal_sets, (item: Contract.GoalSet) => item.serialize(writer));
            if (this.grade_specs.length)
                writer.writeRepeatedMessage(20, this.grade_specs, (item: Contract.GradeSpec) => item.serialize(writer));
            if (this.has_season_id && this.season_id.length)
                writer.writeString(23, this.season_id);
            if (this.has_coop_allowed)
                writer.writeBool(4, this.coop_allowed);
            if (this.has_max_coop_size)
                writer.writeUint32(5, this.max_coop_size);
            if (this.has_max_boosts)
                writer.writeUint32(12, this.max_boosts);
            if (this.has_minutes_per_token)
                writer.writeDouble(15, this.minutes_per_token);
            if (this.has_chicken_run_cooldown_minutes)
                writer.writeDouble(18, this.chicken_run_cooldown_minutes);
            if (this.has_start_time)
                writer.writeDouble(17, this.start_time);
            if (this.has_expiration_time)
                writer.writeDouble(6, this.expiration_time);
            if (this.has_length_seconds)
                writer.writeDouble(7, this.length_seconds);
            if (this.has_max_soul_eggs)
                writer.writeDouble(13, this.max_soul_eggs);
            if (this.has_min_client_version)
                writer.writeUint32(14, this.min_client_version);
            if (this.has_leggacy)
                writer.writeBool(19, this.leggacy);
            if (this.has_cc_only)
                writer.writeBool(22, this.cc_only);
            if (this.default_shell_ids.length)
                writer.writeRepeatedString(24, this.default_shell_ids);
            if (this.has_debug)
                writer.writeBool(11, this.debug);
            if (this.has_key && this.key.length)
                writer.writeString(21, this.key);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Contract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Contract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.identifier = reader.readString();
                        break;
                    case 9:
                        message.name = reader.readString();
                        break;
                    case 10:
                        message.description = reader.readString();
                        break;
                    case 2:
                        message.egg = reader.readEnum();
                        break;
                    case 25:
                        message.custom_egg_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.goals, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Contract.Goal.deserialize(reader), Contract.Goal));
                        break;
                    case 16:
                        reader.readMessage(message.goal_sets, () => pb_1.Message.addToRepeatedWrapperField(message, 16, Contract.GoalSet.deserialize(reader), Contract.GoalSet));
                        break;
                    case 20:
                        reader.readMessage(message.grade_specs, () => pb_1.Message.addToRepeatedWrapperField(message, 20, Contract.GradeSpec.deserialize(reader), Contract.GradeSpec));
                        break;
                    case 23:
                        message.season_id = reader.readString();
                        break;
                    case 4:
                        message.coop_allowed = reader.readBool();
                        break;
                    case 5:
                        message.max_coop_size = reader.readUint32();
                        break;
                    case 12:
                        message.max_boosts = reader.readUint32();
                        break;
                    case 15:
                        message.minutes_per_token = reader.readDouble();
                        break;
                    case 18:
                        message.chicken_run_cooldown_minutes = reader.readDouble();
                        break;
                    case 17:
                        message.start_time = reader.readDouble();
                        break;
                    case 6:
                        message.expiration_time = reader.readDouble();
                        break;
                    case 7:
                        message.length_seconds = reader.readDouble();
                        break;
                    case 13:
                        message.max_soul_eggs = reader.readDouble();
                        break;
                    case 14:
                        message.min_client_version = reader.readUint32();
                        break;
                    case 19:
                        message.leggacy = reader.readBool();
                        break;
                    case 22:
                        message.cc_only = reader.readBool();
                        break;
                    case 24:
                        pb_1.Message.addToRepeatedField(message, 24, reader.readString());
                        break;
                    case 11:
                        message.debug = reader.readBool();
                        break;
                    case 21:
                        message.key = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Contract {
            return Contract.deserialize(bytes);
        }
    }
    export namespace Contract {
        export enum PlayerGrade {
            GRADE_UNSET = 0,
            GRADE_C = 1,
            GRADE_B = 2,
            GRADE_A = 3,
            GRADE_AA = 4,
            GRADE_AAA = 5
        }
        export class Goal extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                type?: GoalType;
                target_amount?: number;
                reward_type?: RewardType;
                reward_sub_type?: string;
                reward_amount?: number;
                target_soul_eggs?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("type" in data && data.type != undefined) {
                        this.type = data.type;
                    }
                    if ("target_amount" in data && data.target_amount != undefined) {
                        this.target_amount = data.target_amount;
                    }
                    if ("reward_type" in data && data.reward_type != undefined) {
                        this.reward_type = data.reward_type;
                    }
                    if ("reward_sub_type" in data && data.reward_sub_type != undefined) {
                        this.reward_sub_type = data.reward_sub_type;
                    }
                    if ("reward_amount" in data && data.reward_amount != undefined) {
                        this.reward_amount = data.reward_amount;
                    }
                    if ("target_soul_eggs" in data && data.target_soul_eggs != undefined) {
                        this.target_soul_eggs = data.target_soul_eggs;
                    }
                }
            }
            get type() {
                return pb_1.Message.getFieldWithDefault(this, 1, GoalType.EGGS_LAID) as GoalType;
            }
            set type(value: GoalType) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_type() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get target_amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set target_amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_target_amount() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get reward_type() {
                return pb_1.Message.getFieldWithDefault(this, 3, RewardType.CASH) as RewardType;
            }
            set reward_type(value: RewardType) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_reward_type() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get reward_sub_type() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set reward_sub_type(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_reward_sub_type() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get reward_amount() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set reward_amount(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_reward_amount() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get target_soul_eggs() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set target_soul_eggs(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_target_soul_eggs() {
                return pb_1.Message.getField(this, 6) != null;
            }
            static fromObject(data: {
                type?: GoalType;
                target_amount?: number;
                reward_type?: RewardType;
                reward_sub_type?: string;
                reward_amount?: number;
                target_soul_eggs?: number;
            }): Goal {
                const message = new Goal({});
                if (data.type != null) {
                    message.type = data.type;
                }
                if (data.target_amount != null) {
                    message.target_amount = data.target_amount;
                }
                if (data.reward_type != null) {
                    message.reward_type = data.reward_type;
                }
                if (data.reward_sub_type != null) {
                    message.reward_sub_type = data.reward_sub_type;
                }
                if (data.reward_amount != null) {
                    message.reward_amount = data.reward_amount;
                }
                if (data.target_soul_eggs != null) {
                    message.target_soul_eggs = data.target_soul_eggs;
                }
                return message;
            }
            toObject() {
                const data: {
                    type?: GoalType;
                    target_amount?: number;
                    reward_type?: RewardType;
                    reward_sub_type?: string;
                    reward_amount?: number;
                    target_soul_eggs?: number;
                } = {};
                if (this.type != null) {
                    data.type = this.type;
                }
                if (this.target_amount != null) {
                    data.target_amount = this.target_amount;
                }
                if (this.reward_type != null) {
                    data.reward_type = this.reward_type;
                }
                if (this.reward_sub_type != null) {
                    data.reward_sub_type = this.reward_sub_type;
                }
                if (this.reward_amount != null) {
                    data.reward_amount = this.reward_amount;
                }
                if (this.target_soul_eggs != null) {
                    data.target_soul_eggs = this.target_soul_eggs;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_type)
                    writer.writeEnum(1, this.type);
                if (this.has_target_amount)
                    writer.writeDouble(2, this.target_amount);
                if (this.has_reward_type)
                    writer.writeEnum(3, this.reward_type);
                if (this.has_reward_sub_type && this.reward_sub_type.length)
                    writer.writeString(4, this.reward_sub_type);
                if (this.has_reward_amount)
                    writer.writeDouble(5, this.reward_amount);
                if (this.has_target_soul_eggs)
                    writer.writeDouble(6, this.target_soul_eggs);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Goal {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Goal();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.type = reader.readEnum();
                            break;
                        case 2:
                            message.target_amount = reader.readDouble();
                            break;
                        case 3:
                            message.reward_type = reader.readEnum();
                            break;
                        case 4:
                            message.reward_sub_type = reader.readString();
                            break;
                        case 5:
                            message.reward_amount = reader.readDouble();
                            break;
                        case 6:
                            message.target_soul_eggs = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Goal {
                return Goal.deserialize(bytes);
            }
        }
        export class GoalSet extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                goals: Contract.Goal[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    this.goals = data.goals;
                }
            }
            get goals() {
                return pb_1.Message.getRepeatedWrapperField(this, Contract.Goal, 1) as Contract.Goal[];
            }
            set goals(value: Contract.Goal[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            static fromObject(data: {
                goals?: ReturnType<typeof Contract.Goal.prototype.toObject>[];
            }): GoalSet {
                const message = new GoalSet({
                    goals: data.goals.map(item => Contract.Goal.fromObject(item))
                });
                return message;
            }
            toObject() {
                const data: {
                    goals?: ReturnType<typeof Contract.Goal.prototype.toObject>[];
                } = {};
                if (this.goals != null) {
                    data.goals = this.goals.map((item: Contract.Goal) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.goals.length)
                    writer.writeRepeatedMessage(1, this.goals, (item: Contract.Goal) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GoalSet {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GoalSet();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.goals, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Contract.Goal.deserialize(reader), Contract.Goal));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): GoalSet {
                return GoalSet.deserialize(bytes);
            }
        }
        export class GradeSpec extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                grade?: Contract.PlayerGrade;
                goals: Contract.Goal[];
                modifiers: GameModifier[];
                length_seconds?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("grade" in data && data.grade != undefined) {
                        this.grade = data.grade;
                    }
                    this.goals = data.goals;
                    this.modifiers = data.modifiers;
                    if ("length_seconds" in data && data.length_seconds != undefined) {
                        this.length_seconds = data.length_seconds;
                    }
                }
            }
            get grade() {
                return pb_1.Message.getFieldWithDefault(this, 1, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
            }
            set grade(value: Contract.PlayerGrade) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_grade() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get goals() {
                return pb_1.Message.getRepeatedWrapperField(this, Contract.Goal, 2) as Contract.Goal[];
            }
            set goals(value: Contract.Goal[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get modifiers() {
                return pb_1.Message.getRepeatedWrapperField(this, GameModifier, 3) as GameModifier[];
            }
            set modifiers(value: GameModifier[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            get length_seconds() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set length_seconds(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_length_seconds() {
                return pb_1.Message.getField(this, 4) != null;
            }
            static fromObject(data: {
                grade?: Contract.PlayerGrade;
                goals?: ReturnType<typeof Contract.Goal.prototype.toObject>[];
                modifiers?: ReturnType<typeof GameModifier.prototype.toObject>[];
                length_seconds?: number;
            }): GradeSpec {
                const message = new GradeSpec({
                    goals: data.goals.map(item => Contract.Goal.fromObject(item)),
                    modifiers: data.modifiers.map(item => GameModifier.fromObject(item))
                });
                if (data.grade != null) {
                    message.grade = data.grade;
                }
                if (data.length_seconds != null) {
                    message.length_seconds = data.length_seconds;
                }
                return message;
            }
            toObject() {
                const data: {
                    grade?: Contract.PlayerGrade;
                    goals?: ReturnType<typeof Contract.Goal.prototype.toObject>[];
                    modifiers?: ReturnType<typeof GameModifier.prototype.toObject>[];
                    length_seconds?: number;
                } = {};
                if (this.grade != null) {
                    data.grade = this.grade;
                }
                if (this.goals != null) {
                    data.goals = this.goals.map((item: Contract.Goal) => item.toObject());
                }
                if (this.modifiers != null) {
                    data.modifiers = this.modifiers.map((item: GameModifier) => item.toObject());
                }
                if (this.length_seconds != null) {
                    data.length_seconds = this.length_seconds;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_grade)
                    writer.writeEnum(1, this.grade);
                if (this.goals.length)
                    writer.writeRepeatedMessage(2, this.goals, (item: Contract.Goal) => item.serialize(writer));
                if (this.modifiers.length)
                    writer.writeRepeatedMessage(3, this.modifiers, (item: GameModifier) => item.serialize(writer));
                if (this.has_length_seconds)
                    writer.writeDouble(4, this.length_seconds);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GradeSpec {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GradeSpec();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.grade = reader.readEnum();
                            break;
                        case 2:
                            reader.readMessage(message.goals, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Contract.Goal.deserialize(reader), Contract.Goal));
                            break;
                        case 3:
                            reader.readMessage(message.modifiers, () => pb_1.Message.addToRepeatedWrapperField(message, 3, GameModifier.deserialize(reader), GameModifier));
                            break;
                        case 4:
                            message.length_seconds = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): GradeSpec {
                return GradeSpec.deserialize(bytes);
            }
        }
    }
    export class ContractPlayerInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            grade?: Contract.PlayerGrade;
            total_cxp?: number;
            season_cxp?: number;
            grade_score?: number;
            target_grade_score?: number;
            soul_power?: number;
            target_soul_power?: number;
            grade_progress?: number;
            issues: ContractEvaluation.PoorBehavior[];
            issue_score?: number;
            status?: ContractPlayerInfo.Status;
            last_evaluation_time?: number;
            last_evaluation_version?: string;
            unread_evaluations: ContractEvaluation[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                if ("total_cxp" in data && data.total_cxp != undefined) {
                    this.total_cxp = data.total_cxp;
                }
                if ("season_cxp" in data && data.season_cxp != undefined) {
                    this.season_cxp = data.season_cxp;
                }
                if ("grade_score" in data && data.grade_score != undefined) {
                    this.grade_score = data.grade_score;
                }
                if ("target_grade_score" in data && data.target_grade_score != undefined) {
                    this.target_grade_score = data.target_grade_score;
                }
                if ("soul_power" in data && data.soul_power != undefined) {
                    this.soul_power = data.soul_power;
                }
                if ("target_soul_power" in data && data.target_soul_power != undefined) {
                    this.target_soul_power = data.target_soul_power;
                }
                if ("grade_progress" in data && data.grade_progress != undefined) {
                    this.grade_progress = data.grade_progress;
                }
                this.issues = data.issues;
                if ("issue_score" in data && data.issue_score != undefined) {
                    this.issue_score = data.issue_score;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("last_evaluation_time" in data && data.last_evaluation_time != undefined) {
                    this.last_evaluation_time = data.last_evaluation_time;
                }
                if ("last_evaluation_version" in data && data.last_evaluation_version != undefined) {
                    this.last_evaluation_version = data.last_evaluation_version;
                }
                this.unread_evaluations = data.unread_evaluations;
            }
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 1, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
        }
        set grade(value: Contract.PlayerGrade) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_grade() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get total_cxp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_cxp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_total_cxp() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get season_cxp() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set season_cxp(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_season_cxp() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get grade_score() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set grade_score(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_grade_score() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get target_grade_score() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set target_grade_score(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_target_grade_score() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get soul_power() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set soul_power(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_soul_power() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get target_soul_power() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set target_soul_power(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_target_soul_power() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get grade_progress() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set grade_progress(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_grade_progress() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get issues() {
            return pb_1.Message.getFieldWithDefault(this, 11, []) as ContractEvaluation.PoorBehavior[];
        }
        set issues(value: ContractEvaluation.PoorBehavior[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get issue_score() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set issue_score(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_issue_score() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 3, ContractPlayerInfo.Status.UNKNOWN) as ContractPlayerInfo.Status;
        }
        set status(value: ContractPlayerInfo.Status) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get last_evaluation_time() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set last_evaluation_time(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_last_evaluation_time() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get last_evaluation_version() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set last_evaluation_version(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_last_evaluation_version() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get unread_evaluations() {
            return pb_1.Message.getRepeatedWrapperField(this, ContractEvaluation, 6) as ContractEvaluation[];
        }
        set unread_evaluations(value: ContractEvaluation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            grade?: Contract.PlayerGrade;
            total_cxp?: number;
            season_cxp?: number;
            grade_score?: number;
            target_grade_score?: number;
            soul_power?: number;
            target_soul_power?: number;
            grade_progress?: number;
            issues: ContractEvaluation.PoorBehavior[];
            issue_score?: number;
            status?: ContractPlayerInfo.Status;
            last_evaluation_time?: number;
            last_evaluation_version?: string;
            unread_evaluations?: ReturnType<typeof ContractEvaluation.prototype.toObject>[];
        }): ContractPlayerInfo {
            const message = new ContractPlayerInfo({
                issues: data.issues,
                unread_evaluations: data.unread_evaluations.map(item => ContractEvaluation.fromObject(item))
            });
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.total_cxp != null) {
                message.total_cxp = data.total_cxp;
            }
            if (data.season_cxp != null) {
                message.season_cxp = data.season_cxp;
            }
            if (data.grade_score != null) {
                message.grade_score = data.grade_score;
            }
            if (data.target_grade_score != null) {
                message.target_grade_score = data.target_grade_score;
            }
            if (data.soul_power != null) {
                message.soul_power = data.soul_power;
            }
            if (data.target_soul_power != null) {
                message.target_soul_power = data.target_soul_power;
            }
            if (data.grade_progress != null) {
                message.grade_progress = data.grade_progress;
            }
            if (data.issue_score != null) {
                message.issue_score = data.issue_score;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.last_evaluation_time != null) {
                message.last_evaluation_time = data.last_evaluation_time;
            }
            if (data.last_evaluation_version != null) {
                message.last_evaluation_version = data.last_evaluation_version;
            }
            return message;
        }
        toObject() {
            const data: {
                grade?: Contract.PlayerGrade;
                total_cxp?: number;
                season_cxp?: number;
                grade_score?: number;
                target_grade_score?: number;
                soul_power?: number;
                target_soul_power?: number;
                grade_progress?: number;
                issues: ContractEvaluation.PoorBehavior[];
                issue_score?: number;
                status?: ContractPlayerInfo.Status;
                last_evaluation_time?: number;
                last_evaluation_version?: string;
                unread_evaluations?: ReturnType<typeof ContractEvaluation.prototype.toObject>[];
            } = {
                issues: this.issues
            };
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.total_cxp != null) {
                data.total_cxp = this.total_cxp;
            }
            if (this.season_cxp != null) {
                data.season_cxp = this.season_cxp;
            }
            if (this.grade_score != null) {
                data.grade_score = this.grade_score;
            }
            if (this.target_grade_score != null) {
                data.target_grade_score = this.target_grade_score;
            }
            if (this.soul_power != null) {
                data.soul_power = this.soul_power;
            }
            if (this.target_soul_power != null) {
                data.target_soul_power = this.target_soul_power;
            }
            if (this.grade_progress != null) {
                data.grade_progress = this.grade_progress;
            }
            if (this.issue_score != null) {
                data.issue_score = this.issue_score;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.last_evaluation_time != null) {
                data.last_evaluation_time = this.last_evaluation_time;
            }
            if (this.last_evaluation_version != null) {
                data.last_evaluation_version = this.last_evaluation_version;
            }
            if (this.unread_evaluations != null) {
                data.unread_evaluations = this.unread_evaluations.map((item: ContractEvaluation) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_grade)
                writer.writeEnum(1, this.grade);
            if (this.has_total_cxp)
                writer.writeDouble(2, this.total_cxp);
            if (this.has_season_cxp)
                writer.writeDouble(13, this.season_cxp);
            if (this.has_grade_score)
                writer.writeDouble(7, this.grade_score);
            if (this.has_target_grade_score)
                writer.writeDouble(9, this.target_grade_score);
            if (this.has_soul_power)
                writer.writeDouble(10, this.soul_power);
            if (this.has_target_soul_power)
                writer.writeDouble(8, this.target_soul_power);
            if (this.has_grade_progress)
                writer.writeDouble(12, this.grade_progress);
            if (this.issues.length)
                writer.writeRepeatedEnum(11, this.issues);
            if (this.has_issue_score)
                writer.writeDouble(14, this.issue_score);
            if (this.has_status)
                writer.writeEnum(3, this.status);
            if (this.has_last_evaluation_time)
                writer.writeDouble(4, this.last_evaluation_time);
            if (this.has_last_evaluation_version && this.last_evaluation_version.length)
                writer.writeString(5, this.last_evaluation_version);
            if (this.unread_evaluations.length)
                writer.writeRepeatedMessage(6, this.unread_evaluations, (item: ContractEvaluation) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractPlayerInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractPlayerInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.grade = reader.readEnum();
                        break;
                    case 2:
                        message.total_cxp = reader.readDouble();
                        break;
                    case 13:
                        message.season_cxp = reader.readDouble();
                        break;
                    case 7:
                        message.grade_score = reader.readDouble();
                        break;
                    case 9:
                        message.target_grade_score = reader.readDouble();
                        break;
                    case 10:
                        message.soul_power = reader.readDouble();
                        break;
                    case 8:
                        message.target_soul_power = reader.readDouble();
                        break;
                    case 12:
                        message.grade_progress = reader.readDouble();
                        break;
                    case 11:
                        pb_1.Message.addToRepeatedField(message, 11, reader.readEnum());
                        break;
                    case 14:
                        message.issue_score = reader.readDouble();
                        break;
                    case 3:
                        message.status = reader.readEnum();
                        break;
                    case 4:
                        message.last_evaluation_time = reader.readDouble();
                        break;
                    case 5:
                        message.last_evaluation_version = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.unread_evaluations, () => pb_1.Message.addToRepeatedWrapperField(message, 6, ContractEvaluation.deserialize(reader), ContractEvaluation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractPlayerInfo {
            return ContractPlayerInfo.deserialize(bytes);
        }
    }
    export namespace ContractPlayerInfo {
        export enum Status {
            UNKNOWN = 0,
            CALCULATING = 1,
            OUT_OF_DATE = 2,
            INCOMPLETE = 4,
            COMPLETE = 3
        }
    }
    export class ContractEvaluation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contract_identifier?: string;
            coop_identifier?: string;
            cxp?: number;
            replay?: boolean;
            cxp_change?: number;
            grade_performance?: number;
            old_league?: number;
            old_goals?: boolean;
            grade?: Contract.PlayerGrade;
            contribution_ratio?: number;
            completion_percent?: number;
            original_length?: number;
            coop_size?: number;
            solo?: boolean;
            soul_power?: number;
            last_contribution_time?: number;
            completion_time?: number;
            chicken_runs_sent?: number;
            gift_tokens_sent?: number;
            gift_tokens_received?: number;
            gift_token_value_sent?: number;
            gift_token_value_received?: number;
            boost_token_allotment?: number;
            buff_time_value?: number;
            teamwork_score?: number;
            other_bonuses?: number;
            counted_in_season?: boolean;
            season_id?: string;
            time_cheats?: number;
            issues: ContractEvaluation.PoorBehavior[];
            notes: string[];
            version?: string;
            evaluation_start_time?: number;
            status?: ContractEvaluation.Status;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [19, 12], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_identifier" in data && data.contract_identifier != undefined) {
                    this.contract_identifier = data.contract_identifier;
                }
                if ("coop_identifier" in data && data.coop_identifier != undefined) {
                    this.coop_identifier = data.coop_identifier;
                }
                if ("cxp" in data && data.cxp != undefined) {
                    this.cxp = data.cxp;
                }
                if ("replay" in data && data.replay != undefined) {
                    this.replay = data.replay;
                }
                if ("cxp_change" in data && data.cxp_change != undefined) {
                    this.cxp_change = data.cxp_change;
                }
                if ("grade_performance" in data && data.grade_performance != undefined) {
                    this.grade_performance = data.grade_performance;
                }
                if ("old_league" in data && data.old_league != undefined) {
                    this.old_league = data.old_league;
                }
                if ("old_goals" in data && data.old_goals != undefined) {
                    this.old_goals = data.old_goals;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                if ("contribution_ratio" in data && data.contribution_ratio != undefined) {
                    this.contribution_ratio = data.contribution_ratio;
                }
                if ("completion_percent" in data && data.completion_percent != undefined) {
                    this.completion_percent = data.completion_percent;
                }
                if ("original_length" in data && data.original_length != undefined) {
                    this.original_length = data.original_length;
                }
                if ("coop_size" in data && data.coop_size != undefined) {
                    this.coop_size = data.coop_size;
                }
                if ("solo" in data && data.solo != undefined) {
                    this.solo = data.solo;
                }
                if ("soul_power" in data && data.soul_power != undefined) {
                    this.soul_power = data.soul_power;
                }
                if ("last_contribution_time" in data && data.last_contribution_time != undefined) {
                    this.last_contribution_time = data.last_contribution_time;
                }
                if ("completion_time" in data && data.completion_time != undefined) {
                    this.completion_time = data.completion_time;
                }
                if ("chicken_runs_sent" in data && data.chicken_runs_sent != undefined) {
                    this.chicken_runs_sent = data.chicken_runs_sent;
                }
                if ("gift_tokens_sent" in data && data.gift_tokens_sent != undefined) {
                    this.gift_tokens_sent = data.gift_tokens_sent;
                }
                if ("gift_tokens_received" in data && data.gift_tokens_received != undefined) {
                    this.gift_tokens_received = data.gift_tokens_received;
                }
                if ("gift_token_value_sent" in data && data.gift_token_value_sent != undefined) {
                    this.gift_token_value_sent = data.gift_token_value_sent;
                }
                if ("gift_token_value_received" in data && data.gift_token_value_received != undefined) {
                    this.gift_token_value_received = data.gift_token_value_received;
                }
                if ("boost_token_allotment" in data && data.boost_token_allotment != undefined) {
                    this.boost_token_allotment = data.boost_token_allotment;
                }
                if ("buff_time_value" in data && data.buff_time_value != undefined) {
                    this.buff_time_value = data.buff_time_value;
                }
                if ("teamwork_score" in data && data.teamwork_score != undefined) {
                    this.teamwork_score = data.teamwork_score;
                }
                if ("other_bonuses" in data && data.other_bonuses != undefined) {
                    this.other_bonuses = data.other_bonuses;
                }
                if ("counted_in_season" in data && data.counted_in_season != undefined) {
                    this.counted_in_season = data.counted_in_season;
                }
                if ("season_id" in data && data.season_id != undefined) {
                    this.season_id = data.season_id;
                }
                if ("time_cheats" in data && data.time_cheats != undefined) {
                    this.time_cheats = data.time_cheats;
                }
                this.issues = data.issues;
                this.notes = data.notes;
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("evaluation_start_time" in data && data.evaluation_start_time != undefined) {
                    this.evaluation_start_time = data.evaluation_start_time;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get contract_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 40, "") as string;
        }
        set contract_identifier(value: string) {
            pb_1.Message.setField(this, 40, value);
        }
        get has_contract_identifier() {
            return pb_1.Message.getField(this, 40) != null;
        }
        get coop_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 41, "") as string;
        }
        set coop_identifier(value: string) {
            pb_1.Message.setField(this, 41, value);
        }
        get has_coop_identifier() {
            return pb_1.Message.getField(this, 41) != null;
        }
        get cxp() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set cxp(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_cxp() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get replay() {
            return pb_1.Message.getFieldWithDefault(this, 24, false) as boolean;
        }
        set replay(value: boolean) {
            pb_1.Message.setField(this, 24, value);
        }
        get has_replay() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get cxp_change() {
            return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
        }
        set cxp_change(value: number) {
            pb_1.Message.setField(this, 25, value);
        }
        get has_cxp_change() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get grade_performance() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set grade_performance(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_grade_performance() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get old_league() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set old_league(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_old_league() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get old_goals() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set old_goals(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_old_goals() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 3, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
        }
        set grade(value: Contract.PlayerGrade) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_grade() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get contribution_ratio() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set contribution_ratio(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_contribution_ratio() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get completion_percent() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set completion_percent(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_completion_percent() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get original_length() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set original_length(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_original_length() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get coop_size() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set coop_size(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get has_coop_size() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get solo() {
            return pb_1.Message.getFieldWithDefault(this, 26, false) as boolean;
        }
        set solo(value: boolean) {
            pb_1.Message.setField(this, 26, value);
        }
        get has_solo() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get soul_power() {
            return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
        }
        set soul_power(value: number) {
            pb_1.Message.setField(this, 23, value);
        }
        get has_soul_power() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get last_contribution_time() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set last_contribution_time(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        get has_last_contribution_time() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get completion_time() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set completion_time(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_completion_time() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get chicken_runs_sent() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set chicken_runs_sent(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_chicken_runs_sent() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get gift_tokens_sent() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set gift_tokens_sent(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_gift_tokens_sent() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get gift_tokens_received() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set gift_tokens_received(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_gift_tokens_received() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get gift_token_value_sent() {
            return pb_1.Message.getFieldWithDefault(this, 28, 0) as number;
        }
        set gift_token_value_sent(value: number) {
            pb_1.Message.setField(this, 28, value);
        }
        get has_gift_token_value_sent() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get gift_token_value_received() {
            return pb_1.Message.getFieldWithDefault(this, 29, 0) as number;
        }
        set gift_token_value_received(value: number) {
            pb_1.Message.setField(this, 29, value);
        }
        get has_gift_token_value_received() {
            return pb_1.Message.getField(this, 29) != null;
        }
        get boost_token_allotment() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set boost_token_allotment(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_boost_token_allotment() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get buff_time_value() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set buff_time_value(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get has_buff_time_value() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get teamwork_score() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set teamwork_score(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_teamwork_score() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get other_bonuses() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set other_bonuses(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_other_bonuses() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get counted_in_season() {
            return pb_1.Message.getFieldWithDefault(this, 20, false) as boolean;
        }
        set counted_in_season(value: boolean) {
            pb_1.Message.setField(this, 20, value);
        }
        get has_counted_in_season() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get season_id() {
            return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
        }
        set season_id(value: string) {
            pb_1.Message.setField(this, 21, value);
        }
        get has_season_id() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get time_cheats() {
            return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
        }
        set time_cheats(value: number) {
            pb_1.Message.setField(this, 27, value);
        }
        get has_time_cheats() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get issues() {
            return pb_1.Message.getFieldWithDefault(this, 19, []) as ContractEvaluation.PoorBehavior[];
        }
        set issues(value: ContractEvaluation.PoorBehavior[]) {
            pb_1.Message.setField(this, 19, value);
        }
        get notes() {
            return pb_1.Message.getFieldWithDefault(this, 12, []) as string[];
        }
        set notes(value: string[]) {
            pb_1.Message.setField(this, 12, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 50, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 50, value);
        }
        get has_version() {
            return pb_1.Message.getField(this, 50) != null;
        }
        get evaluation_start_time() {
            return pb_1.Message.getFieldWithDefault(this, 51, 0) as number;
        }
        set evaluation_start_time(value: number) {
            pb_1.Message.setField(this, 51, value);
        }
        get has_evaluation_start_time() {
            return pb_1.Message.getField(this, 51) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 52, ContractEvaluation.Status.UNKNOWN) as ContractEvaluation.Status;
        }
        set status(value: ContractEvaluation.Status) {
            pb_1.Message.setField(this, 52, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 52) != null;
        }
        static fromObject(data: {
            contract_identifier?: string;
            coop_identifier?: string;
            cxp?: number;
            replay?: boolean;
            cxp_change?: number;
            grade_performance?: number;
            old_league?: number;
            old_goals?: boolean;
            grade?: Contract.PlayerGrade;
            contribution_ratio?: number;
            completion_percent?: number;
            original_length?: number;
            coop_size?: number;
            solo?: boolean;
            soul_power?: number;
            last_contribution_time?: number;
            completion_time?: number;
            chicken_runs_sent?: number;
            gift_tokens_sent?: number;
            gift_tokens_received?: number;
            gift_token_value_sent?: number;
            gift_token_value_received?: number;
            boost_token_allotment?: number;
            buff_time_value?: number;
            teamwork_score?: number;
            other_bonuses?: number;
            counted_in_season?: boolean;
            season_id?: string;
            time_cheats?: number;
            issues: ContractEvaluation.PoorBehavior[];
            notes: string[];
            version?: string;
            evaluation_start_time?: number;
            status?: ContractEvaluation.Status;
        }): ContractEvaluation {
            const message = new ContractEvaluation({
                issues: data.issues,
                notes: data.notes
            });
            if (data.contract_identifier != null) {
                message.contract_identifier = data.contract_identifier;
            }
            if (data.coop_identifier != null) {
                message.coop_identifier = data.coop_identifier;
            }
            if (data.cxp != null) {
                message.cxp = data.cxp;
            }
            if (data.replay != null) {
                message.replay = data.replay;
            }
            if (data.cxp_change != null) {
                message.cxp_change = data.cxp_change;
            }
            if (data.grade_performance != null) {
                message.grade_performance = data.grade_performance;
            }
            if (data.old_league != null) {
                message.old_league = data.old_league;
            }
            if (data.old_goals != null) {
                message.old_goals = data.old_goals;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.contribution_ratio != null) {
                message.contribution_ratio = data.contribution_ratio;
            }
            if (data.completion_percent != null) {
                message.completion_percent = data.completion_percent;
            }
            if (data.original_length != null) {
                message.original_length = data.original_length;
            }
            if (data.coop_size != null) {
                message.coop_size = data.coop_size;
            }
            if (data.solo != null) {
                message.solo = data.solo;
            }
            if (data.soul_power != null) {
                message.soul_power = data.soul_power;
            }
            if (data.last_contribution_time != null) {
                message.last_contribution_time = data.last_contribution_time;
            }
            if (data.completion_time != null) {
                message.completion_time = data.completion_time;
            }
            if (data.chicken_runs_sent != null) {
                message.chicken_runs_sent = data.chicken_runs_sent;
            }
            if (data.gift_tokens_sent != null) {
                message.gift_tokens_sent = data.gift_tokens_sent;
            }
            if (data.gift_tokens_received != null) {
                message.gift_tokens_received = data.gift_tokens_received;
            }
            if (data.gift_token_value_sent != null) {
                message.gift_token_value_sent = data.gift_token_value_sent;
            }
            if (data.gift_token_value_received != null) {
                message.gift_token_value_received = data.gift_token_value_received;
            }
            if (data.boost_token_allotment != null) {
                message.boost_token_allotment = data.boost_token_allotment;
            }
            if (data.buff_time_value != null) {
                message.buff_time_value = data.buff_time_value;
            }
            if (data.teamwork_score != null) {
                message.teamwork_score = data.teamwork_score;
            }
            if (data.other_bonuses != null) {
                message.other_bonuses = data.other_bonuses;
            }
            if (data.counted_in_season != null) {
                message.counted_in_season = data.counted_in_season;
            }
            if (data.season_id != null) {
                message.season_id = data.season_id;
            }
            if (data.time_cheats != null) {
                message.time_cheats = data.time_cheats;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.evaluation_start_time != null) {
                message.evaluation_start_time = data.evaluation_start_time;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                contract_identifier?: string;
                coop_identifier?: string;
                cxp?: number;
                replay?: boolean;
                cxp_change?: number;
                grade_performance?: number;
                old_league?: number;
                old_goals?: boolean;
                grade?: Contract.PlayerGrade;
                contribution_ratio?: number;
                completion_percent?: number;
                original_length?: number;
                coop_size?: number;
                solo?: boolean;
                soul_power?: number;
                last_contribution_time?: number;
                completion_time?: number;
                chicken_runs_sent?: number;
                gift_tokens_sent?: number;
                gift_tokens_received?: number;
                gift_token_value_sent?: number;
                gift_token_value_received?: number;
                boost_token_allotment?: number;
                buff_time_value?: number;
                teamwork_score?: number;
                other_bonuses?: number;
                counted_in_season?: boolean;
                season_id?: string;
                time_cheats?: number;
                issues: ContractEvaluation.PoorBehavior[];
                notes: string[];
                version?: string;
                evaluation_start_time?: number;
                status?: ContractEvaluation.Status;
            } = {
                issues: this.issues,
                notes: this.notes
            };
            if (this.contract_identifier != null) {
                data.contract_identifier = this.contract_identifier;
            }
            if (this.coop_identifier != null) {
                data.coop_identifier = this.coop_identifier;
            }
            if (this.cxp != null) {
                data.cxp = this.cxp;
            }
            if (this.replay != null) {
                data.replay = this.replay;
            }
            if (this.cxp_change != null) {
                data.cxp_change = this.cxp_change;
            }
            if (this.grade_performance != null) {
                data.grade_performance = this.grade_performance;
            }
            if (this.old_league != null) {
                data.old_league = this.old_league;
            }
            if (this.old_goals != null) {
                data.old_goals = this.old_goals;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.contribution_ratio != null) {
                data.contribution_ratio = this.contribution_ratio;
            }
            if (this.completion_percent != null) {
                data.completion_percent = this.completion_percent;
            }
            if (this.original_length != null) {
                data.original_length = this.original_length;
            }
            if (this.coop_size != null) {
                data.coop_size = this.coop_size;
            }
            if (this.solo != null) {
                data.solo = this.solo;
            }
            if (this.soul_power != null) {
                data.soul_power = this.soul_power;
            }
            if (this.last_contribution_time != null) {
                data.last_contribution_time = this.last_contribution_time;
            }
            if (this.completion_time != null) {
                data.completion_time = this.completion_time;
            }
            if (this.chicken_runs_sent != null) {
                data.chicken_runs_sent = this.chicken_runs_sent;
            }
            if (this.gift_tokens_sent != null) {
                data.gift_tokens_sent = this.gift_tokens_sent;
            }
            if (this.gift_tokens_received != null) {
                data.gift_tokens_received = this.gift_tokens_received;
            }
            if (this.gift_token_value_sent != null) {
                data.gift_token_value_sent = this.gift_token_value_sent;
            }
            if (this.gift_token_value_received != null) {
                data.gift_token_value_received = this.gift_token_value_received;
            }
            if (this.boost_token_allotment != null) {
                data.boost_token_allotment = this.boost_token_allotment;
            }
            if (this.buff_time_value != null) {
                data.buff_time_value = this.buff_time_value;
            }
            if (this.teamwork_score != null) {
                data.teamwork_score = this.teamwork_score;
            }
            if (this.other_bonuses != null) {
                data.other_bonuses = this.other_bonuses;
            }
            if (this.counted_in_season != null) {
                data.counted_in_season = this.counted_in_season;
            }
            if (this.season_id != null) {
                data.season_id = this.season_id;
            }
            if (this.time_cheats != null) {
                data.time_cheats = this.time_cheats;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.evaluation_start_time != null) {
                data.evaluation_start_time = this.evaluation_start_time;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_contract_identifier && this.contract_identifier.length)
                writer.writeString(40, this.contract_identifier);
            if (this.has_coop_identifier && this.coop_identifier.length)
                writer.writeString(41, this.coop_identifier);
            if (this.has_cxp)
                writer.writeDouble(1, this.cxp);
            if (this.has_replay)
                writer.writeBool(24, this.replay);
            if (this.has_cxp_change)
                writer.writeDouble(25, this.cxp_change);
            if (this.has_grade_performance)
                writer.writeInt32(2, this.grade_performance);
            if (this.has_old_league)
                writer.writeInt32(9, this.old_league);
            if (this.has_old_goals)
                writer.writeBool(10, this.old_goals);
            if (this.has_grade)
                writer.writeEnum(3, this.grade);
            if (this.has_contribution_ratio)
                writer.writeDouble(4, this.contribution_ratio);
            if (this.has_completion_percent)
                writer.writeDouble(5, this.completion_percent);
            if (this.has_original_length)
                writer.writeDouble(11, this.original_length);
            if (this.has_coop_size)
                writer.writeUint32(18, this.coop_size);
            if (this.has_solo)
                writer.writeBool(26, this.solo);
            if (this.has_soul_power)
                writer.writeDouble(23, this.soul_power);
            if (this.has_last_contribution_time)
                writer.writeDouble(22, this.last_contribution_time);
            if (this.has_completion_time)
                writer.writeDouble(6, this.completion_time);
            if (this.has_chicken_runs_sent)
                writer.writeUint32(7, this.chicken_runs_sent);
            if (this.has_gift_tokens_sent)
                writer.writeUint32(8, this.gift_tokens_sent);
            if (this.has_gift_tokens_received)
                writer.writeUint32(15, this.gift_tokens_received);
            if (this.has_gift_token_value_sent)
                writer.writeDouble(28, this.gift_token_value_sent);
            if (this.has_gift_token_value_received)
                writer.writeDouble(29, this.gift_token_value_received);
            if (this.has_boost_token_allotment)
                writer.writeUint32(16, this.boost_token_allotment);
            if (this.has_buff_time_value)
                writer.writeDouble(17, this.buff_time_value);
            if (this.has_teamwork_score)
                writer.writeDouble(13, this.teamwork_score);
            if (this.has_other_bonuses)
                writer.writeDouble(14, this.other_bonuses);
            if (this.has_counted_in_season)
                writer.writeBool(20, this.counted_in_season);
            if (this.has_season_id && this.season_id.length)
                writer.writeString(21, this.season_id);
            if (this.has_time_cheats)
                writer.writeUint32(27, this.time_cheats);
            if (this.issues.length)
                writer.writeRepeatedEnum(19, this.issues);
            if (this.notes.length)
                writer.writeRepeatedString(12, this.notes);
            if (this.has_version && this.version.length)
                writer.writeString(50, this.version);
            if (this.has_evaluation_start_time)
                writer.writeDouble(51, this.evaluation_start_time);
            if (this.has_status)
                writer.writeEnum(52, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractEvaluation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractEvaluation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 40:
                        message.contract_identifier = reader.readString();
                        break;
                    case 41:
                        message.coop_identifier = reader.readString();
                        break;
                    case 1:
                        message.cxp = reader.readDouble();
                        break;
                    case 24:
                        message.replay = reader.readBool();
                        break;
                    case 25:
                        message.cxp_change = reader.readDouble();
                        break;
                    case 2:
                        message.grade_performance = reader.readInt32();
                        break;
                    case 9:
                        message.old_league = reader.readInt32();
                        break;
                    case 10:
                        message.old_goals = reader.readBool();
                        break;
                    case 3:
                        message.grade = reader.readEnum();
                        break;
                    case 4:
                        message.contribution_ratio = reader.readDouble();
                        break;
                    case 5:
                        message.completion_percent = reader.readDouble();
                        break;
                    case 11:
                        message.original_length = reader.readDouble();
                        break;
                    case 18:
                        message.coop_size = reader.readUint32();
                        break;
                    case 26:
                        message.solo = reader.readBool();
                        break;
                    case 23:
                        message.soul_power = reader.readDouble();
                        break;
                    case 22:
                        message.last_contribution_time = reader.readDouble();
                        break;
                    case 6:
                        message.completion_time = reader.readDouble();
                        break;
                    case 7:
                        message.chicken_runs_sent = reader.readUint32();
                        break;
                    case 8:
                        message.gift_tokens_sent = reader.readUint32();
                        break;
                    case 15:
                        message.gift_tokens_received = reader.readUint32();
                        break;
                    case 28:
                        message.gift_token_value_sent = reader.readDouble();
                        break;
                    case 29:
                        message.gift_token_value_received = reader.readDouble();
                        break;
                    case 16:
                        message.boost_token_allotment = reader.readUint32();
                        break;
                    case 17:
                        message.buff_time_value = reader.readDouble();
                        break;
                    case 13:
                        message.teamwork_score = reader.readDouble();
                        break;
                    case 14:
                        message.other_bonuses = reader.readDouble();
                        break;
                    case 20:
                        message.counted_in_season = reader.readBool();
                        break;
                    case 21:
                        message.season_id = reader.readString();
                        break;
                    case 27:
                        message.time_cheats = reader.readUint32();
                        break;
                    case 19:
                        pb_1.Message.addToRepeatedField(message, 19, reader.readEnum());
                        break;
                    case 12:
                        pb_1.Message.addToRepeatedField(message, 12, reader.readString());
                        break;
                    case 50:
                        message.version = reader.readString();
                        break;
                    case 51:
                        message.evaluation_start_time = reader.readDouble();
                        break;
                    case 52:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractEvaluation {
            return ContractEvaluation.deserialize(bytes);
        }
    }
    export namespace ContractEvaluation {
        export enum PoorBehavior {
            NONE = 0,
            LOW_CONTRIBUTION = 1,
            BAD_CONTRIBUTION = 2,
            DISHONORABLY_DISCHARGED = 3,
            POOR_TEAMWORK = 4,
            ABANDONED_COOP = 5,
            TIME_CHEAT = 6
        }
        export enum Status {
            UNKNOWN = 0,
            PENDING = 1,
            EVALUATING = 2,
            COMPLETE = 3
        }
    }
    export class ContractCitation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            issue?: ContractEvaluation.PoorBehavior;
            timestamp?: number;
            grade?: Contract.PlayerGrade;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("issue" in data && data.issue != undefined) {
                    this.issue = data.issue;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
            }
        }
        get issue() {
            return pb_1.Message.getFieldWithDefault(this, 1, ContractEvaluation.PoorBehavior.NONE) as ContractEvaluation.PoorBehavior;
        }
        set issue(value: ContractEvaluation.PoorBehavior) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_issue() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 3, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
        }
        set grade(value: Contract.PlayerGrade) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_grade() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            issue?: ContractEvaluation.PoorBehavior;
            timestamp?: number;
            grade?: Contract.PlayerGrade;
        }): ContractCitation {
            const message = new ContractCitation({});
            if (data.issue != null) {
                message.issue = data.issue;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            return message;
        }
        toObject() {
            const data: {
                issue?: ContractEvaluation.PoorBehavior;
                timestamp?: number;
                grade?: Contract.PlayerGrade;
            } = {};
            if (this.issue != null) {
                data.issue = this.issue;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_issue)
                writer.writeEnum(1, this.issue);
            if (this.has_timestamp)
                writer.writeDouble(2, this.timestamp);
            if (this.has_grade)
                writer.writeEnum(3, this.grade);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractCitation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractCitation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.issue = reader.readEnum();
                        break;
                    case 2:
                        message.timestamp = reader.readDouble();
                        break;
                    case 3:
                        message.grade = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractCitation {
            return ContractCitation.deserialize(bytes);
        }
    }
    export class ContractEvaluationBatch extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            evals: ContractEvaluationBatch.Pair[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.evals = data.evals;
            }
        }
        get evals() {
            return pb_1.Message.getRepeatedWrapperField(this, ContractEvaluationBatch.Pair, 1) as ContractEvaluationBatch.Pair[];
        }
        set evals(value: ContractEvaluationBatch.Pair[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            evals?: ReturnType<typeof ContractEvaluationBatch.Pair.prototype.toObject>[];
        }): ContractEvaluationBatch {
            const message = new ContractEvaluationBatch({
                evals: data.evals.map(item => ContractEvaluationBatch.Pair.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                evals?: ReturnType<typeof ContractEvaluationBatch.Pair.prototype.toObject>[];
            } = {};
            if (this.evals != null) {
                data.evals = this.evals.map((item: ContractEvaluationBatch.Pair) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.evals.length)
                writer.writeRepeatedMessage(1, this.evals, (item: ContractEvaluationBatch.Pair) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractEvaluationBatch {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractEvaluationBatch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.evals, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ContractEvaluationBatch.Pair.deserialize(reader), ContractEvaluationBatch.Pair));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractEvaluationBatch {
            return ContractEvaluationBatch.deserialize(bytes);
        }
    }
    export namespace ContractEvaluationBatch {
        export class Pair extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                user_id?: string;
                cev?: ContractEvaluation;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("user_id" in data && data.user_id != undefined) {
                        this.user_id = data.user_id;
                    }
                    if ("cev" in data && data.cev != undefined) {
                        this.cev = data.cev;
                    }
                }
            }
            get user_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set user_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_user_id() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get cev() {
                return pb_1.Message.getWrapperField(this, ContractEvaluation, 2) as ContractEvaluation;
            }
            set cev(value: ContractEvaluation) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_cev() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                user_id?: string;
                cev?: ReturnType<typeof ContractEvaluation.prototype.toObject>;
            }): Pair {
                const message = new Pair({});
                if (data.user_id != null) {
                    message.user_id = data.user_id;
                }
                if (data.cev != null) {
                    message.cev = ContractEvaluation.fromObject(data.cev);
                }
                return message;
            }
            toObject() {
                const data: {
                    user_id?: string;
                    cev?: ReturnType<typeof ContractEvaluation.prototype.toObject>;
                } = {};
                if (this.user_id != null) {
                    data.user_id = this.user_id;
                }
                if (this.cev != null) {
                    data.cev = this.cev.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_user_id && this.user_id.length)
                    writer.writeString(1, this.user_id);
                if (this.has_cev)
                    writer.writeMessage(2, this.cev, () => this.cev.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Pair {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Pair();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.user_id = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.cev, () => message.cev = ContractEvaluation.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Pair {
                return Pair.deserialize(bytes);
            }
        }
    }
    export class CoopCompletionSnapshot extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contributors: CoopCompletionSnapshot.ContributorSnapshot[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.contributors = data.contributors;
            }
        }
        get contributors() {
            return pb_1.Message.getRepeatedWrapperField(this, CoopCompletionSnapshot.ContributorSnapshot, 1) as CoopCompletionSnapshot.ContributorSnapshot[];
        }
        set contributors(value: CoopCompletionSnapshot.ContributorSnapshot[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            contributors?: ReturnType<typeof CoopCompletionSnapshot.ContributorSnapshot.prototype.toObject>[];
        }): CoopCompletionSnapshot {
            const message = new CoopCompletionSnapshot({
                contributors: data.contributors.map(item => CoopCompletionSnapshot.ContributorSnapshot.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                contributors?: ReturnType<typeof CoopCompletionSnapshot.ContributorSnapshot.prototype.toObject>[];
            } = {};
            if (this.contributors != null) {
                data.contributors = this.contributors.map((item: CoopCompletionSnapshot.ContributorSnapshot) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contributors.length)
                writer.writeRepeatedMessage(1, this.contributors, (item: CoopCompletionSnapshot.ContributorSnapshot) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CoopCompletionSnapshot {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CoopCompletionSnapshot();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.contributors, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CoopCompletionSnapshot.ContributorSnapshot.deserialize(reader), CoopCompletionSnapshot.ContributorSnapshot));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CoopCompletionSnapshot {
            return CoopCompletionSnapshot.deserialize(bytes);
        }
    }
    export namespace CoopCompletionSnapshot {
        export class ContributorSnapshot extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                contribution?: number;
                last_contribution_time?: number;
                finalized?: boolean;
                soul_power?: number;
                user_id?: string;
                tokens?: number;
                tokens_spent?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("contribution" in data && data.contribution != undefined) {
                        this.contribution = data.contribution;
                    }
                    if ("last_contribution_time" in data && data.last_contribution_time != undefined) {
                        this.last_contribution_time = data.last_contribution_time;
                    }
                    if ("finalized" in data && data.finalized != undefined) {
                        this.finalized = data.finalized;
                    }
                    if ("soul_power" in data && data.soul_power != undefined) {
                        this.soul_power = data.soul_power;
                    }
                    if ("user_id" in data && data.user_id != undefined) {
                        this.user_id = data.user_id;
                    }
                    if ("tokens" in data && data.tokens != undefined) {
                        this.tokens = data.tokens;
                    }
                    if ("tokens_spent" in data && data.tokens_spent != undefined) {
                        this.tokens_spent = data.tokens_spent;
                    }
                }
            }
            get contribution() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set contribution(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_contribution() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get last_contribution_time() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set last_contribution_time(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_last_contribution_time() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get finalized() {
                return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
            }
            set finalized(value: boolean) {
                pb_1.Message.setField(this, 7, value);
            }
            get has_finalized() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get soul_power() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set soul_power(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_soul_power() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get user_id() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set user_id(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_user_id() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get tokens() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set tokens(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_tokens() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get tokens_spent() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set tokens_spent(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_tokens_spent() {
                return pb_1.Message.getField(this, 5) != null;
            }
            static fromObject(data: {
                contribution?: number;
                last_contribution_time?: number;
                finalized?: boolean;
                soul_power?: number;
                user_id?: string;
                tokens?: number;
                tokens_spent?: number;
            }): ContributorSnapshot {
                const message = new ContributorSnapshot({});
                if (data.contribution != null) {
                    message.contribution = data.contribution;
                }
                if (data.last_contribution_time != null) {
                    message.last_contribution_time = data.last_contribution_time;
                }
                if (data.finalized != null) {
                    message.finalized = data.finalized;
                }
                if (data.soul_power != null) {
                    message.soul_power = data.soul_power;
                }
                if (data.user_id != null) {
                    message.user_id = data.user_id;
                }
                if (data.tokens != null) {
                    message.tokens = data.tokens;
                }
                if (data.tokens_spent != null) {
                    message.tokens_spent = data.tokens_spent;
                }
                return message;
            }
            toObject() {
                const data: {
                    contribution?: number;
                    last_contribution_time?: number;
                    finalized?: boolean;
                    soul_power?: number;
                    user_id?: string;
                    tokens?: number;
                    tokens_spent?: number;
                } = {};
                if (this.contribution != null) {
                    data.contribution = this.contribution;
                }
                if (this.last_contribution_time != null) {
                    data.last_contribution_time = this.last_contribution_time;
                }
                if (this.finalized != null) {
                    data.finalized = this.finalized;
                }
                if (this.soul_power != null) {
                    data.soul_power = this.soul_power;
                }
                if (this.user_id != null) {
                    data.user_id = this.user_id;
                }
                if (this.tokens != null) {
                    data.tokens = this.tokens;
                }
                if (this.tokens_spent != null) {
                    data.tokens_spent = this.tokens_spent;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_contribution)
                    writer.writeDouble(1, this.contribution);
                if (this.has_last_contribution_time)
                    writer.writeDouble(6, this.last_contribution_time);
                if (this.has_finalized)
                    writer.writeBool(7, this.finalized);
                if (this.has_soul_power)
                    writer.writeDouble(2, this.soul_power);
                if (this.has_user_id && this.user_id.length)
                    writer.writeString(3, this.user_id);
                if (this.has_tokens)
                    writer.writeUint32(4, this.tokens);
                if (this.has_tokens_spent)
                    writer.writeUint32(5, this.tokens_spent);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContributorSnapshot {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContributorSnapshot();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.contribution = reader.readDouble();
                            break;
                        case 6:
                            message.last_contribution_time = reader.readDouble();
                            break;
                        case 7:
                            message.finalized = reader.readBool();
                            break;
                        case 2:
                            message.soul_power = reader.readDouble();
                            break;
                        case 3:
                            message.user_id = reader.readString();
                            break;
                        case 4:
                            message.tokens = reader.readUint32();
                            break;
                        case 5:
                            message.tokens_spent = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ContributorSnapshot {
                return ContributorSnapshot.deserialize(bytes);
            }
        }
    }
    export class BasicRequestInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ei_user_id?: string;
            client_version?: number;
            version?: string;
            build?: string;
            platform?: string;
            country?: string;
            language?: string;
            debug?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ei_user_id" in data && data.ei_user_id != undefined) {
                    this.ei_user_id = data.ei_user_id;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("build" in data && data.build != undefined) {
                    this.build = data.build;
                }
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
                if ("language" in data && data.language != undefined) {
                    this.language = data.language;
                }
                if ("debug" in data && data.debug != undefined) {
                    this.debug = data.debug;
                }
            }
        }
        get ei_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ei_user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_ei_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_version() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get build() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set build(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_build() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set platform(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_platform() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_country() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get language() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set language(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_language() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get debug() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set debug(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_debug() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            ei_user_id?: string;
            client_version?: number;
            version?: string;
            build?: string;
            platform?: string;
            country?: string;
            language?: string;
            debug?: boolean;
        }): BasicRequestInfo {
            const message = new BasicRequestInfo({});
            if (data.ei_user_id != null) {
                message.ei_user_id = data.ei_user_id;
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.build != null) {
                message.build = data.build;
            }
            if (data.platform != null) {
                message.platform = data.platform;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            if (data.language != null) {
                message.language = data.language;
            }
            if (data.debug != null) {
                message.debug = data.debug;
            }
            return message;
        }
        toObject() {
            const data: {
                ei_user_id?: string;
                client_version?: number;
                version?: string;
                build?: string;
                platform?: string;
                country?: string;
                language?: string;
                debug?: boolean;
            } = {};
            if (this.ei_user_id != null) {
                data.ei_user_id = this.ei_user_id;
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.build != null) {
                data.build = this.build;
            }
            if (this.platform != null) {
                data.platform = this.platform;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            if (this.language != null) {
                data.language = this.language;
            }
            if (this.debug != null) {
                data.debug = this.debug;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ei_user_id && this.ei_user_id.length)
                writer.writeString(1, this.ei_user_id);
            if (this.has_client_version)
                writer.writeUint32(2, this.client_version);
            if (this.has_version && this.version.length)
                writer.writeString(3, this.version);
            if (this.has_build && this.build.length)
                writer.writeString(4, this.build);
            if (this.has_platform && this.platform.length)
                writer.writeString(5, this.platform);
            if (this.has_country && this.country.length)
                writer.writeString(6, this.country);
            if (this.has_language && this.language.length)
                writer.writeString(7, this.language);
            if (this.has_debug)
                writer.writeBool(8, this.debug);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BasicRequestInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BasicRequestInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ei_user_id = reader.readString();
                        break;
                    case 2:
                        message.client_version = reader.readUint32();
                        break;
                    case 3:
                        message.version = reader.readString();
                        break;
                    case 4:
                        message.build = reader.readString();
                        break;
                    case 5:
                        message.platform = reader.readString();
                        break;
                    case 6:
                        message.country = reader.readString();
                        break;
                    case 7:
                        message.language = reader.readString();
                        break;
                    case 8:
                        message.debug = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BasicRequestInfo {
            return BasicRequestInfo.deserialize(bytes);
        }
    }
    export class ContractSimConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            grade_configs: ContractSimConfig.ContractGradeSimConfig[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.grade_configs = data.grade_configs;
            }
        }
        get grade_configs() {
            return pb_1.Message.getRepeatedWrapperField(this, ContractSimConfig.ContractGradeSimConfig, 1) as ContractSimConfig.ContractGradeSimConfig[];
        }
        set grade_configs(value: ContractSimConfig.ContractGradeSimConfig[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            grade_configs?: ReturnType<typeof ContractSimConfig.ContractGradeSimConfig.prototype.toObject>[];
        }): ContractSimConfig {
            const message = new ContractSimConfig({
                grade_configs: data.grade_configs.map(item => ContractSimConfig.ContractGradeSimConfig.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                grade_configs?: ReturnType<typeof ContractSimConfig.ContractGradeSimConfig.prototype.toObject>[];
            } = {};
            if (this.grade_configs != null) {
                data.grade_configs = this.grade_configs.map((item: ContractSimConfig.ContractGradeSimConfig) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.grade_configs.length)
                writer.writeRepeatedMessage(1, this.grade_configs, (item: ContractSimConfig.ContractGradeSimConfig) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractSimConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractSimConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.grade_configs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ContractSimConfig.ContractGradeSimConfig.deserialize(reader), ContractSimConfig.ContractGradeSimConfig));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractSimConfig {
            return ContractSimConfig.deserialize(bytes);
        }
    }
    export namespace ContractSimConfig {
        export class ContractGradeSimConfig extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                grade?: Contract.PlayerGrade;
                goal_params: ContractSimConfig.ContractGradeSimConfig.GoalParams[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("grade" in data && data.grade != undefined) {
                        this.grade = data.grade;
                    }
                    this.goal_params = data.goal_params;
                }
            }
            get grade() {
                return pb_1.Message.getFieldWithDefault(this, 1, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
            }
            set grade(value: Contract.PlayerGrade) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_grade() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get goal_params() {
                return pb_1.Message.getRepeatedWrapperField(this, ContractSimConfig.ContractGradeSimConfig.GoalParams, 2) as ContractSimConfig.ContractGradeSimConfig.GoalParams[];
            }
            set goal_params(value: ContractSimConfig.ContractGradeSimConfig.GoalParams[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data: {
                grade?: Contract.PlayerGrade;
                goal_params?: ReturnType<typeof ContractSimConfig.ContractGradeSimConfig.GoalParams.prototype.toObject>[];
            }): ContractGradeSimConfig {
                const message = new ContractGradeSimConfig({
                    goal_params: data.goal_params.map(item => ContractSimConfig.ContractGradeSimConfig.GoalParams.fromObject(item))
                });
                if (data.grade != null) {
                    message.grade = data.grade;
                }
                return message;
            }
            toObject() {
                const data: {
                    grade?: Contract.PlayerGrade;
                    goal_params?: ReturnType<typeof ContractSimConfig.ContractGradeSimConfig.GoalParams.prototype.toObject>[];
                } = {};
                if (this.grade != null) {
                    data.grade = this.grade;
                }
                if (this.goal_params != null) {
                    data.goal_params = this.goal_params.map((item: ContractSimConfig.ContractGradeSimConfig.GoalParams) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_grade)
                    writer.writeEnum(1, this.grade);
                if (this.goal_params.length)
                    writer.writeRepeatedMessage(2, this.goal_params, (item: ContractSimConfig.ContractGradeSimConfig.GoalParams) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractGradeSimConfig {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractGradeSimConfig();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.grade = reader.readEnum();
                            break;
                        case 2:
                            reader.readMessage(message.goal_params, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ContractSimConfig.ContractGradeSimConfig.GoalParams.deserialize(reader), ContractSimConfig.ContractGradeSimConfig.GoalParams));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ContractGradeSimConfig {
                return ContractGradeSimConfig.deserialize(bytes);
            }
        }
        export namespace ContractGradeSimConfig {
            export class GoalParams extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    target_se?: number;
                    cps_mult?: number;
                    elr_mult?: number;
                    earnings_mult?: number;
                    time_efficacy?: number;
                    hab_capacity_mult?: number;
                    epic_research_budget?: number;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("target_se" in data && data.target_se != undefined) {
                            this.target_se = data.target_se;
                        }
                        if ("cps_mult" in data && data.cps_mult != undefined) {
                            this.cps_mult = data.cps_mult;
                        }
                        if ("elr_mult" in data && data.elr_mult != undefined) {
                            this.elr_mult = data.elr_mult;
                        }
                        if ("earnings_mult" in data && data.earnings_mult != undefined) {
                            this.earnings_mult = data.earnings_mult;
                        }
                        if ("time_efficacy" in data && data.time_efficacy != undefined) {
                            this.time_efficacy = data.time_efficacy;
                        }
                        if ("hab_capacity_mult" in data && data.hab_capacity_mult != undefined) {
                            this.hab_capacity_mult = data.hab_capacity_mult;
                        }
                        if ("epic_research_budget" in data && data.epic_research_budget != undefined) {
                            this.epic_research_budget = data.epic_research_budget;
                        }
                    }
                }
                get target_se() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set target_se(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get has_target_se() {
                    return pb_1.Message.getField(this, 1) != null;
                }
                get cps_mult() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set cps_mult(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                get has_cps_mult() {
                    return pb_1.Message.getField(this, 2) != null;
                }
                get elr_mult() {
                    return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
                }
                set elr_mult(value: number) {
                    pb_1.Message.setField(this, 7, value);
                }
                get has_elr_mult() {
                    return pb_1.Message.getField(this, 7) != null;
                }
                get earnings_mult() {
                    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
                }
                set earnings_mult(value: number) {
                    pb_1.Message.setField(this, 3, value);
                }
                get has_earnings_mult() {
                    return pb_1.Message.getField(this, 3) != null;
                }
                get time_efficacy() {
                    return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
                }
                set time_efficacy(value: number) {
                    pb_1.Message.setField(this, 4, value);
                }
                get has_time_efficacy() {
                    return pb_1.Message.getField(this, 4) != null;
                }
                get hab_capacity_mult() {
                    return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
                }
                set hab_capacity_mult(value: number) {
                    pb_1.Message.setField(this, 5, value);
                }
                get has_hab_capacity_mult() {
                    return pb_1.Message.getField(this, 5) != null;
                }
                get epic_research_budget() {
                    return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
                }
                set epic_research_budget(value: number) {
                    pb_1.Message.setField(this, 6, value);
                }
                get has_epic_research_budget() {
                    return pb_1.Message.getField(this, 6) != null;
                }
                static fromObject(data: {
                    target_se?: number;
                    cps_mult?: number;
                    elr_mult?: number;
                    earnings_mult?: number;
                    time_efficacy?: number;
                    hab_capacity_mult?: number;
                    epic_research_budget?: number;
                }): GoalParams {
                    const message = new GoalParams({});
                    if (data.target_se != null) {
                        message.target_se = data.target_se;
                    }
                    if (data.cps_mult != null) {
                        message.cps_mult = data.cps_mult;
                    }
                    if (data.elr_mult != null) {
                        message.elr_mult = data.elr_mult;
                    }
                    if (data.earnings_mult != null) {
                        message.earnings_mult = data.earnings_mult;
                    }
                    if (data.time_efficacy != null) {
                        message.time_efficacy = data.time_efficacy;
                    }
                    if (data.hab_capacity_mult != null) {
                        message.hab_capacity_mult = data.hab_capacity_mult;
                    }
                    if (data.epic_research_budget != null) {
                        message.epic_research_budget = data.epic_research_budget;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        target_se?: number;
                        cps_mult?: number;
                        elr_mult?: number;
                        earnings_mult?: number;
                        time_efficacy?: number;
                        hab_capacity_mult?: number;
                        epic_research_budget?: number;
                    } = {};
                    if (this.target_se != null) {
                        data.target_se = this.target_se;
                    }
                    if (this.cps_mult != null) {
                        data.cps_mult = this.cps_mult;
                    }
                    if (this.elr_mult != null) {
                        data.elr_mult = this.elr_mult;
                    }
                    if (this.earnings_mult != null) {
                        data.earnings_mult = this.earnings_mult;
                    }
                    if (this.time_efficacy != null) {
                        data.time_efficacy = this.time_efficacy;
                    }
                    if (this.hab_capacity_mult != null) {
                        data.hab_capacity_mult = this.hab_capacity_mult;
                    }
                    if (this.epic_research_budget != null) {
                        data.epic_research_budget = this.epic_research_budget;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.has_target_se)
                        writer.writeDouble(1, this.target_se);
                    if (this.has_cps_mult)
                        writer.writeDouble(2, this.cps_mult);
                    if (this.has_elr_mult)
                        writer.writeDouble(7, this.elr_mult);
                    if (this.has_earnings_mult)
                        writer.writeDouble(3, this.earnings_mult);
                    if (this.has_time_efficacy)
                        writer.writeDouble(4, this.time_efficacy);
                    if (this.has_hab_capacity_mult)
                        writer.writeDouble(5, this.hab_capacity_mult);
                    if (this.has_epic_research_budget)
                        writer.writeDouble(6, this.epic_research_budget);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GoalParams {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GoalParams();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.target_se = reader.readDouble();
                                break;
                            case 2:
                                message.cps_mult = reader.readDouble();
                                break;
                            case 7:
                                message.elr_mult = reader.readDouble();
                                break;
                            case 3:
                                message.earnings_mult = reader.readDouble();
                                break;
                            case 4:
                                message.time_efficacy = reader.readDouble();
                                break;
                            case 5:
                                message.hab_capacity_mult = reader.readDouble();
                                break;
                            case 6:
                                message.epic_research_budget = reader.readDouble();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): GoalParams {
                    return GoalParams.deserialize(bytes);
                }
            }
        }
    }
    export class ContractSimPoll extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            client_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
            }
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            client_version?: number;
        }): ContractSimPoll {
            const message = new ContractSimPoll({});
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            return message;
        }
        toObject() {
            const data: {
                client_version?: number;
            } = {};
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_client_version)
                writer.writeUint32(1, this.client_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractSimPoll {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractSimPoll();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.client_version = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractSimPoll {
            return ContractSimPoll.deserialize(bytes);
        }
    }
    export class ContractSimPollResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contract_to_simulate?: Contract;
            sim_config?: ContractSimConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_to_simulate" in data && data.contract_to_simulate != undefined) {
                    this.contract_to_simulate = data.contract_to_simulate;
                }
                if ("sim_config" in data && data.sim_config != undefined) {
                    this.sim_config = data.sim_config;
                }
            }
        }
        get contract_to_simulate() {
            return pb_1.Message.getWrapperField(this, Contract, 1) as Contract;
        }
        set contract_to_simulate(value: Contract) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_contract_to_simulate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get sim_config() {
            return pb_1.Message.getWrapperField(this, ContractSimConfig, 2) as ContractSimConfig;
        }
        set sim_config(value: ContractSimConfig) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_sim_config() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            contract_to_simulate?: ReturnType<typeof Contract.prototype.toObject>;
            sim_config?: ReturnType<typeof ContractSimConfig.prototype.toObject>;
        }): ContractSimPollResponse {
            const message = new ContractSimPollResponse({});
            if (data.contract_to_simulate != null) {
                message.contract_to_simulate = Contract.fromObject(data.contract_to_simulate);
            }
            if (data.sim_config != null) {
                message.sim_config = ContractSimConfig.fromObject(data.sim_config);
            }
            return message;
        }
        toObject() {
            const data: {
                contract_to_simulate?: ReturnType<typeof Contract.prototype.toObject>;
                sim_config?: ReturnType<typeof ContractSimConfig.prototype.toObject>;
            } = {};
            if (this.contract_to_simulate != null) {
                data.contract_to_simulate = this.contract_to_simulate.toObject();
            }
            if (this.sim_config != null) {
                data.sim_config = this.sim_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_contract_to_simulate)
                writer.writeMessage(1, this.contract_to_simulate, () => this.contract_to_simulate.serialize(writer));
            if (this.has_sim_config)
                writer.writeMessage(2, this.sim_config, () => this.sim_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractSimPollResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractSimPollResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.contract_to_simulate, () => message.contract_to_simulate = Contract.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.sim_config, () => message.sim_config = ContractSimConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractSimPollResponse {
            return ContractSimPollResponse.deserialize(bytes);
        }
    }
    export class ContractSimResultUpdate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contract_id?: string;
            goal_infos: ContractSimResultUpdate.GoalInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_id" in data && data.contract_id != undefined) {
                    this.contract_id = data.contract_id;
                }
                this.goal_infos = data.goal_infos;
            }
        }
        get contract_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_contract_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get goal_infos() {
            return pb_1.Message.getRepeatedWrapperField(this, ContractSimResultUpdate.GoalInfo, 2) as ContractSimResultUpdate.GoalInfo[];
        }
        set goal_infos(value: ContractSimResultUpdate.GoalInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            contract_id?: string;
            goal_infos?: ReturnType<typeof ContractSimResultUpdate.GoalInfo.prototype.toObject>[];
        }): ContractSimResultUpdate {
            const message = new ContractSimResultUpdate({
                goal_infos: data.goal_infos.map(item => ContractSimResultUpdate.GoalInfo.fromObject(item))
            });
            if (data.contract_id != null) {
                message.contract_id = data.contract_id;
            }
            return message;
        }
        toObject() {
            const data: {
                contract_id?: string;
                goal_infos?: ReturnType<typeof ContractSimResultUpdate.GoalInfo.prototype.toObject>[];
            } = {};
            if (this.contract_id != null) {
                data.contract_id = this.contract_id;
            }
            if (this.goal_infos != null) {
                data.goal_infos = this.goal_infos.map((item: ContractSimResultUpdate.GoalInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_contract_id && this.contract_id.length)
                writer.writeString(1, this.contract_id);
            if (this.goal_infos.length)
                writer.writeRepeatedMessage(2, this.goal_infos, (item: ContractSimResultUpdate.GoalInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractSimResultUpdate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractSimResultUpdate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contract_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.goal_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ContractSimResultUpdate.GoalInfo.deserialize(reader), ContractSimResultUpdate.GoalInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractSimResultUpdate {
            return ContractSimResultUpdate.deserialize(bytes);
        }
    }
    export namespace ContractSimResultUpdate {
        export class GoalInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                grade?: Contract.PlayerGrade;
                goal_index?: number;
                projected_eggs_laid?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("grade" in data && data.grade != undefined) {
                        this.grade = data.grade;
                    }
                    if ("goal_index" in data && data.goal_index != undefined) {
                        this.goal_index = data.goal_index;
                    }
                    if ("projected_eggs_laid" in data && data.projected_eggs_laid != undefined) {
                        this.projected_eggs_laid = data.projected_eggs_laid;
                    }
                }
            }
            get grade() {
                return pb_1.Message.getFieldWithDefault(this, 1, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
            }
            set grade(value: Contract.PlayerGrade) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_grade() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get goal_index() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set goal_index(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_goal_index() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get projected_eggs_laid() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set projected_eggs_laid(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_projected_eggs_laid() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                grade?: Contract.PlayerGrade;
                goal_index?: number;
                projected_eggs_laid?: number;
            }): GoalInfo {
                const message = new GoalInfo({});
                if (data.grade != null) {
                    message.grade = data.grade;
                }
                if (data.goal_index != null) {
                    message.goal_index = data.goal_index;
                }
                if (data.projected_eggs_laid != null) {
                    message.projected_eggs_laid = data.projected_eggs_laid;
                }
                return message;
            }
            toObject() {
                const data: {
                    grade?: Contract.PlayerGrade;
                    goal_index?: number;
                    projected_eggs_laid?: number;
                } = {};
                if (this.grade != null) {
                    data.grade = this.grade;
                }
                if (this.goal_index != null) {
                    data.goal_index = this.goal_index;
                }
                if (this.projected_eggs_laid != null) {
                    data.projected_eggs_laid = this.projected_eggs_laid;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_grade)
                    writer.writeEnum(1, this.grade);
                if (this.has_goal_index)
                    writer.writeUint32(2, this.goal_index);
                if (this.has_projected_eggs_laid)
                    writer.writeDouble(3, this.projected_eggs_laid);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GoalInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GoalInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.grade = reader.readEnum();
                            break;
                        case 2:
                            message.goal_index = reader.readUint32();
                            break;
                        case 3:
                            message.projected_eggs_laid = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): GoalInfo {
                return GoalInfo.deserialize(bytes);
            }
        }
    }
    export class ContractsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            soul_eggs?: number;
            client_version?: number;
            user_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("soul_eggs" in data && data.soul_eggs != undefined) {
                    this.soul_eggs = data.soul_eggs;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get soul_eggs() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set soul_eggs(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_soul_eggs() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            soul_eggs?: number;
            client_version?: number;
            user_id?: string;
        }): ContractsRequest {
            const message = new ContractsRequest({});
            if (data.soul_eggs != null) {
                message.soul_eggs = data.soul_eggs;
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                soul_eggs?: number;
                client_version?: number;
                user_id?: string;
            } = {};
            if (this.soul_eggs != null) {
                data.soul_eggs = this.soul_eggs;
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_soul_eggs)
                writer.writeDouble(1, this.soul_eggs);
            if (this.has_client_version)
                writer.writeUint32(5, this.client_version);
            if (this.has_user_id && this.user_id.length)
                writer.writeString(2, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.soul_eggs = reader.readDouble();
                        break;
                    case 5:
                        message.client_version = reader.readUint32();
                        break;
                    case 2:
                        message.user_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractsRequest {
            return ContractsRequest.deserialize(bytes);
        }
    }
    export class ContractsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contracts: Contract[];
            custom_eggs: CustomEgg[];
            warning_message?: string;
            total_eop?: number;
            server_time?: number;
            max_eop?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.contracts = data.contracts;
                this.custom_eggs = data.custom_eggs;
                if ("warning_message" in data && data.warning_message != undefined) {
                    this.warning_message = data.warning_message;
                }
                if ("total_eop" in data && data.total_eop != undefined) {
                    this.total_eop = data.total_eop;
                }
                if ("server_time" in data && data.server_time != undefined) {
                    this.server_time = data.server_time;
                }
                if ("max_eop" in data && data.max_eop != undefined) {
                    this.max_eop = data.max_eop;
                }
            }
        }
        get contracts() {
            return pb_1.Message.getRepeatedWrapperField(this, Contract, 1) as Contract[];
        }
        set contracts(value: Contract[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get custom_eggs() {
            return pb_1.Message.getRepeatedWrapperField(this, CustomEgg, 6) as CustomEgg[];
        }
        set custom_eggs(value: CustomEgg[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get warning_message() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set warning_message(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_warning_message() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get total_eop() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set total_eop(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_total_eop() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get server_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set server_time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_server_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get max_eop() {
            return pb_1.Message.getFieldWithDefault(this, 3, 1000) as number;
        }
        set max_eop(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_max_eop() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            contracts?: ReturnType<typeof Contract.prototype.toObject>[];
            custom_eggs?: ReturnType<typeof CustomEgg.prototype.toObject>[];
            warning_message?: string;
            total_eop?: number;
            server_time?: number;
            max_eop?: number;
        }): ContractsResponse {
            const message = new ContractsResponse({
                contracts: data.contracts.map(item => Contract.fromObject(item)),
                custom_eggs: data.custom_eggs.map(item => CustomEgg.fromObject(item))
            });
            if (data.warning_message != null) {
                message.warning_message = data.warning_message;
            }
            if (data.total_eop != null) {
                message.total_eop = data.total_eop;
            }
            if (data.server_time != null) {
                message.server_time = data.server_time;
            }
            if (data.max_eop != null) {
                message.max_eop = data.max_eop;
            }
            return message;
        }
        toObject() {
            const data: {
                contracts?: ReturnType<typeof Contract.prototype.toObject>[];
                custom_eggs?: ReturnType<typeof CustomEgg.prototype.toObject>[];
                warning_message?: string;
                total_eop?: number;
                server_time?: number;
                max_eop?: number;
            } = {};
            if (this.contracts != null) {
                data.contracts = this.contracts.map((item: Contract) => item.toObject());
            }
            if (this.custom_eggs != null) {
                data.custom_eggs = this.custom_eggs.map((item: CustomEgg) => item.toObject());
            }
            if (this.warning_message != null) {
                data.warning_message = this.warning_message;
            }
            if (this.total_eop != null) {
                data.total_eop = this.total_eop;
            }
            if (this.server_time != null) {
                data.server_time = this.server_time;
            }
            if (this.max_eop != null) {
                data.max_eop = this.max_eop;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contracts.length)
                writer.writeRepeatedMessage(1, this.contracts, (item: Contract) => item.serialize(writer));
            if (this.custom_eggs.length)
                writer.writeRepeatedMessage(6, this.custom_eggs, (item: CustomEgg) => item.serialize(writer));
            if (this.has_warning_message && this.warning_message.length)
                writer.writeString(4, this.warning_message);
            if (this.has_total_eop)
                writer.writeDouble(5, this.total_eop);
            if (this.has_server_time)
                writer.writeDouble(2, this.server_time);
            if (this.has_max_eop)
                writer.writeUint32(3, this.max_eop);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.contracts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Contract.deserialize(reader), Contract));
                        break;
                    case 6:
                        reader.readMessage(message.custom_eggs, () => pb_1.Message.addToRepeatedWrapperField(message, 6, CustomEgg.deserialize(reader), CustomEgg));
                        break;
                    case 4:
                        message.warning_message = reader.readString();
                        break;
                    case 5:
                        message.total_eop = reader.readDouble();
                        break;
                    case 2:
                        message.server_time = reader.readDouble();
                        break;
                    case 3:
                        message.max_eop = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractsResponse {
            return ContractsResponse.deserialize(bytes);
        }
    }
    export class ContractCoopStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            contract_identifier?: string;
            coop_identifier?: string;
            user_id?: string;
            client_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("contract_identifier" in data && data.contract_identifier != undefined) {
                    this.contract_identifier = data.contract_identifier;
                }
                if ("coop_identifier" in data && data.coop_identifier != undefined) {
                    this.coop_identifier = data.coop_identifier;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 5) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get contract_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_contract_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get coop_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set coop_identifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_coop_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            contract_identifier?: string;
            coop_identifier?: string;
            user_id?: string;
            client_version?: number;
        }): ContractCoopStatusRequest {
            const message = new ContractCoopStatusRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.contract_identifier != null) {
                message.contract_identifier = data.contract_identifier;
            }
            if (data.coop_identifier != null) {
                message.coop_identifier = data.coop_identifier;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                contract_identifier?: string;
                coop_identifier?: string;
                user_id?: string;
                client_version?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.contract_identifier != null) {
                data.contract_identifier = this.contract_identifier;
            }
            if (this.coop_identifier != null) {
                data.coop_identifier = this.coop_identifier;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(5, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_contract_identifier && this.contract_identifier.length)
                writer.writeString(1, this.contract_identifier);
            if (this.has_coop_identifier && this.coop_identifier.length)
                writer.writeString(2, this.coop_identifier);
            if (this.has_user_id && this.user_id.length)
                writer.writeString(3, this.user_id);
            if (this.has_client_version)
                writer.writeUint32(4, this.client_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractCoopStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractCoopStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 5:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.contract_identifier = reader.readString();
                        break;
                    case 2:
                        message.coop_identifier = reader.readString();
                        break;
                    case 3:
                        message.user_id = reader.readString();
                        break;
                    case 4:
                        message.client_version = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractCoopStatusRequest {
            return ContractCoopStatusRequest.deserialize(bytes);
        }
    }
    export class FarmProductionParams extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            farm_population?: number;
            farm_capacity?: number;
            elr?: number;
            ihr?: number;
            sr?: number;
            delivered?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("farm_population" in data && data.farm_population != undefined) {
                    this.farm_population = data.farm_population;
                }
                if ("farm_capacity" in data && data.farm_capacity != undefined) {
                    this.farm_capacity = data.farm_capacity;
                }
                if ("elr" in data && data.elr != undefined) {
                    this.elr = data.elr;
                }
                if ("ihr" in data && data.ihr != undefined) {
                    this.ihr = data.ihr;
                }
                if ("sr" in data && data.sr != undefined) {
                    this.sr = data.sr;
                }
                if ("delivered" in data && data.delivered != undefined) {
                    this.delivered = data.delivered;
                }
            }
        }
        get farm_population() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set farm_population(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_farm_population() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get farm_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set farm_capacity(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_farm_capacity() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get elr() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set elr(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_elr() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get ihr() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set ihr(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_ihr() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get sr() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set sr(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_sr() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get delivered() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set delivered(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_delivered() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            farm_population?: number;
            farm_capacity?: number;
            elr?: number;
            ihr?: number;
            sr?: number;
            delivered?: number;
        }): FarmProductionParams {
            const message = new FarmProductionParams({});
            if (data.farm_population != null) {
                message.farm_population = data.farm_population;
            }
            if (data.farm_capacity != null) {
                message.farm_capacity = data.farm_capacity;
            }
            if (data.elr != null) {
                message.elr = data.elr;
            }
            if (data.ihr != null) {
                message.ihr = data.ihr;
            }
            if (data.sr != null) {
                message.sr = data.sr;
            }
            if (data.delivered != null) {
                message.delivered = data.delivered;
            }
            return message;
        }
        toObject() {
            const data: {
                farm_population?: number;
                farm_capacity?: number;
                elr?: number;
                ihr?: number;
                sr?: number;
                delivered?: number;
            } = {};
            if (this.farm_population != null) {
                data.farm_population = this.farm_population;
            }
            if (this.farm_capacity != null) {
                data.farm_capacity = this.farm_capacity;
            }
            if (this.elr != null) {
                data.elr = this.elr;
            }
            if (this.ihr != null) {
                data.ihr = this.ihr;
            }
            if (this.sr != null) {
                data.sr = this.sr;
            }
            if (this.delivered != null) {
                data.delivered = this.delivered;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_farm_population)
                writer.writeDouble(1, this.farm_population);
            if (this.has_farm_capacity)
                writer.writeDouble(2, this.farm_capacity);
            if (this.has_elr)
                writer.writeDouble(3, this.elr);
            if (this.has_ihr)
                writer.writeDouble(4, this.ihr);
            if (this.has_sr)
                writer.writeDouble(5, this.sr);
            if (this.has_delivered)
                writer.writeDouble(6, this.delivered);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FarmProductionParams {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FarmProductionParams();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.farm_population = reader.readDouble();
                        break;
                    case 2:
                        message.farm_capacity = reader.readDouble();
                        break;
                    case 3:
                        message.elr = reader.readDouble();
                        break;
                    case 4:
                        message.ihr = reader.readDouble();
                        break;
                    case 5:
                        message.sr = reader.readDouble();
                        break;
                    case 6:
                        message.delivered = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FarmProductionParams {
            return FarmProductionParams.deserialize(bytes);
        }
    }
    export class PlayerFarmInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            client_version?: number;
            soul_eggs?: number;
            eggs_of_prophecy?: number;
            permit_level?: number;
            hyperloop_station?: boolean;
            egg_medal_level: number[];
            epic_research: Backup.ResearchItem[];
            egg_type?: Egg;
            cash_on_hand?: number;
            habs: number[];
            hab_population: number[];
            hab_capacity: number[];
            vehicles: number[];
            train_length: number[];
            silos_owned?: number;
            common_research: Backup.ResearchItem[];
            active_boosts: Backup.ActiveBoost[];
            boost_tokens_on_hand?: number;
            equipped_artifacts: CompleteArtifact[];
            artifact_inventory_score?: number;
            farm_appearance?: ShellDB.FarmConfiguration;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6, 9, 10, 21, 11, 12, 14, 15, 17], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
                if ("soul_eggs" in data && data.soul_eggs != undefined) {
                    this.soul_eggs = data.soul_eggs;
                }
                if ("eggs_of_prophecy" in data && data.eggs_of_prophecy != undefined) {
                    this.eggs_of_prophecy = data.eggs_of_prophecy;
                }
                if ("permit_level" in data && data.permit_level != undefined) {
                    this.permit_level = data.permit_level;
                }
                if ("hyperloop_station" in data && data.hyperloop_station != undefined) {
                    this.hyperloop_station = data.hyperloop_station;
                }
                this.egg_medal_level = data.egg_medal_level;
                this.epic_research = data.epic_research;
                if ("egg_type" in data && data.egg_type != undefined) {
                    this.egg_type = data.egg_type;
                }
                if ("cash_on_hand" in data && data.cash_on_hand != undefined) {
                    this.cash_on_hand = data.cash_on_hand;
                }
                this.habs = data.habs;
                this.hab_population = data.hab_population;
                this.hab_capacity = data.hab_capacity;
                this.vehicles = data.vehicles;
                this.train_length = data.train_length;
                if ("silos_owned" in data && data.silos_owned != undefined) {
                    this.silos_owned = data.silos_owned;
                }
                this.common_research = data.common_research;
                this.active_boosts = data.active_boosts;
                if ("boost_tokens_on_hand" in data && data.boost_tokens_on_hand != undefined) {
                    this.boost_tokens_on_hand = data.boost_tokens_on_hand;
                }
                this.equipped_artifacts = data.equipped_artifacts;
                if ("artifact_inventory_score" in data && data.artifact_inventory_score != undefined) {
                    this.artifact_inventory_score = data.artifact_inventory_score;
                }
                if ("farm_appearance" in data && data.farm_appearance != undefined) {
                    this.farm_appearance = data.farm_appearance;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get soul_eggs() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set soul_eggs(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_soul_eggs() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get eggs_of_prophecy() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set eggs_of_prophecy(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_eggs_of_prophecy() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get permit_level() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set permit_level(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_permit_level() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get hyperloop_station() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set hyperloop_station(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_hyperloop_station() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get egg_medal_level() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
        }
        set egg_medal_level(value: number[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get epic_research() {
            return pb_1.Message.getRepeatedWrapperField(this, Backup.ResearchItem, 6) as Backup.ResearchItem[];
        }
        set epic_research(value: Backup.ResearchItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get egg_type() {
            return pb_1.Message.getFieldWithDefault(this, 7, Egg.EDIBLE) as Egg;
        }
        set egg_type(value: Egg) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_egg_type() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get cash_on_hand() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set cash_on_hand(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_cash_on_hand() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get habs() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as number[];
        }
        set habs(value: number[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get hab_population() {
            return pb_1.Message.getFieldWithDefault(this, 10, []) as number[];
        }
        set hab_population(value: number[]) {
            pb_1.Message.setField(this, 10, value);
        }
        get hab_capacity() {
            return pb_1.Message.getFieldWithDefault(this, 21, []) as number[];
        }
        set hab_capacity(value: number[]) {
            pb_1.Message.setField(this, 21, value);
        }
        get vehicles() {
            return pb_1.Message.getFieldWithDefault(this, 11, []) as number[];
        }
        set vehicles(value: number[]) {
            pb_1.Message.setField(this, 11, value);
        }
        get train_length() {
            return pb_1.Message.getFieldWithDefault(this, 12, []) as number[];
        }
        set train_length(value: number[]) {
            pb_1.Message.setField(this, 12, value);
        }
        get silos_owned() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set silos_owned(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_silos_owned() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get common_research() {
            return pb_1.Message.getRepeatedWrapperField(this, Backup.ResearchItem, 14) as Backup.ResearchItem[];
        }
        set common_research(value: Backup.ResearchItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 14, value);
        }
        get active_boosts() {
            return pb_1.Message.getRepeatedWrapperField(this, Backup.ActiveBoost, 15) as Backup.ActiveBoost[];
        }
        set active_boosts(value: Backup.ActiveBoost[]) {
            pb_1.Message.setRepeatedWrapperField(this, 15, value);
        }
        get boost_tokens_on_hand() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set boost_tokens_on_hand(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_boost_tokens_on_hand() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get equipped_artifacts() {
            return pb_1.Message.getRepeatedWrapperField(this, CompleteArtifact, 17) as CompleteArtifact[];
        }
        set equipped_artifacts(value: CompleteArtifact[]) {
            pb_1.Message.setRepeatedWrapperField(this, 17, value);
        }
        get artifact_inventory_score() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set artifact_inventory_score(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get has_artifact_inventory_score() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get farm_appearance() {
            return pb_1.Message.getWrapperField(this, ShellDB.FarmConfiguration, 19) as ShellDB.FarmConfiguration;
        }
        set farm_appearance(value: ShellDB.FarmConfiguration) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get has_farm_appearance() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 22) != null;
        }
        static fromObject(data: {
            client_version?: number;
            soul_eggs?: number;
            eggs_of_prophecy?: number;
            permit_level?: number;
            hyperloop_station?: boolean;
            egg_medal_level: number[];
            epic_research?: ReturnType<typeof Backup.ResearchItem.prototype.toObject>[];
            egg_type?: Egg;
            cash_on_hand?: number;
            habs: number[];
            hab_population: number[];
            hab_capacity: number[];
            vehicles: number[];
            train_length: number[];
            silos_owned?: number;
            common_research?: ReturnType<typeof Backup.ResearchItem.prototype.toObject>[];
            active_boosts?: ReturnType<typeof Backup.ActiveBoost.prototype.toObject>[];
            boost_tokens_on_hand?: number;
            equipped_artifacts?: ReturnType<typeof CompleteArtifact.prototype.toObject>[];
            artifact_inventory_score?: number;
            farm_appearance?: ReturnType<typeof ShellDB.FarmConfiguration.prototype.toObject>;
            timestamp?: number;
        }): PlayerFarmInfo {
            const message = new PlayerFarmInfo({
                egg_medal_level: data.egg_medal_level,
                epic_research: data.epic_research.map(item => Backup.ResearchItem.fromObject(item)),
                habs: data.habs,
                hab_population: data.hab_population,
                hab_capacity: data.hab_capacity,
                vehicles: data.vehicles,
                train_length: data.train_length,
                common_research: data.common_research.map(item => Backup.ResearchItem.fromObject(item)),
                active_boosts: data.active_boosts.map(item => Backup.ActiveBoost.fromObject(item)),
                equipped_artifacts: data.equipped_artifacts.map(item => CompleteArtifact.fromObject(item))
            });
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            if (data.soul_eggs != null) {
                message.soul_eggs = data.soul_eggs;
            }
            if (data.eggs_of_prophecy != null) {
                message.eggs_of_prophecy = data.eggs_of_prophecy;
            }
            if (data.permit_level != null) {
                message.permit_level = data.permit_level;
            }
            if (data.hyperloop_station != null) {
                message.hyperloop_station = data.hyperloop_station;
            }
            if (data.egg_type != null) {
                message.egg_type = data.egg_type;
            }
            if (data.cash_on_hand != null) {
                message.cash_on_hand = data.cash_on_hand;
            }
            if (data.silos_owned != null) {
                message.silos_owned = data.silos_owned;
            }
            if (data.boost_tokens_on_hand != null) {
                message.boost_tokens_on_hand = data.boost_tokens_on_hand;
            }
            if (data.artifact_inventory_score != null) {
                message.artifact_inventory_score = data.artifact_inventory_score;
            }
            if (data.farm_appearance != null) {
                message.farm_appearance = ShellDB.FarmConfiguration.fromObject(data.farm_appearance);
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                client_version?: number;
                soul_eggs?: number;
                eggs_of_prophecy?: number;
                permit_level?: number;
                hyperloop_station?: boolean;
                egg_medal_level: number[];
                epic_research?: ReturnType<typeof Backup.ResearchItem.prototype.toObject>[];
                egg_type?: Egg;
                cash_on_hand?: number;
                habs: number[];
                hab_population: number[];
                hab_capacity: number[];
                vehicles: number[];
                train_length: number[];
                silos_owned?: number;
                common_research?: ReturnType<typeof Backup.ResearchItem.prototype.toObject>[];
                active_boosts?: ReturnType<typeof Backup.ActiveBoost.prototype.toObject>[];
                boost_tokens_on_hand?: number;
                equipped_artifacts?: ReturnType<typeof CompleteArtifact.prototype.toObject>[];
                artifact_inventory_score?: number;
                farm_appearance?: ReturnType<typeof ShellDB.FarmConfiguration.prototype.toObject>;
                timestamp?: number;
            } = {
                egg_medal_level: this.egg_medal_level,
                habs: this.habs,
                hab_population: this.hab_population,
                hab_capacity: this.hab_capacity,
                vehicles: this.vehicles,
                train_length: this.train_length
            };
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            if (this.soul_eggs != null) {
                data.soul_eggs = this.soul_eggs;
            }
            if (this.eggs_of_prophecy != null) {
                data.eggs_of_prophecy = this.eggs_of_prophecy;
            }
            if (this.permit_level != null) {
                data.permit_level = this.permit_level;
            }
            if (this.hyperloop_station != null) {
                data.hyperloop_station = this.hyperloop_station;
            }
            if (this.epic_research != null) {
                data.epic_research = this.epic_research.map((item: Backup.ResearchItem) => item.toObject());
            }
            if (this.egg_type != null) {
                data.egg_type = this.egg_type;
            }
            if (this.cash_on_hand != null) {
                data.cash_on_hand = this.cash_on_hand;
            }
            if (this.silos_owned != null) {
                data.silos_owned = this.silos_owned;
            }
            if (this.common_research != null) {
                data.common_research = this.common_research.map((item: Backup.ResearchItem) => item.toObject());
            }
            if (this.active_boosts != null) {
                data.active_boosts = this.active_boosts.map((item: Backup.ActiveBoost) => item.toObject());
            }
            if (this.boost_tokens_on_hand != null) {
                data.boost_tokens_on_hand = this.boost_tokens_on_hand;
            }
            if (this.equipped_artifacts != null) {
                data.equipped_artifacts = this.equipped_artifacts.map((item: CompleteArtifact) => item.toObject());
            }
            if (this.artifact_inventory_score != null) {
                data.artifact_inventory_score = this.artifact_inventory_score;
            }
            if (this.farm_appearance != null) {
                data.farm_appearance = this.farm_appearance.toObject();
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_client_version)
                writer.writeUint32(20, this.client_version);
            if (this.has_soul_eggs)
                writer.writeDouble(1, this.soul_eggs);
            if (this.has_eggs_of_prophecy)
                writer.writeUint64(2, this.eggs_of_prophecy);
            if (this.has_permit_level)
                writer.writeUint32(3, this.permit_level);
            if (this.has_hyperloop_station)
                writer.writeBool(4, this.hyperloop_station);
            if (this.egg_medal_level.length)
                writer.writeRepeatedUint32(5, this.egg_medal_level);
            if (this.epic_research.length)
                writer.writeRepeatedMessage(6, this.epic_research, (item: Backup.ResearchItem) => item.serialize(writer));
            if (this.has_egg_type)
                writer.writeEnum(7, this.egg_type);
            if (this.has_cash_on_hand)
                writer.writeDouble(8, this.cash_on_hand);
            if (this.habs.length)
                writer.writeRepeatedUint32(9, this.habs);
            if (this.hab_population.length)
                writer.writeRepeatedUint64(10, this.hab_population);
            if (this.hab_capacity.length)
                writer.writeRepeatedUint64(21, this.hab_capacity);
            if (this.vehicles.length)
                writer.writeRepeatedUint32(11, this.vehicles);
            if (this.train_length.length)
                writer.writeRepeatedUint32(12, this.train_length);
            if (this.has_silos_owned)
                writer.writeUint32(13, this.silos_owned);
            if (this.common_research.length)
                writer.writeRepeatedMessage(14, this.common_research, (item: Backup.ResearchItem) => item.serialize(writer));
            if (this.active_boosts.length)
                writer.writeRepeatedMessage(15, this.active_boosts, (item: Backup.ActiveBoost) => item.serialize(writer));
            if (this.has_boost_tokens_on_hand)
                writer.writeUint32(16, this.boost_tokens_on_hand);
            if (this.equipped_artifacts.length)
                writer.writeRepeatedMessage(17, this.equipped_artifacts, (item: CompleteArtifact) => item.serialize(writer));
            if (this.has_artifact_inventory_score)
                writer.writeUint64(18, this.artifact_inventory_score);
            if (this.has_farm_appearance)
                writer.writeMessage(19, this.farm_appearance, () => this.farm_appearance.serialize(writer));
            if (this.has_timestamp)
                writer.writeDouble(22, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerFarmInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerFarmInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 20:
                        message.client_version = reader.readUint32();
                        break;
                    case 1:
                        message.soul_eggs = reader.readDouble();
                        break;
                    case 2:
                        message.eggs_of_prophecy = reader.readUint64();
                        break;
                    case 3:
                        message.permit_level = reader.readUint32();
                        break;
                    case 4:
                        message.hyperloop_station = reader.readBool();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readUint32());
                        break;
                    case 6:
                        reader.readMessage(message.epic_research, () => pb_1.Message.addToRepeatedWrapperField(message, 6, Backup.ResearchItem.deserialize(reader), Backup.ResearchItem));
                        break;
                    case 7:
                        message.egg_type = reader.readEnum();
                        break;
                    case 8:
                        message.cash_on_hand = reader.readDouble();
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readUint32());
                        break;
                    case 10:
                        pb_1.Message.addToRepeatedField(message, 10, reader.readUint64());
                        break;
                    case 21:
                        pb_1.Message.addToRepeatedField(message, 21, reader.readUint64());
                        break;
                    case 11:
                        pb_1.Message.addToRepeatedField(message, 11, reader.readUint32());
                        break;
                    case 12:
                        pb_1.Message.addToRepeatedField(message, 12, reader.readUint32());
                        break;
                    case 13:
                        message.silos_owned = reader.readUint32();
                        break;
                    case 14:
                        reader.readMessage(message.common_research, () => pb_1.Message.addToRepeatedWrapperField(message, 14, Backup.ResearchItem.deserialize(reader), Backup.ResearchItem));
                        break;
                    case 15:
                        reader.readMessage(message.active_boosts, () => pb_1.Message.addToRepeatedWrapperField(message, 15, Backup.ActiveBoost.deserialize(reader), Backup.ActiveBoost));
                        break;
                    case 16:
                        message.boost_tokens_on_hand = reader.readUint32();
                        break;
                    case 17:
                        reader.readMessage(message.equipped_artifacts, () => pb_1.Message.addToRepeatedWrapperField(message, 17, CompleteArtifact.deserialize(reader), CompleteArtifact));
                        break;
                    case 18:
                        message.artifact_inventory_score = reader.readUint64();
                        break;
                    case 19:
                        reader.readMessage(message.farm_appearance, () => message.farm_appearance = ShellDB.FarmConfiguration.deserialize(reader));
                        break;
                    case 22:
                        message.timestamp = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PlayerFarmInfo {
            return PlayerFarmInfo.deserialize(bytes);
        }
    }
    export class ContractCoopStatusResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            response_status?: ContractCoopStatusResponse.ResponseStatus;
            contract_identifier?: string;
            total_amount?: number;
            coop_identifier?: string;
            grade?: Contract.PlayerGrade;
            contributors: ContractCoopStatusResponse.ContributionInfo[];
            auto_generated?: boolean;
            public?: boolean;
            creator_id?: string;
            seconds_remaining?: number;
            seconds_since_all_goals_achieved?: number;
            all_goals_achieved?: boolean;
            all_members_reporting?: boolean;
            grace_period_seconds_remaining?: number;
            cleared_for_exit?: boolean;
            gifts: ContractCoopStatusResponse.CoopGift[];
            chicken_runs: ContractCoopStatusResponse.ChickenRun[];
            local_timestamp?: number;
            last_sync?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 11, 13], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("response_status" in data && data.response_status != undefined) {
                    this.response_status = data.response_status;
                }
                if ("contract_identifier" in data && data.contract_identifier != undefined) {
                    this.contract_identifier = data.contract_identifier;
                }
                if ("total_amount" in data && data.total_amount != undefined) {
                    this.total_amount = data.total_amount;
                }
                if ("coop_identifier" in data && data.coop_identifier != undefined) {
                    this.coop_identifier = data.coop_identifier;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                this.contributors = data.contributors;
                if ("auto_generated" in data && data.auto_generated != undefined) {
                    this.auto_generated = data.auto_generated;
                }
                if ("public" in data && data.public != undefined) {
                    this.public = data.public;
                }
                if ("creator_id" in data && data.creator_id != undefined) {
                    this.creator_id = data.creator_id;
                }
                if ("seconds_remaining" in data && data.seconds_remaining != undefined) {
                    this.seconds_remaining = data.seconds_remaining;
                }
                if ("seconds_since_all_goals_achieved" in data && data.seconds_since_all_goals_achieved != undefined) {
                    this.seconds_since_all_goals_achieved = data.seconds_since_all_goals_achieved;
                }
                if ("all_goals_achieved" in data && data.all_goals_achieved != undefined) {
                    this.all_goals_achieved = data.all_goals_achieved;
                }
                if ("all_members_reporting" in data && data.all_members_reporting != undefined) {
                    this.all_members_reporting = data.all_members_reporting;
                }
                if ("grace_period_seconds_remaining" in data && data.grace_period_seconds_remaining != undefined) {
                    this.grace_period_seconds_remaining = data.grace_period_seconds_remaining;
                }
                if ("cleared_for_exit" in data && data.cleared_for_exit != undefined) {
                    this.cleared_for_exit = data.cleared_for_exit;
                }
                this.gifts = data.gifts;
                this.chicken_runs = data.chicken_runs;
                if ("local_timestamp" in data && data.local_timestamp != undefined) {
                    this.local_timestamp = data.local_timestamp;
                }
                if ("last_sync" in data && data.last_sync != undefined) {
                    this.last_sync = data.last_sync;
                }
            }
        }
        get response_status() {
            return pb_1.Message.getFieldWithDefault(this, 19, ContractCoopStatusResponse.ResponseStatus.NO_ERROR) as ContractCoopStatusResponse.ResponseStatus;
        }
        set response_status(value: ContractCoopStatusResponse.ResponseStatus) {
            pb_1.Message.setField(this, 19, value);
        }
        get has_response_status() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get contract_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_contract_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get total_amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set total_amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_total_amount() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get coop_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set coop_identifier(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_coop_identifier() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 17, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
        }
        set grade(value: Contract.PlayerGrade) {
            pb_1.Message.setField(this, 17, value);
        }
        get has_grade() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get contributors() {
            return pb_1.Message.getRepeatedWrapperField(this, ContractCoopStatusResponse.ContributionInfo, 4) as ContractCoopStatusResponse.ContributionInfo[];
        }
        set contributors(value: ContractCoopStatusResponse.ContributionInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get auto_generated() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set auto_generated(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_auto_generated() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get public() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set public(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_public() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get creator_id() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set creator_id(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_creator_id() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get seconds_remaining() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set seconds_remaining(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_seconds_remaining() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get seconds_since_all_goals_achieved() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set seconds_since_all_goals_achieved(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_seconds_since_all_goals_achieved() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get all_goals_achieved() {
            return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
        }
        set all_goals_achieved(value: boolean) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_all_goals_achieved() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get all_members_reporting() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set all_members_reporting(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_all_members_reporting() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get grace_period_seconds_remaining() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set grace_period_seconds_remaining(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_grace_period_seconds_remaining() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get cleared_for_exit() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set cleared_for_exit(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_cleared_for_exit() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get gifts() {
            return pb_1.Message.getRepeatedWrapperField(this, ContractCoopStatusResponse.CoopGift, 11) as ContractCoopStatusResponse.CoopGift[];
        }
        set gifts(value: ContractCoopStatusResponse.CoopGift[]) {
            pb_1.Message.setRepeatedWrapperField(this, 11, value);
        }
        get chicken_runs() {
            return pb_1.Message.getRepeatedWrapperField(this, ContractCoopStatusResponse.ChickenRun, 13) as ContractCoopStatusResponse.ChickenRun[];
        }
        set chicken_runs(value: ContractCoopStatusResponse.ChickenRun[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get local_timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set local_timestamp(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_local_timestamp() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get last_sync() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set last_sync(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get has_last_sync() {
            return pb_1.Message.getField(this, 18) != null;
        }
        static fromObject(data: {
            response_status?: ContractCoopStatusResponse.ResponseStatus;
            contract_identifier?: string;
            total_amount?: number;
            coop_identifier?: string;
            grade?: Contract.PlayerGrade;
            contributors?: ReturnType<typeof ContractCoopStatusResponse.ContributionInfo.prototype.toObject>[];
            auto_generated?: boolean;
            public?: boolean;
            creator_id?: string;
            seconds_remaining?: number;
            seconds_since_all_goals_achieved?: number;
            all_goals_achieved?: boolean;
            all_members_reporting?: boolean;
            grace_period_seconds_remaining?: number;
            cleared_for_exit?: boolean;
            gifts?: ReturnType<typeof ContractCoopStatusResponse.CoopGift.prototype.toObject>[];
            chicken_runs?: ReturnType<typeof ContractCoopStatusResponse.ChickenRun.prototype.toObject>[];
            local_timestamp?: number;
            last_sync?: number;
        }): ContractCoopStatusResponse {
            const message = new ContractCoopStatusResponse({
                contributors: data.contributors.map(item => ContractCoopStatusResponse.ContributionInfo.fromObject(item)),
                gifts: data.gifts.map(item => ContractCoopStatusResponse.CoopGift.fromObject(item)),
                chicken_runs: data.chicken_runs.map(item => ContractCoopStatusResponse.ChickenRun.fromObject(item))
            });
            if (data.response_status != null) {
                message.response_status = data.response_status;
            }
            if (data.contract_identifier != null) {
                message.contract_identifier = data.contract_identifier;
            }
            if (data.total_amount != null) {
                message.total_amount = data.total_amount;
            }
            if (data.coop_identifier != null) {
                message.coop_identifier = data.coop_identifier;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.auto_generated != null) {
                message.auto_generated = data.auto_generated;
            }
            if (data.public != null) {
                message.public = data.public;
            }
            if (data.creator_id != null) {
                message.creator_id = data.creator_id;
            }
            if (data.seconds_remaining != null) {
                message.seconds_remaining = data.seconds_remaining;
            }
            if (data.seconds_since_all_goals_achieved != null) {
                message.seconds_since_all_goals_achieved = data.seconds_since_all_goals_achieved;
            }
            if (data.all_goals_achieved != null) {
                message.all_goals_achieved = data.all_goals_achieved;
            }
            if (data.all_members_reporting != null) {
                message.all_members_reporting = data.all_members_reporting;
            }
            if (data.grace_period_seconds_remaining != null) {
                message.grace_period_seconds_remaining = data.grace_period_seconds_remaining;
            }
            if (data.cleared_for_exit != null) {
                message.cleared_for_exit = data.cleared_for_exit;
            }
            if (data.local_timestamp != null) {
                message.local_timestamp = data.local_timestamp;
            }
            if (data.last_sync != null) {
                message.last_sync = data.last_sync;
            }
            return message;
        }
        toObject() {
            const data: {
                response_status?: ContractCoopStatusResponse.ResponseStatus;
                contract_identifier?: string;
                total_amount?: number;
                coop_identifier?: string;
                grade?: Contract.PlayerGrade;
                contributors?: ReturnType<typeof ContractCoopStatusResponse.ContributionInfo.prototype.toObject>[];
                auto_generated?: boolean;
                public?: boolean;
                creator_id?: string;
                seconds_remaining?: number;
                seconds_since_all_goals_achieved?: number;
                all_goals_achieved?: boolean;
                all_members_reporting?: boolean;
                grace_period_seconds_remaining?: number;
                cleared_for_exit?: boolean;
                gifts?: ReturnType<typeof ContractCoopStatusResponse.CoopGift.prototype.toObject>[];
                chicken_runs?: ReturnType<typeof ContractCoopStatusResponse.ChickenRun.prototype.toObject>[];
                local_timestamp?: number;
                last_sync?: number;
            } = {};
            if (this.response_status != null) {
                data.response_status = this.response_status;
            }
            if (this.contract_identifier != null) {
                data.contract_identifier = this.contract_identifier;
            }
            if (this.total_amount != null) {
                data.total_amount = this.total_amount;
            }
            if (this.coop_identifier != null) {
                data.coop_identifier = this.coop_identifier;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.contributors != null) {
                data.contributors = this.contributors.map((item: ContractCoopStatusResponse.ContributionInfo) => item.toObject());
            }
            if (this.auto_generated != null) {
                data.auto_generated = this.auto_generated;
            }
            if (this.public != null) {
                data.public = this.public;
            }
            if (this.creator_id != null) {
                data.creator_id = this.creator_id;
            }
            if (this.seconds_remaining != null) {
                data.seconds_remaining = this.seconds_remaining;
            }
            if (this.seconds_since_all_goals_achieved != null) {
                data.seconds_since_all_goals_achieved = this.seconds_since_all_goals_achieved;
            }
            if (this.all_goals_achieved != null) {
                data.all_goals_achieved = this.all_goals_achieved;
            }
            if (this.all_members_reporting != null) {
                data.all_members_reporting = this.all_members_reporting;
            }
            if (this.grace_period_seconds_remaining != null) {
                data.grace_period_seconds_remaining = this.grace_period_seconds_remaining;
            }
            if (this.cleared_for_exit != null) {
                data.cleared_for_exit = this.cleared_for_exit;
            }
            if (this.gifts != null) {
                data.gifts = this.gifts.map((item: ContractCoopStatusResponse.CoopGift) => item.toObject());
            }
            if (this.chicken_runs != null) {
                data.chicken_runs = this.chicken_runs.map((item: ContractCoopStatusResponse.ChickenRun) => item.toObject());
            }
            if (this.local_timestamp != null) {
                data.local_timestamp = this.local_timestamp;
            }
            if (this.last_sync != null) {
                data.last_sync = this.last_sync;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_response_status)
                writer.writeEnum(19, this.response_status);
            if (this.has_contract_identifier && this.contract_identifier.length)
                writer.writeString(1, this.contract_identifier);
            if (this.has_total_amount)
                writer.writeDouble(2, this.total_amount);
            if (this.has_coop_identifier && this.coop_identifier.length)
                writer.writeString(3, this.coop_identifier);
            if (this.has_grade)
                writer.writeEnum(17, this.grade);
            if (this.contributors.length)
                writer.writeRepeatedMessage(4, this.contributors, (item: ContractCoopStatusResponse.ContributionInfo) => item.serialize(writer));
            if (this.has_auto_generated)
                writer.writeBool(8, this.auto_generated);
            if (this.has_public)
                writer.writeBool(10, this.public);
            if (this.has_creator_id && this.creator_id.length)
                writer.writeString(9, this.creator_id);
            if (this.has_seconds_remaining)
                writer.writeDouble(5, this.seconds_remaining);
            if (this.has_seconds_since_all_goals_achieved)
                writer.writeDouble(16, this.seconds_since_all_goals_achieved);
            if (this.has_all_goals_achieved)
                writer.writeBool(14, this.all_goals_achieved);
            if (this.has_all_members_reporting)
                writer.writeBool(6, this.all_members_reporting);
            if (this.has_grace_period_seconds_remaining)
                writer.writeDouble(7, this.grace_period_seconds_remaining);
            if (this.has_cleared_for_exit)
                writer.writeBool(15, this.cleared_for_exit);
            if (this.gifts.length)
                writer.writeRepeatedMessage(11, this.gifts, (item: ContractCoopStatusResponse.CoopGift) => item.serialize(writer));
            if (this.chicken_runs.length)
                writer.writeRepeatedMessage(13, this.chicken_runs, (item: ContractCoopStatusResponse.ChickenRun) => item.serialize(writer));
            if (this.has_local_timestamp)
                writer.writeDouble(12, this.local_timestamp);
            if (this.has_last_sync)
                writer.writeDouble(18, this.last_sync);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractCoopStatusResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractCoopStatusResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 19:
                        message.response_status = reader.readEnum();
                        break;
                    case 1:
                        message.contract_identifier = reader.readString();
                        break;
                    case 2:
                        message.total_amount = reader.readDouble();
                        break;
                    case 3:
                        message.coop_identifier = reader.readString();
                        break;
                    case 17:
                        message.grade = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.contributors, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ContractCoopStatusResponse.ContributionInfo.deserialize(reader), ContractCoopStatusResponse.ContributionInfo));
                        break;
                    case 8:
                        message.auto_generated = reader.readBool();
                        break;
                    case 10:
                        message.public = reader.readBool();
                        break;
                    case 9:
                        message.creator_id = reader.readString();
                        break;
                    case 5:
                        message.seconds_remaining = reader.readDouble();
                        break;
                    case 16:
                        message.seconds_since_all_goals_achieved = reader.readDouble();
                        break;
                    case 14:
                        message.all_goals_achieved = reader.readBool();
                        break;
                    case 6:
                        message.all_members_reporting = reader.readBool();
                        break;
                    case 7:
                        message.grace_period_seconds_remaining = reader.readDouble();
                        break;
                    case 15:
                        message.cleared_for_exit = reader.readBool();
                        break;
                    case 11:
                        reader.readMessage(message.gifts, () => pb_1.Message.addToRepeatedWrapperField(message, 11, ContractCoopStatusResponse.CoopGift.deserialize(reader), ContractCoopStatusResponse.CoopGift));
                        break;
                    case 13:
                        reader.readMessage(message.chicken_runs, () => pb_1.Message.addToRepeatedWrapperField(message, 13, ContractCoopStatusResponse.ChickenRun.deserialize(reader), ContractCoopStatusResponse.ChickenRun));
                        break;
                    case 12:
                        message.local_timestamp = reader.readDouble();
                        break;
                    case 18:
                        message.last_sync = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractCoopStatusResponse {
            return ContractCoopStatusResponse.deserialize(bytes);
        }
    }
    export namespace ContractCoopStatusResponse {
        export enum ResponseStatus {
            NO_ERROR = 0,
            MISSING_USER = 1,
            MISSING_COOP_ID = 2,
            MISSING_CONTRACT_ID = 3,
            MEMBERSHIP_NOT_FOUND = 4,
            COOP_NOT_FOUND = 5,
            CONTRACT_NOT_FOUND = 6,
            INVALID_MEMBERSHIP = 7,
            NO_HTTP_RESPONSE = 500
        }
        export enum MemberStatus {
            VALID = 0,
            KICKED_INACTIVE = 1,
            KICKED_PRIVATE = 2,
            KICKED_CHEATS = 3,
            KICKED_LEECH = 4
        }
        export enum Status {
            UNKNOWN = 0,
            LOBBY = 1,
            ACTIVE = 2,
            COMPLETE = 3,
            FINALIZED = 4
        }
        export class ContributionInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                uuid?: string;
                user_id?: string;
                user_name?: string;
                contract_identifier?: string;
                contribution_amount?: number;
                contribution_rate?: number;
                soul_power?: number;
                production_params?: FarmProductionParams;
                farm_info?: PlayerFarmInfo;
                rank_change?: number;
                recently_active?: boolean;
                active?: boolean;
                cc_member?: boolean;
                leech?: boolean;
                finalized?: boolean;
                time_cheat_detected?: boolean;
                platform?: Platform;
                push_id?: string;
                ban_votes?: number;
                autojoined?: boolean;
                boost_tokens?: number;
                boost_tokens_spent?: number;
                buff_history: CoopBuffState[];
                chicken_run_cooldown?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("uuid" in data && data.uuid != undefined) {
                        this.uuid = data.uuid;
                    }
                    if ("user_id" in data && data.user_id != undefined) {
                        this.user_id = data.user_id;
                    }
                    if ("user_name" in data && data.user_name != undefined) {
                        this.user_name = data.user_name;
                    }
                    if ("contract_identifier" in data && data.contract_identifier != undefined) {
                        this.contract_identifier = data.contract_identifier;
                    }
                    if ("contribution_amount" in data && data.contribution_amount != undefined) {
                        this.contribution_amount = data.contribution_amount;
                    }
                    if ("contribution_rate" in data && data.contribution_rate != undefined) {
                        this.contribution_rate = data.contribution_rate;
                    }
                    if ("soul_power" in data && data.soul_power != undefined) {
                        this.soul_power = data.soul_power;
                    }
                    if ("production_params" in data && data.production_params != undefined) {
                        this.production_params = data.production_params;
                    }
                    if ("farm_info" in data && data.farm_info != undefined) {
                        this.farm_info = data.farm_info;
                    }
                    if ("rank_change" in data && data.rank_change != undefined) {
                        this.rank_change = data.rank_change;
                    }
                    if ("recently_active" in data && data.recently_active != undefined) {
                        this.recently_active = data.recently_active;
                    }
                    if ("active" in data && data.active != undefined) {
                        this.active = data.active;
                    }
                    if ("cc_member" in data && data.cc_member != undefined) {
                        this.cc_member = data.cc_member;
                    }
                    if ("leech" in data && data.leech != undefined) {
                        this.leech = data.leech;
                    }
                    if ("finalized" in data && data.finalized != undefined) {
                        this.finalized = data.finalized;
                    }
                    if ("time_cheat_detected" in data && data.time_cheat_detected != undefined) {
                        this.time_cheat_detected = data.time_cheat_detected;
                    }
                    if ("platform" in data && data.platform != undefined) {
                        this.platform = data.platform;
                    }
                    if ("push_id" in data && data.push_id != undefined) {
                        this.push_id = data.push_id;
                    }
                    if ("ban_votes" in data && data.ban_votes != undefined) {
                        this.ban_votes = data.ban_votes;
                    }
                    if ("autojoined" in data && data.autojoined != undefined) {
                        this.autojoined = data.autojoined;
                    }
                    if ("boost_tokens" in data && data.boost_tokens != undefined) {
                        this.boost_tokens = data.boost_tokens;
                    }
                    if ("boost_tokens_spent" in data && data.boost_tokens_spent != undefined) {
                        this.boost_tokens_spent = data.boost_tokens_spent;
                    }
                    this.buff_history = data.buff_history;
                    if ("chicken_run_cooldown" in data && data.chicken_run_cooldown != undefined) {
                        this.chicken_run_cooldown = data.chicken_run_cooldown;
                    }
                }
            }
            get uuid() {
                return pb_1.Message.getFieldWithDefault(this, 21, "") as string;
            }
            set uuid(value: string) {
                pb_1.Message.setField(this, 21, value);
            }
            get has_uuid() {
                return pb_1.Message.getField(this, 21) != null;
            }
            get user_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set user_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_user_id() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get user_name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set user_name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_user_name() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get contract_identifier() {
                return pb_1.Message.getFieldWithDefault(this, 19, "") as string;
            }
            set contract_identifier(value: string) {
                pb_1.Message.setField(this, 19, value);
            }
            get has_contract_identifier() {
                return pb_1.Message.getField(this, 19) != null;
            }
            get contribution_amount() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set contribution_amount(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_contribution_amount() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get contribution_rate() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set contribution_rate(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_contribution_rate() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get soul_power() {
                return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
            }
            set soul_power(value: number) {
                pb_1.Message.setField(this, 11, value);
            }
            get has_soul_power() {
                return pb_1.Message.getField(this, 11) != null;
            }
            get production_params() {
                return pb_1.Message.getWrapperField(this, FarmProductionParams, 15) as FarmProductionParams;
            }
            set production_params(value: FarmProductionParams) {
                pb_1.Message.setWrapperField(this, 15, value);
            }
            get has_production_params() {
                return pb_1.Message.getField(this, 15) != null;
            }
            get farm_info() {
                return pb_1.Message.getWrapperField(this, PlayerFarmInfo, 18) as PlayerFarmInfo;
            }
            set farm_info(value: PlayerFarmInfo) {
                pb_1.Message.setWrapperField(this, 18, value);
            }
            get has_farm_info() {
                return pb_1.Message.getField(this, 18) != null;
            }
            get rank_change() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set rank_change(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get has_rank_change() {
                return pb_1.Message.getField(this, 8) != null;
            }
            get recently_active() {
                return pb_1.Message.getFieldWithDefault(this, 23, false) as boolean;
            }
            set recently_active(value: boolean) {
                pb_1.Message.setField(this, 23, value);
            }
            get has_recently_active() {
                return pb_1.Message.getField(this, 23) != null;
            }
            get active() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set active(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_active() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get cc_member() {
                return pb_1.Message.getFieldWithDefault(this, 24, false) as boolean;
            }
            set cc_member(value: boolean) {
                pb_1.Message.setField(this, 24, value);
            }
            get has_cc_member() {
                return pb_1.Message.getField(this, 24) != null;
            }
            get leech() {
                return pb_1.Message.getFieldWithDefault(this, 16, false) as boolean;
            }
            set leech(value: boolean) {
                pb_1.Message.setField(this, 16, value);
            }
            get has_leech() {
                return pb_1.Message.getField(this, 16) != null;
            }
            get finalized() {
                return pb_1.Message.getFieldWithDefault(this, 22, false) as boolean;
            }
            set finalized(value: boolean) {
                pb_1.Message.setField(this, 22, value);
            }
            get has_finalized() {
                return pb_1.Message.getField(this, 22) != null;
            }
            get time_cheat_detected() {
                return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
            }
            set time_cheat_detected(value: boolean) {
                pb_1.Message.setField(this, 7, value);
            }
            get has_time_cheat_detected() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get platform() {
                return pb_1.Message.getFieldWithDefault(this, 5, Platform.UNKNOWN_PLATFORM) as Platform;
            }
            set platform(value: Platform) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_platform() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get push_id() {
                return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
            }
            set push_id(value: string) {
                pb_1.Message.setField(this, 9, value);
            }
            get has_push_id() {
                return pb_1.Message.getField(this, 9) != null;
            }
            get ban_votes() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }
            set ban_votes(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get has_ban_votes() {
                return pb_1.Message.getField(this, 10) != null;
            }
            get autojoined() {
                return pb_1.Message.getFieldWithDefault(this, 17, false) as boolean;
            }
            set autojoined(value: boolean) {
                pb_1.Message.setField(this, 17, value);
            }
            get has_autojoined() {
                return pb_1.Message.getField(this, 17) != null;
            }
            get boost_tokens() {
                return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
            }
            set boost_tokens(value: number) {
                pb_1.Message.setField(this, 12, value);
            }
            get has_boost_tokens() {
                return pb_1.Message.getField(this, 12) != null;
            }
            get boost_tokens_spent() {
                return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
            }
            set boost_tokens_spent(value: number) {
                pb_1.Message.setField(this, 14, value);
            }
            get has_boost_tokens_spent() {
                return pb_1.Message.getField(this, 14) != null;
            }
            get buff_history() {
                return pb_1.Message.getRepeatedWrapperField(this, CoopBuffState, 13) as CoopBuffState[];
            }
            set buff_history(value: CoopBuffState[]) {
                pb_1.Message.setRepeatedWrapperField(this, 13, value);
            }
            get chicken_run_cooldown() {
                return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
            }
            set chicken_run_cooldown(value: number) {
                pb_1.Message.setField(this, 20, value);
            }
            get has_chicken_run_cooldown() {
                return pb_1.Message.getField(this, 20) != null;
            }
            static fromObject(data: {
                uuid?: string;
                user_id?: string;
                user_name?: string;
                contract_identifier?: string;
                contribution_amount?: number;
                contribution_rate?: number;
                soul_power?: number;
                production_params?: ReturnType<typeof FarmProductionParams.prototype.toObject>;
                farm_info?: ReturnType<typeof PlayerFarmInfo.prototype.toObject>;
                rank_change?: number;
                recently_active?: boolean;
                active?: boolean;
                cc_member?: boolean;
                leech?: boolean;
                finalized?: boolean;
                time_cheat_detected?: boolean;
                platform?: Platform;
                push_id?: string;
                ban_votes?: number;
                autojoined?: boolean;
                boost_tokens?: number;
                boost_tokens_spent?: number;
                buff_history?: ReturnType<typeof CoopBuffState.prototype.toObject>[];
                chicken_run_cooldown?: number;
            }): ContributionInfo {
                const message = new ContributionInfo({
                    buff_history: data.buff_history.map(item => CoopBuffState.fromObject(item))
                });
                if (data.uuid != null) {
                    message.uuid = data.uuid;
                }
                if (data.user_id != null) {
                    message.user_id = data.user_id;
                }
                if (data.user_name != null) {
                    message.user_name = data.user_name;
                }
                if (data.contract_identifier != null) {
                    message.contract_identifier = data.contract_identifier;
                }
                if (data.contribution_amount != null) {
                    message.contribution_amount = data.contribution_amount;
                }
                if (data.contribution_rate != null) {
                    message.contribution_rate = data.contribution_rate;
                }
                if (data.soul_power != null) {
                    message.soul_power = data.soul_power;
                }
                if (data.production_params != null) {
                    message.production_params = FarmProductionParams.fromObject(data.production_params);
                }
                if (data.farm_info != null) {
                    message.farm_info = PlayerFarmInfo.fromObject(data.farm_info);
                }
                if (data.rank_change != null) {
                    message.rank_change = data.rank_change;
                }
                if (data.recently_active != null) {
                    message.recently_active = data.recently_active;
                }
                if (data.active != null) {
                    message.active = data.active;
                }
                if (data.cc_member != null) {
                    message.cc_member = data.cc_member;
                }
                if (data.leech != null) {
                    message.leech = data.leech;
                }
                if (data.finalized != null) {
                    message.finalized = data.finalized;
                }
                if (data.time_cheat_detected != null) {
                    message.time_cheat_detected = data.time_cheat_detected;
                }
                if (data.platform != null) {
                    message.platform = data.platform;
                }
                if (data.push_id != null) {
                    message.push_id = data.push_id;
                }
                if (data.ban_votes != null) {
                    message.ban_votes = data.ban_votes;
                }
                if (data.autojoined != null) {
                    message.autojoined = data.autojoined;
                }
                if (data.boost_tokens != null) {
                    message.boost_tokens = data.boost_tokens;
                }
                if (data.boost_tokens_spent != null) {
                    message.boost_tokens_spent = data.boost_tokens_spent;
                }
                if (data.chicken_run_cooldown != null) {
                    message.chicken_run_cooldown = data.chicken_run_cooldown;
                }
                return message;
            }
            toObject() {
                const data: {
                    uuid?: string;
                    user_id?: string;
                    user_name?: string;
                    contract_identifier?: string;
                    contribution_amount?: number;
                    contribution_rate?: number;
                    soul_power?: number;
                    production_params?: ReturnType<typeof FarmProductionParams.prototype.toObject>;
                    farm_info?: ReturnType<typeof PlayerFarmInfo.prototype.toObject>;
                    rank_change?: number;
                    recently_active?: boolean;
                    active?: boolean;
                    cc_member?: boolean;
                    leech?: boolean;
                    finalized?: boolean;
                    time_cheat_detected?: boolean;
                    platform?: Platform;
                    push_id?: string;
                    ban_votes?: number;
                    autojoined?: boolean;
                    boost_tokens?: number;
                    boost_tokens_spent?: number;
                    buff_history?: ReturnType<typeof CoopBuffState.prototype.toObject>[];
                    chicken_run_cooldown?: number;
                } = {};
                if (this.uuid != null) {
                    data.uuid = this.uuid;
                }
                if (this.user_id != null) {
                    data.user_id = this.user_id;
                }
                if (this.user_name != null) {
                    data.user_name = this.user_name;
                }
                if (this.contract_identifier != null) {
                    data.contract_identifier = this.contract_identifier;
                }
                if (this.contribution_amount != null) {
                    data.contribution_amount = this.contribution_amount;
                }
                if (this.contribution_rate != null) {
                    data.contribution_rate = this.contribution_rate;
                }
                if (this.soul_power != null) {
                    data.soul_power = this.soul_power;
                }
                if (this.production_params != null) {
                    data.production_params = this.production_params.toObject();
                }
                if (this.farm_info != null) {
                    data.farm_info = this.farm_info.toObject();
                }
                if (this.rank_change != null) {
                    data.rank_change = this.rank_change;
                }
                if (this.recently_active != null) {
                    data.recently_active = this.recently_active;
                }
                if (this.active != null) {
                    data.active = this.active;
                }
                if (this.cc_member != null) {
                    data.cc_member = this.cc_member;
                }
                if (this.leech != null) {
                    data.leech = this.leech;
                }
                if (this.finalized != null) {
                    data.finalized = this.finalized;
                }
                if (this.time_cheat_detected != null) {
                    data.time_cheat_detected = this.time_cheat_detected;
                }
                if (this.platform != null) {
                    data.platform = this.platform;
                }
                if (this.push_id != null) {
                    data.push_id = this.push_id;
                }
                if (this.ban_votes != null) {
                    data.ban_votes = this.ban_votes;
                }
                if (this.autojoined != null) {
                    data.autojoined = this.autojoined;
                }
                if (this.boost_tokens != null) {
                    data.boost_tokens = this.boost_tokens;
                }
                if (this.boost_tokens_spent != null) {
                    data.boost_tokens_spent = this.boost_tokens_spent;
                }
                if (this.buff_history != null) {
                    data.buff_history = this.buff_history.map((item: CoopBuffState) => item.toObject());
                }
                if (this.chicken_run_cooldown != null) {
                    data.chicken_run_cooldown = this.chicken_run_cooldown;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_uuid && this.uuid.length)
                    writer.writeString(21, this.uuid);
                if (this.has_user_id && this.user_id.length)
                    writer.writeString(1, this.user_id);
                if (this.has_user_name && this.user_name.length)
                    writer.writeString(2, this.user_name);
                if (this.has_contract_identifier && this.contract_identifier.length)
                    writer.writeString(19, this.contract_identifier);
                if (this.has_contribution_amount)
                    writer.writeDouble(3, this.contribution_amount);
                if (this.has_contribution_rate)
                    writer.writeDouble(6, this.contribution_rate);
                if (this.has_soul_power)
                    writer.writeDouble(11, this.soul_power);
                if (this.has_production_params)
                    writer.writeMessage(15, this.production_params, () => this.production_params.serialize(writer));
                if (this.has_farm_info)
                    writer.writeMessage(18, this.farm_info, () => this.farm_info.serialize(writer));
                if (this.has_rank_change)
                    writer.writeInt32(8, this.rank_change);
                if (this.has_recently_active)
                    writer.writeBool(23, this.recently_active);
                if (this.has_active)
                    writer.writeBool(4, this.active);
                if (this.has_cc_member)
                    writer.writeBool(24, this.cc_member);
                if (this.has_leech)
                    writer.writeBool(16, this.leech);
                if (this.has_finalized)
                    writer.writeBool(22, this.finalized);
                if (this.has_time_cheat_detected)
                    writer.writeBool(7, this.time_cheat_detected);
                if (this.has_platform)
                    writer.writeEnum(5, this.platform);
                if (this.has_push_id && this.push_id.length)
                    writer.writeString(9, this.push_id);
                if (this.has_ban_votes)
                    writer.writeUint32(10, this.ban_votes);
                if (this.has_autojoined)
                    writer.writeBool(17, this.autojoined);
                if (this.has_boost_tokens)
                    writer.writeUint32(12, this.boost_tokens);
                if (this.has_boost_tokens_spent)
                    writer.writeUint32(14, this.boost_tokens_spent);
                if (this.buff_history.length)
                    writer.writeRepeatedMessage(13, this.buff_history, (item: CoopBuffState) => item.serialize(writer));
                if (this.has_chicken_run_cooldown)
                    writer.writeDouble(20, this.chicken_run_cooldown);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContributionInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContributionInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 21:
                            message.uuid = reader.readString();
                            break;
                        case 1:
                            message.user_id = reader.readString();
                            break;
                        case 2:
                            message.user_name = reader.readString();
                            break;
                        case 19:
                            message.contract_identifier = reader.readString();
                            break;
                        case 3:
                            message.contribution_amount = reader.readDouble();
                            break;
                        case 6:
                            message.contribution_rate = reader.readDouble();
                            break;
                        case 11:
                            message.soul_power = reader.readDouble();
                            break;
                        case 15:
                            reader.readMessage(message.production_params, () => message.production_params = FarmProductionParams.deserialize(reader));
                            break;
                        case 18:
                            reader.readMessage(message.farm_info, () => message.farm_info = PlayerFarmInfo.deserialize(reader));
                            break;
                        case 8:
                            message.rank_change = reader.readInt32();
                            break;
                        case 23:
                            message.recently_active = reader.readBool();
                            break;
                        case 4:
                            message.active = reader.readBool();
                            break;
                        case 24:
                            message.cc_member = reader.readBool();
                            break;
                        case 16:
                            message.leech = reader.readBool();
                            break;
                        case 22:
                            message.finalized = reader.readBool();
                            break;
                        case 7:
                            message.time_cheat_detected = reader.readBool();
                            break;
                        case 5:
                            message.platform = reader.readEnum();
                            break;
                        case 9:
                            message.push_id = reader.readString();
                            break;
                        case 10:
                            message.ban_votes = reader.readUint32();
                            break;
                        case 17:
                            message.autojoined = reader.readBool();
                            break;
                        case 12:
                            message.boost_tokens = reader.readUint32();
                            break;
                        case 14:
                            message.boost_tokens_spent = reader.readUint32();
                            break;
                        case 13:
                            reader.readMessage(message.buff_history, () => pb_1.Message.addToRepeatedWrapperField(message, 13, CoopBuffState.deserialize(reader), CoopBuffState));
                            break;
                        case 20:
                            message.chicken_run_cooldown = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ContributionInfo {
                return ContributionInfo.deserialize(bytes);
            }
        }
        export class CoopGift extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                user_id?: string;
                user_name?: string;
                amount?: number;
                tracking?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("user_id" in data && data.user_id != undefined) {
                        this.user_id = data.user_id;
                    }
                    if ("user_name" in data && data.user_name != undefined) {
                        this.user_name = data.user_name;
                    }
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                    if ("tracking" in data && data.tracking != undefined) {
                        this.tracking = data.tracking;
                    }
                }
            }
            get user_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set user_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_user_id() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get user_name() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set user_name(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_user_name() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_amount() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get tracking() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set tracking(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_tracking() {
                return pb_1.Message.getField(this, 4) != null;
            }
            static fromObject(data: {
                user_id?: string;
                user_name?: string;
                amount?: number;
                tracking?: string;
            }): CoopGift {
                const message = new CoopGift({});
                if (data.user_id != null) {
                    message.user_id = data.user_id;
                }
                if (data.user_name != null) {
                    message.user_name = data.user_name;
                }
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                if (data.tracking != null) {
                    message.tracking = data.tracking;
                }
                return message;
            }
            toObject() {
                const data: {
                    user_id?: string;
                    user_name?: string;
                    amount?: number;
                    tracking?: string;
                } = {};
                if (this.user_id != null) {
                    data.user_id = this.user_id;
                }
                if (this.user_name != null) {
                    data.user_name = this.user_name;
                }
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                if (this.tracking != null) {
                    data.tracking = this.tracking;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_user_id && this.user_id.length)
                    writer.writeString(1, this.user_id);
                if (this.has_user_name && this.user_name.length)
                    writer.writeString(3, this.user_name);
                if (this.has_amount)
                    writer.writeUint32(2, this.amount);
                if (this.has_tracking && this.tracking.length)
                    writer.writeString(4, this.tracking);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CoopGift {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CoopGift();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.user_id = reader.readString();
                            break;
                        case 3:
                            message.user_name = reader.readString();
                            break;
                        case 2:
                            message.amount = reader.readUint32();
                            break;
                        case 4:
                            message.tracking = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CoopGift {
                return CoopGift.deserialize(bytes);
            }
        }
        export class ChickenRun extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                user_id?: string;
                user_name?: string;
                amount?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("user_id" in data && data.user_id != undefined) {
                        this.user_id = data.user_id;
                    }
                    if ("user_name" in data && data.user_name != undefined) {
                        this.user_name = data.user_name;
                    }
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                }
            }
            get user_id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set user_id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_user_id() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get user_name() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set user_name(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_user_name() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_amount() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                user_id?: string;
                user_name?: string;
                amount?: number;
            }): ChickenRun {
                const message = new ChickenRun({});
                if (data.user_id != null) {
                    message.user_id = data.user_id;
                }
                if (data.user_name != null) {
                    message.user_name = data.user_name;
                }
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    user_id?: string;
                    user_name?: string;
                    amount?: number;
                } = {};
                if (this.user_id != null) {
                    data.user_id = this.user_id;
                }
                if (this.user_name != null) {
                    data.user_name = this.user_name;
                }
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_user_id && this.user_id.length)
                    writer.writeString(1, this.user_id);
                if (this.has_user_name && this.user_name.length)
                    writer.writeString(3, this.user_name);
                if (this.has_amount)
                    writer.writeUint64(2, this.amount);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChickenRun {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChickenRun();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.user_id = reader.readString();
                            break;
                        case 3:
                            message.user_name = reader.readString();
                            break;
                        case 2:
                            message.amount = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ChickenRun {
                return ChickenRun.deserialize(bytes);
            }
        }
    }
    export class LocalContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contract?: Contract;
            coop_identifier?: string;
            accepted?: boolean;
            time_accepted?: number;
            cancelled?: boolean;
            new?: boolean;
            coop_shared_end_time?: number;
            coop_simulation_end_time?: number;
            coop_grace_period_end_time?: number;
            coop_contribution_finalized?: boolean;
            coop_last_uploaded_contribution?: number;
            coop_user_id?: string;
            coop_share_farm?: boolean;
            last_amount_when_reward_given?: number;
            num_goals_achieved?: number;
            max_farm_size_reached?: number;
            boosts_used?: number;
            points_replay?: boolean;
            league?: number;
            grade?: Contract.PlayerGrade;
            last_nag_time?: number;
            evaluation?: ContractEvaluation;
            reported_uuids: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [21], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract" in data && data.contract != undefined) {
                    this.contract = data.contract;
                }
                if ("coop_identifier" in data && data.coop_identifier != undefined) {
                    this.coop_identifier = data.coop_identifier;
                }
                if ("accepted" in data && data.accepted != undefined) {
                    this.accepted = data.accepted;
                }
                if ("time_accepted" in data && data.time_accepted != undefined) {
                    this.time_accepted = data.time_accepted;
                }
                if ("cancelled" in data && data.cancelled != undefined) {
                    this.cancelled = data.cancelled;
                }
                if ("new" in data && data.new != undefined) {
                    this.new = data.new;
                }
                if ("coop_shared_end_time" in data && data.coop_shared_end_time != undefined) {
                    this.coop_shared_end_time = data.coop_shared_end_time;
                }
                if ("coop_simulation_end_time" in data && data.coop_simulation_end_time != undefined) {
                    this.coop_simulation_end_time = data.coop_simulation_end_time;
                }
                if ("coop_grace_period_end_time" in data && data.coop_grace_period_end_time != undefined) {
                    this.coop_grace_period_end_time = data.coop_grace_period_end_time;
                }
                if ("coop_contribution_finalized" in data && data.coop_contribution_finalized != undefined) {
                    this.coop_contribution_finalized = data.coop_contribution_finalized;
                }
                if ("coop_last_uploaded_contribution" in data && data.coop_last_uploaded_contribution != undefined) {
                    this.coop_last_uploaded_contribution = data.coop_last_uploaded_contribution;
                }
                if ("coop_user_id" in data && data.coop_user_id != undefined) {
                    this.coop_user_id = data.coop_user_id;
                }
                if ("coop_share_farm" in data && data.coop_share_farm != undefined) {
                    this.coop_share_farm = data.coop_share_farm;
                }
                if ("last_amount_when_reward_given" in data && data.last_amount_when_reward_given != undefined) {
                    this.last_amount_when_reward_given = data.last_amount_when_reward_given;
                }
                if ("num_goals_achieved" in data && data.num_goals_achieved != undefined) {
                    this.num_goals_achieved = data.num_goals_achieved;
                }
                if ("max_farm_size_reached" in data && data.max_farm_size_reached != undefined) {
                    this.max_farm_size_reached = data.max_farm_size_reached;
                }
                if ("boosts_used" in data && data.boosts_used != undefined) {
                    this.boosts_used = data.boosts_used;
                }
                if ("points_replay" in data && data.points_replay != undefined) {
                    this.points_replay = data.points_replay;
                }
                if ("league" in data && data.league != undefined) {
                    this.league = data.league;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                if ("last_nag_time" in data && data.last_nag_time != undefined) {
                    this.last_nag_time = data.last_nag_time;
                }
                if ("evaluation" in data && data.evaluation != undefined) {
                    this.evaluation = data.evaluation;
                }
                this.reported_uuids = data.reported_uuids;
            }
        }
        get contract() {
            return pb_1.Message.getWrapperField(this, Contract, 1) as Contract;
        }
        set contract(value: Contract) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_contract() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get coop_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set coop_identifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_coop_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get accepted() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set accepted(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_accepted() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get time_accepted() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set time_accepted(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_time_accepted() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get cancelled() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set cancelled(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_cancelled() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get new() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set new(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_new() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get coop_shared_end_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set coop_shared_end_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_coop_shared_end_time() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get coop_simulation_end_time() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set coop_simulation_end_time(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        get has_coop_simulation_end_time() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get coop_grace_period_end_time() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set coop_grace_period_end_time(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_coop_grace_period_end_time() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get coop_contribution_finalized() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set coop_contribution_finalized(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_coop_contribution_finalized() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get coop_last_uploaded_contribution() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set coop_last_uploaded_contribution(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_coop_last_uploaded_contribution() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get coop_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set coop_user_id(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_coop_user_id() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get coop_share_farm() {
            return pb_1.Message.getFieldWithDefault(this, 17, false) as boolean;
        }
        set coop_share_farm(value: boolean) {
            pb_1.Message.setField(this, 17, value);
        }
        get has_coop_share_farm() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get last_amount_when_reward_given() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set last_amount_when_reward_given(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_last_amount_when_reward_given() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get num_goals_achieved() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set num_goals_achieved(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_num_goals_achieved() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get max_farm_size_reached() {
            return pb_1.Message.getFieldWithDefault(this, 23, 0) as number;
        }
        set max_farm_size_reached(value: number) {
            pb_1.Message.setField(this, 23, value);
        }
        get has_max_farm_size_reached() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get boosts_used() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set boosts_used(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_boosts_used() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get points_replay() {
            return pb_1.Message.getFieldWithDefault(this, 20, false) as boolean;
        }
        set points_replay(value: boolean) {
            pb_1.Message.setField(this, 20, value);
        }
        get has_points_replay() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get league() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set league(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_league() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 18, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
        }
        set grade(value: Contract.PlayerGrade) {
            pb_1.Message.setField(this, 18, value);
        }
        get has_grade() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get last_nag_time() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set last_nag_time(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_last_nag_time() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get evaluation() {
            return pb_1.Message.getWrapperField(this, ContractEvaluation, 19) as ContractEvaluation;
        }
        set evaluation(value: ContractEvaluation) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get has_evaluation() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get reported_uuids() {
            return pb_1.Message.getFieldWithDefault(this, 21, []) as string[];
        }
        set reported_uuids(value: string[]) {
            pb_1.Message.setField(this, 21, value);
        }
        static fromObject(data: {
            contract?: ReturnType<typeof Contract.prototype.toObject>;
            coop_identifier?: string;
            accepted?: boolean;
            time_accepted?: number;
            cancelled?: boolean;
            new?: boolean;
            coop_shared_end_time?: number;
            coop_simulation_end_time?: number;
            coop_grace_period_end_time?: number;
            coop_contribution_finalized?: boolean;
            coop_last_uploaded_contribution?: number;
            coop_user_id?: string;
            coop_share_farm?: boolean;
            last_amount_when_reward_given?: number;
            num_goals_achieved?: number;
            max_farm_size_reached?: number;
            boosts_used?: number;
            points_replay?: boolean;
            league?: number;
            grade?: Contract.PlayerGrade;
            last_nag_time?: number;
            evaluation?: ReturnType<typeof ContractEvaluation.prototype.toObject>;
            reported_uuids: string[];
        }): LocalContract {
            const message = new LocalContract({
                reported_uuids: data.reported_uuids
            });
            if (data.contract != null) {
                message.contract = Contract.fromObject(data.contract);
            }
            if (data.coop_identifier != null) {
                message.coop_identifier = data.coop_identifier;
            }
            if (data.accepted != null) {
                message.accepted = data.accepted;
            }
            if (data.time_accepted != null) {
                message.time_accepted = data.time_accepted;
            }
            if (data.cancelled != null) {
                message.cancelled = data.cancelled;
            }
            if (data.new != null) {
                message.new = data.new;
            }
            if (data.coop_shared_end_time != null) {
                message.coop_shared_end_time = data.coop_shared_end_time;
            }
            if (data.coop_simulation_end_time != null) {
                message.coop_simulation_end_time = data.coop_simulation_end_time;
            }
            if (data.coop_grace_period_end_time != null) {
                message.coop_grace_period_end_time = data.coop_grace_period_end_time;
            }
            if (data.coop_contribution_finalized != null) {
                message.coop_contribution_finalized = data.coop_contribution_finalized;
            }
            if (data.coop_last_uploaded_contribution != null) {
                message.coop_last_uploaded_contribution = data.coop_last_uploaded_contribution;
            }
            if (data.coop_user_id != null) {
                message.coop_user_id = data.coop_user_id;
            }
            if (data.coop_share_farm != null) {
                message.coop_share_farm = data.coop_share_farm;
            }
            if (data.last_amount_when_reward_given != null) {
                message.last_amount_when_reward_given = data.last_amount_when_reward_given;
            }
            if (data.num_goals_achieved != null) {
                message.num_goals_achieved = data.num_goals_achieved;
            }
            if (data.max_farm_size_reached != null) {
                message.max_farm_size_reached = data.max_farm_size_reached;
            }
            if (data.boosts_used != null) {
                message.boosts_used = data.boosts_used;
            }
            if (data.points_replay != null) {
                message.points_replay = data.points_replay;
            }
            if (data.league != null) {
                message.league = data.league;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.last_nag_time != null) {
                message.last_nag_time = data.last_nag_time;
            }
            if (data.evaluation != null) {
                message.evaluation = ContractEvaluation.fromObject(data.evaluation);
            }
            return message;
        }
        toObject() {
            const data: {
                contract?: ReturnType<typeof Contract.prototype.toObject>;
                coop_identifier?: string;
                accepted?: boolean;
                time_accepted?: number;
                cancelled?: boolean;
                new?: boolean;
                coop_shared_end_time?: number;
                coop_simulation_end_time?: number;
                coop_grace_period_end_time?: number;
                coop_contribution_finalized?: boolean;
                coop_last_uploaded_contribution?: number;
                coop_user_id?: string;
                coop_share_farm?: boolean;
                last_amount_when_reward_given?: number;
                num_goals_achieved?: number;
                max_farm_size_reached?: number;
                boosts_used?: number;
                points_replay?: boolean;
                league?: number;
                grade?: Contract.PlayerGrade;
                last_nag_time?: number;
                evaluation?: ReturnType<typeof ContractEvaluation.prototype.toObject>;
                reported_uuids: string[];
            } = {
                reported_uuids: this.reported_uuids
            };
            if (this.contract != null) {
                data.contract = this.contract.toObject();
            }
            if (this.coop_identifier != null) {
                data.coop_identifier = this.coop_identifier;
            }
            if (this.accepted != null) {
                data.accepted = this.accepted;
            }
            if (this.time_accepted != null) {
                data.time_accepted = this.time_accepted;
            }
            if (this.cancelled != null) {
                data.cancelled = this.cancelled;
            }
            if (this.new != null) {
                data.new = this.new;
            }
            if (this.coop_shared_end_time != null) {
                data.coop_shared_end_time = this.coop_shared_end_time;
            }
            if (this.coop_simulation_end_time != null) {
                data.coop_simulation_end_time = this.coop_simulation_end_time;
            }
            if (this.coop_grace_period_end_time != null) {
                data.coop_grace_period_end_time = this.coop_grace_period_end_time;
            }
            if (this.coop_contribution_finalized != null) {
                data.coop_contribution_finalized = this.coop_contribution_finalized;
            }
            if (this.coop_last_uploaded_contribution != null) {
                data.coop_last_uploaded_contribution = this.coop_last_uploaded_contribution;
            }
            if (this.coop_user_id != null) {
                data.coop_user_id = this.coop_user_id;
            }
            if (this.coop_share_farm != null) {
                data.coop_share_farm = this.coop_share_farm;
            }
            if (this.last_amount_when_reward_given != null) {
                data.last_amount_when_reward_given = this.last_amount_when_reward_given;
            }
            if (this.num_goals_achieved != null) {
                data.num_goals_achieved = this.num_goals_achieved;
            }
            if (this.max_farm_size_reached != null) {
                data.max_farm_size_reached = this.max_farm_size_reached;
            }
            if (this.boosts_used != null) {
                data.boosts_used = this.boosts_used;
            }
            if (this.points_replay != null) {
                data.points_replay = this.points_replay;
            }
            if (this.league != null) {
                data.league = this.league;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.last_nag_time != null) {
                data.last_nag_time = this.last_nag_time;
            }
            if (this.evaluation != null) {
                data.evaluation = this.evaluation.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_contract)
                writer.writeMessage(1, this.contract, () => this.contract.serialize(writer));
            if (this.has_coop_identifier && this.coop_identifier.length)
                writer.writeString(2, this.coop_identifier);
            if (this.has_accepted)
                writer.writeBool(7, this.accepted);
            if (this.has_time_accepted)
                writer.writeDouble(3, this.time_accepted);
            if (this.has_cancelled)
                writer.writeBool(4, this.cancelled);
            if (this.has_new)
                writer.writeBool(8, this.new);
            if (this.has_coop_shared_end_time)
                writer.writeDouble(5, this.coop_shared_end_time);
            if (this.has_coop_simulation_end_time)
                writer.writeDouble(22, this.coop_simulation_end_time);
            if (this.has_coop_grace_period_end_time)
                writer.writeDouble(9, this.coop_grace_period_end_time);
            if (this.has_coop_contribution_finalized)
                writer.writeBool(10, this.coop_contribution_finalized);
            if (this.has_coop_last_uploaded_contribution)
                writer.writeDouble(11, this.coop_last_uploaded_contribution);
            if (this.has_coop_user_id && this.coop_user_id.length)
                writer.writeString(13, this.coop_user_id);
            if (this.has_coop_share_farm)
                writer.writeBool(17, this.coop_share_farm);
            if (this.has_last_amount_when_reward_given)
                writer.writeDouble(6, this.last_amount_when_reward_given);
            if (this.has_num_goals_achieved)
                writer.writeUint32(14, this.num_goals_achieved);
            if (this.has_max_farm_size_reached)
                writer.writeDouble(23, this.max_farm_size_reached);
            if (this.has_boosts_used)
                writer.writeUint32(12, this.boosts_used);
            if (this.has_points_replay)
                writer.writeBool(20, this.points_replay);
            if (this.has_league)
                writer.writeUint32(15, this.league);
            if (this.has_grade)
                writer.writeEnum(18, this.grade);
            if (this.has_last_nag_time)
                writer.writeDouble(16, this.last_nag_time);
            if (this.has_evaluation)
                writer.writeMessage(19, this.evaluation, () => this.evaluation.serialize(writer));
            if (this.reported_uuids.length)
                writer.writeRepeatedString(21, this.reported_uuids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LocalContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LocalContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.contract, () => message.contract = Contract.deserialize(reader));
                        break;
                    case 2:
                        message.coop_identifier = reader.readString();
                        break;
                    case 7:
                        message.accepted = reader.readBool();
                        break;
                    case 3:
                        message.time_accepted = reader.readDouble();
                        break;
                    case 4:
                        message.cancelled = reader.readBool();
                        break;
                    case 8:
                        message.new = reader.readBool();
                        break;
                    case 5:
                        message.coop_shared_end_time = reader.readDouble();
                        break;
                    case 22:
                        message.coop_simulation_end_time = reader.readDouble();
                        break;
                    case 9:
                        message.coop_grace_period_end_time = reader.readDouble();
                        break;
                    case 10:
                        message.coop_contribution_finalized = reader.readBool();
                        break;
                    case 11:
                        message.coop_last_uploaded_contribution = reader.readDouble();
                        break;
                    case 13:
                        message.coop_user_id = reader.readString();
                        break;
                    case 17:
                        message.coop_share_farm = reader.readBool();
                        break;
                    case 6:
                        message.last_amount_when_reward_given = reader.readDouble();
                        break;
                    case 14:
                        message.num_goals_achieved = reader.readUint32();
                        break;
                    case 23:
                        message.max_farm_size_reached = reader.readDouble();
                        break;
                    case 12:
                        message.boosts_used = reader.readUint32();
                        break;
                    case 20:
                        message.points_replay = reader.readBool();
                        break;
                    case 15:
                        message.league = reader.readUint32();
                        break;
                    case 18:
                        message.grade = reader.readEnum();
                        break;
                    case 16:
                        message.last_nag_time = reader.readDouble();
                        break;
                    case 19:
                        reader.readMessage(message.evaluation, () => message.evaluation = ContractEvaluation.deserialize(reader));
                        break;
                    case 21:
                        pb_1.Message.addToRepeatedField(message, 21, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LocalContract {
            return LocalContract.deserialize(bytes);
        }
    }
    export class MyContracts extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contract_ids_seen: string[];
            contracts: LocalContract[];
            archive: LocalContract[];
            current_coop_statuses: ContractCoopStatusResponse[];
            last_cpi?: ContractPlayerInfo;
            initial_grade_revealed?: boolean;
            last_grade_progress_shown?: number;
            show_advanced_evaluations?: boolean;
            custom_egg_info: CustomEgg[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 1, 2, 4, 9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.contract_ids_seen = data.contract_ids_seen;
                this.contracts = data.contracts;
                this.archive = data.archive;
                this.current_coop_statuses = data.current_coop_statuses;
                if ("last_cpi" in data && data.last_cpi != undefined) {
                    this.last_cpi = data.last_cpi;
                }
                if ("initial_grade_revealed" in data && data.initial_grade_revealed != undefined) {
                    this.initial_grade_revealed = data.initial_grade_revealed;
                }
                if ("last_grade_progress_shown" in data && data.last_grade_progress_shown != undefined) {
                    this.last_grade_progress_shown = data.last_grade_progress_shown;
                }
                if ("show_advanced_evaluations" in data && data.show_advanced_evaluations != undefined) {
                    this.show_advanced_evaluations = data.show_advanced_evaluations;
                }
                this.custom_egg_info = data.custom_egg_info;
            }
        }
        get contract_ids_seen() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set contract_ids_seen(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get contracts() {
            return pb_1.Message.getRepeatedWrapperField(this, LocalContract, 1) as LocalContract[];
        }
        set contracts(value: LocalContract[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get archive() {
            return pb_1.Message.getRepeatedWrapperField(this, LocalContract, 2) as LocalContract[];
        }
        set archive(value: LocalContract[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get current_coop_statuses() {
            return pb_1.Message.getRepeatedWrapperField(this, ContractCoopStatusResponse, 4) as ContractCoopStatusResponse[];
        }
        set current_coop_statuses(value: ContractCoopStatusResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get last_cpi() {
            return pb_1.Message.getWrapperField(this, ContractPlayerInfo, 5) as ContractPlayerInfo;
        }
        set last_cpi(value: ContractPlayerInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_last_cpi() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get initial_grade_revealed() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set initial_grade_revealed(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_initial_grade_revealed() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get last_grade_progress_shown() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set last_grade_progress_shown(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_last_grade_progress_shown() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get show_advanced_evaluations() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set show_advanced_evaluations(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_show_advanced_evaluations() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get custom_egg_info() {
            return pb_1.Message.getRepeatedWrapperField(this, CustomEgg, 9) as CustomEgg[];
        }
        set custom_egg_info(value: CustomEgg[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        static fromObject(data: {
            contract_ids_seen: string[];
            contracts?: ReturnType<typeof LocalContract.prototype.toObject>[];
            archive?: ReturnType<typeof LocalContract.prototype.toObject>[];
            current_coop_statuses?: ReturnType<typeof ContractCoopStatusResponse.prototype.toObject>[];
            last_cpi?: ReturnType<typeof ContractPlayerInfo.prototype.toObject>;
            initial_grade_revealed?: boolean;
            last_grade_progress_shown?: number;
            show_advanced_evaluations?: boolean;
            custom_egg_info?: ReturnType<typeof CustomEgg.prototype.toObject>[];
        }): MyContracts {
            const message = new MyContracts({
                contract_ids_seen: data.contract_ids_seen,
                contracts: data.contracts.map(item => LocalContract.fromObject(item)),
                archive: data.archive.map(item => LocalContract.fromObject(item)),
                current_coop_statuses: data.current_coop_statuses.map(item => ContractCoopStatusResponse.fromObject(item)),
                custom_egg_info: data.custom_egg_info.map(item => CustomEgg.fromObject(item))
            });
            if (data.last_cpi != null) {
                message.last_cpi = ContractPlayerInfo.fromObject(data.last_cpi);
            }
            if (data.initial_grade_revealed != null) {
                message.initial_grade_revealed = data.initial_grade_revealed;
            }
            if (data.last_grade_progress_shown != null) {
                message.last_grade_progress_shown = data.last_grade_progress_shown;
            }
            if (data.show_advanced_evaluations != null) {
                message.show_advanced_evaluations = data.show_advanced_evaluations;
            }
            return message;
        }
        toObject() {
            const data: {
                contract_ids_seen: string[];
                contracts?: ReturnType<typeof LocalContract.prototype.toObject>[];
                archive?: ReturnType<typeof LocalContract.prototype.toObject>[];
                current_coop_statuses?: ReturnType<typeof ContractCoopStatusResponse.prototype.toObject>[];
                last_cpi?: ReturnType<typeof ContractPlayerInfo.prototype.toObject>;
                initial_grade_revealed?: boolean;
                last_grade_progress_shown?: number;
                show_advanced_evaluations?: boolean;
                custom_egg_info?: ReturnType<typeof CustomEgg.prototype.toObject>[];
            } = {
                contract_ids_seen: this.contract_ids_seen
            };
            if (this.contracts != null) {
                data.contracts = this.contracts.map((item: LocalContract) => item.toObject());
            }
            if (this.archive != null) {
                data.archive = this.archive.map((item: LocalContract) => item.toObject());
            }
            if (this.current_coop_statuses != null) {
                data.current_coop_statuses = this.current_coop_statuses.map((item: ContractCoopStatusResponse) => item.toObject());
            }
            if (this.last_cpi != null) {
                data.last_cpi = this.last_cpi.toObject();
            }
            if (this.initial_grade_revealed != null) {
                data.initial_grade_revealed = this.initial_grade_revealed;
            }
            if (this.last_grade_progress_shown != null) {
                data.last_grade_progress_shown = this.last_grade_progress_shown;
            }
            if (this.show_advanced_evaluations != null) {
                data.show_advanced_evaluations = this.show_advanced_evaluations;
            }
            if (this.custom_egg_info != null) {
                data.custom_egg_info = this.custom_egg_info.map((item: CustomEgg) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contract_ids_seen.length)
                writer.writeRepeatedString(3, this.contract_ids_seen);
            if (this.contracts.length)
                writer.writeRepeatedMessage(1, this.contracts, (item: LocalContract) => item.serialize(writer));
            if (this.archive.length)
                writer.writeRepeatedMessage(2, this.archive, (item: LocalContract) => item.serialize(writer));
            if (this.current_coop_statuses.length)
                writer.writeRepeatedMessage(4, this.current_coop_statuses, (item: ContractCoopStatusResponse) => item.serialize(writer));
            if (this.has_last_cpi)
                writer.writeMessage(5, this.last_cpi, () => this.last_cpi.serialize(writer));
            if (this.has_initial_grade_revealed)
                writer.writeBool(6, this.initial_grade_revealed);
            if (this.has_last_grade_progress_shown)
                writer.writeDouble(7, this.last_grade_progress_shown);
            if (this.has_show_advanced_evaluations)
                writer.writeBool(8, this.show_advanced_evaluations);
            if (this.custom_egg_info.length)
                writer.writeRepeatedMessage(9, this.custom_egg_info, (item: CustomEgg) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MyContracts {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MyContracts();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 1:
                        reader.readMessage(message.contracts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, LocalContract.deserialize(reader), LocalContract));
                        break;
                    case 2:
                        reader.readMessage(message.archive, () => pb_1.Message.addToRepeatedWrapperField(message, 2, LocalContract.deserialize(reader), LocalContract));
                        break;
                    case 4:
                        reader.readMessage(message.current_coop_statuses, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ContractCoopStatusResponse.deserialize(reader), ContractCoopStatusResponse));
                        break;
                    case 5:
                        reader.readMessage(message.last_cpi, () => message.last_cpi = ContractPlayerInfo.deserialize(reader));
                        break;
                    case 6:
                        message.initial_grade_revealed = reader.readBool();
                        break;
                    case 7:
                        message.last_grade_progress_shown = reader.readDouble();
                        break;
                    case 8:
                        message.show_advanced_evaluations = reader.readBool();
                        break;
                    case 9:
                        reader.readMessage(message.custom_egg_info, () => pb_1.Message.addToRepeatedWrapperField(message, 9, CustomEgg.deserialize(reader), CustomEgg));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MyContracts {
            return MyContracts.deserialize(bytes);
        }
    }
    export class QueryCoopRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            contract_identifier?: string;
            coop_identifier?: string;
            league?: number;
            grade?: Contract.PlayerGrade;
            client_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("contract_identifier" in data && data.contract_identifier != undefined) {
                    this.contract_identifier = data.contract_identifier;
                }
                if ("coop_identifier" in data && data.coop_identifier != undefined) {
                    this.coop_identifier = data.coop_identifier;
                }
                if ("league" in data && data.league != undefined) {
                    this.league = data.league;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 5) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get contract_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_contract_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get coop_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set coop_identifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_coop_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get league() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set league(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_league() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 6, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
        }
        set grade(value: Contract.PlayerGrade) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_grade() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            contract_identifier?: string;
            coop_identifier?: string;
            league?: number;
            grade?: Contract.PlayerGrade;
            client_version?: number;
        }): QueryCoopRequest {
            const message = new QueryCoopRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.contract_identifier != null) {
                message.contract_identifier = data.contract_identifier;
            }
            if (data.coop_identifier != null) {
                message.coop_identifier = data.coop_identifier;
            }
            if (data.league != null) {
                message.league = data.league;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                contract_identifier?: string;
                coop_identifier?: string;
                league?: number;
                grade?: Contract.PlayerGrade;
                client_version?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.contract_identifier != null) {
                data.contract_identifier = this.contract_identifier;
            }
            if (this.coop_identifier != null) {
                data.coop_identifier = this.coop_identifier;
            }
            if (this.league != null) {
                data.league = this.league;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(5, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_contract_identifier && this.contract_identifier.length)
                writer.writeString(1, this.contract_identifier);
            if (this.has_coop_identifier && this.coop_identifier.length)
                writer.writeString(2, this.coop_identifier);
            if (this.has_league)
                writer.writeUint32(4, this.league);
            if (this.has_grade)
                writer.writeEnum(6, this.grade);
            if (this.has_client_version)
                writer.writeUint32(3, this.client_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCoopRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCoopRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 5:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.contract_identifier = reader.readString();
                        break;
                    case 2:
                        message.coop_identifier = reader.readString();
                        break;
                    case 4:
                        message.league = reader.readUint32();
                        break;
                    case 6:
                        message.grade = reader.readEnum();
                        break;
                    case 3:
                        message.client_version = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCoopRequest {
            return QueryCoopRequest.deserialize(bytes);
        }
    }
    export class QueryCoopResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            exists?: boolean;
            full?: boolean;
            expired?: boolean;
            different_league?: boolean;
            different_grade?: boolean;
            cc_only?: boolean;
            banned?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("exists" in data && data.exists != undefined) {
                    this.exists = data.exists;
                }
                if ("full" in data && data.full != undefined) {
                    this.full = data.full;
                }
                if ("expired" in data && data.expired != undefined) {
                    this.expired = data.expired;
                }
                if ("different_league" in data && data.different_league != undefined) {
                    this.different_league = data.different_league;
                }
                if ("different_grade" in data && data.different_grade != undefined) {
                    this.different_grade = data.different_grade;
                }
                if ("cc_only" in data && data.cc_only != undefined) {
                    this.cc_only = data.cc_only;
                }
                if ("banned" in data && data.banned != undefined) {
                    this.banned = data.banned;
                }
            }
        }
        get exists() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set exists(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_exists() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get full() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set full(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_full() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get expired() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set expired(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_expired() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get different_league() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set different_league(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_different_league() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get different_grade() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set different_grade(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_different_grade() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get cc_only() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set cc_only(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_cc_only() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get banned() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set banned(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_banned() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            exists?: boolean;
            full?: boolean;
            expired?: boolean;
            different_league?: boolean;
            different_grade?: boolean;
            cc_only?: boolean;
            banned?: boolean;
        }): QueryCoopResponse {
            const message = new QueryCoopResponse({});
            if (data.exists != null) {
                message.exists = data.exists;
            }
            if (data.full != null) {
                message.full = data.full;
            }
            if (data.expired != null) {
                message.expired = data.expired;
            }
            if (data.different_league != null) {
                message.different_league = data.different_league;
            }
            if (data.different_grade != null) {
                message.different_grade = data.different_grade;
            }
            if (data.cc_only != null) {
                message.cc_only = data.cc_only;
            }
            if (data.banned != null) {
                message.banned = data.banned;
            }
            return message;
        }
        toObject() {
            const data: {
                exists?: boolean;
                full?: boolean;
                expired?: boolean;
                different_league?: boolean;
                different_grade?: boolean;
                cc_only?: boolean;
                banned?: boolean;
            } = {};
            if (this.exists != null) {
                data.exists = this.exists;
            }
            if (this.full != null) {
                data.full = this.full;
            }
            if (this.expired != null) {
                data.expired = this.expired;
            }
            if (this.different_league != null) {
                data.different_league = this.different_league;
            }
            if (this.different_grade != null) {
                data.different_grade = this.different_grade;
            }
            if (this.cc_only != null) {
                data.cc_only = this.cc_only;
            }
            if (this.banned != null) {
                data.banned = this.banned;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_exists)
                writer.writeBool(1, this.exists);
            if (this.has_full)
                writer.writeBool(2, this.full);
            if (this.has_expired)
                writer.writeBool(5, this.expired);
            if (this.has_different_league)
                writer.writeBool(4, this.different_league);
            if (this.has_different_grade)
                writer.writeBool(6, this.different_grade);
            if (this.has_cc_only)
                writer.writeBool(7, this.cc_only);
            if (this.has_banned)
                writer.writeBool(3, this.banned);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCoopResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCoopResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.exists = reader.readBool();
                        break;
                    case 2:
                        message.full = reader.readBool();
                        break;
                    case 5:
                        message.expired = reader.readBool();
                        break;
                    case 4:
                        message.different_league = reader.readBool();
                        break;
                    case 6:
                        message.different_grade = reader.readBool();
                        break;
                    case 7:
                        message.cc_only = reader.readBool();
                        break;
                    case 3:
                        message.banned = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCoopResponse {
            return QueryCoopResponse.deserialize(bytes);
        }
    }
    export class CreateCoopRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            contract_identifier?: string;
            coop_identifier?: string;
            public?: boolean;
            cc_only?: boolean;
            allow_all_grades?: boolean;
            seconds_remaining?: number;
            user_id?: string;
            user_name?: string;
            soul_power?: number;
            eop?: number;
            league?: number;
            grade?: Contract.PlayerGrade;
            points_replay?: boolean;
            platform?: Platform;
            client_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("contract_identifier" in data && data.contract_identifier != undefined) {
                    this.contract_identifier = data.contract_identifier;
                }
                if ("coop_identifier" in data && data.coop_identifier != undefined) {
                    this.coop_identifier = data.coop_identifier;
                }
                if ("public" in data && data.public != undefined) {
                    this.public = data.public;
                }
                if ("cc_only" in data && data.cc_only != undefined) {
                    this.cc_only = data.cc_only;
                }
                if ("allow_all_grades" in data && data.allow_all_grades != undefined) {
                    this.allow_all_grades = data.allow_all_grades;
                }
                if ("seconds_remaining" in data && data.seconds_remaining != undefined) {
                    this.seconds_remaining = data.seconds_remaining;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("soul_power" in data && data.soul_power != undefined) {
                    this.soul_power = data.soul_power;
                }
                if ("eop" in data && data.eop != undefined) {
                    this.eop = data.eop;
                }
                if ("league" in data && data.league != undefined) {
                    this.league = data.league;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                if ("points_replay" in data && data.points_replay != undefined) {
                    this.points_replay = data.points_replay;
                }
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 10) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get contract_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_contract_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get coop_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set coop_identifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_coop_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get public() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set public(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_public() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get cc_only() {
            return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
        }
        set cc_only(value: boolean) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_cc_only() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get allow_all_grades() {
            return pb_1.Message.getFieldWithDefault(this, 16, false) as boolean;
        }
        set allow_all_grades(value: boolean) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_allow_all_grades() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get seconds_remaining() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set seconds_remaining(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_seconds_remaining() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_user_name() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get soul_power() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set soul_power(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_soul_power() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get eop() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set eop(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_eop() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get league() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set league(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_league() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 12, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
        }
        set grade(value: Contract.PlayerGrade) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_grade() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get points_replay() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set points_replay(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_points_replay() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 6, Platform.UNKNOWN_PLATFORM) as Platform;
        }
        set platform(value: Platform) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_platform() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            contract_identifier?: string;
            coop_identifier?: string;
            public?: boolean;
            cc_only?: boolean;
            allow_all_grades?: boolean;
            seconds_remaining?: number;
            user_id?: string;
            user_name?: string;
            soul_power?: number;
            eop?: number;
            league?: number;
            grade?: Contract.PlayerGrade;
            points_replay?: boolean;
            platform?: Platform;
            client_version?: number;
        }): CreateCoopRequest {
            const message = new CreateCoopRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.contract_identifier != null) {
                message.contract_identifier = data.contract_identifier;
            }
            if (data.coop_identifier != null) {
                message.coop_identifier = data.coop_identifier;
            }
            if (data.public != null) {
                message.public = data.public;
            }
            if (data.cc_only != null) {
                message.cc_only = data.cc_only;
            }
            if (data.allow_all_grades != null) {
                message.allow_all_grades = data.allow_all_grades;
            }
            if (data.seconds_remaining != null) {
                message.seconds_remaining = data.seconds_remaining;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.soul_power != null) {
                message.soul_power = data.soul_power;
            }
            if (data.eop != null) {
                message.eop = data.eop;
            }
            if (data.league != null) {
                message.league = data.league;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.points_replay != null) {
                message.points_replay = data.points_replay;
            }
            if (data.platform != null) {
                message.platform = data.platform;
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                contract_identifier?: string;
                coop_identifier?: string;
                public?: boolean;
                cc_only?: boolean;
                allow_all_grades?: boolean;
                seconds_remaining?: number;
                user_id?: string;
                user_name?: string;
                soul_power?: number;
                eop?: number;
                league?: number;
                grade?: Contract.PlayerGrade;
                points_replay?: boolean;
                platform?: Platform;
                client_version?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.contract_identifier != null) {
                data.contract_identifier = this.contract_identifier;
            }
            if (this.coop_identifier != null) {
                data.coop_identifier = this.coop_identifier;
            }
            if (this.public != null) {
                data.public = this.public;
            }
            if (this.cc_only != null) {
                data.cc_only = this.cc_only;
            }
            if (this.allow_all_grades != null) {
                data.allow_all_grades = this.allow_all_grades;
            }
            if (this.seconds_remaining != null) {
                data.seconds_remaining = this.seconds_remaining;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.soul_power != null) {
                data.soul_power = this.soul_power;
            }
            if (this.eop != null) {
                data.eop = this.eop;
            }
            if (this.league != null) {
                data.league = this.league;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.points_replay != null) {
                data.points_replay = this.points_replay;
            }
            if (this.platform != null) {
                data.platform = this.platform;
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(10, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_contract_identifier && this.contract_identifier.length)
                writer.writeString(1, this.contract_identifier);
            if (this.has_coop_identifier && this.coop_identifier.length)
                writer.writeString(2, this.coop_identifier);
            if (this.has_public)
                writer.writeBool(13, this.public);
            if (this.has_cc_only)
                writer.writeBool(14, this.cc_only);
            if (this.has_allow_all_grades)
                writer.writeBool(16, this.allow_all_grades);
            if (this.has_seconds_remaining)
                writer.writeDouble(3, this.seconds_remaining);
            if (this.has_user_id && this.user_id.length)
                writer.writeString(4, this.user_id);
            if (this.has_user_name && this.user_name.length)
                writer.writeString(5, this.user_name);
            if (this.has_soul_power)
                writer.writeDouble(8, this.soul_power);
            if (this.has_eop)
                writer.writeDouble(11, this.eop);
            if (this.has_league)
                writer.writeUint32(9, this.league);
            if (this.has_grade)
                writer.writeEnum(12, this.grade);
            if (this.has_points_replay)
                writer.writeBool(15, this.points_replay);
            if (this.has_platform)
                writer.writeEnum(6, this.platform);
            if (this.has_client_version)
                writer.writeUint32(7, this.client_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCoopRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCoopRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 10:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.contract_identifier = reader.readString();
                        break;
                    case 2:
                        message.coop_identifier = reader.readString();
                        break;
                    case 13:
                        message.public = reader.readBool();
                        break;
                    case 14:
                        message.cc_only = reader.readBool();
                        break;
                    case 16:
                        message.allow_all_grades = reader.readBool();
                        break;
                    case 3:
                        message.seconds_remaining = reader.readDouble();
                        break;
                    case 4:
                        message.user_id = reader.readString();
                        break;
                    case 5:
                        message.user_name = reader.readString();
                        break;
                    case 8:
                        message.soul_power = reader.readDouble();
                        break;
                    case 11:
                        message.eop = reader.readDouble();
                        break;
                    case 9:
                        message.league = reader.readUint32();
                        break;
                    case 12:
                        message.grade = reader.readEnum();
                        break;
                    case 15:
                        message.points_replay = reader.readBool();
                        break;
                    case 6:
                        message.platform = reader.readEnum();
                        break;
                    case 7:
                        message.client_version = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCoopRequest {
            return CreateCoopRequest.deserialize(bytes);
        }
    }
    export class CreateCoopResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_success() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): CreateCoopResponse {
            const message = new CreateCoopResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_success)
                writer.writeBool(1, this.success);
            if (this.has_message && this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCoopResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCoopResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCoopResponse {
            return CreateCoopResponse.deserialize(bytes);
        }
    }
    export class JoinCoopRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            contract_identifier?: string;
            coop_identifier?: string;
            user_id?: string;
            user_name?: string;
            soul_power?: number;
            eop?: number;
            league?: number;
            grade?: Contract.PlayerGrade;
            points_replay?: boolean;
            platform?: Platform;
            seconds_remaining?: number;
            client_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("contract_identifier" in data && data.contract_identifier != undefined) {
                    this.contract_identifier = data.contract_identifier;
                }
                if ("coop_identifier" in data && data.coop_identifier != undefined) {
                    this.coop_identifier = data.coop_identifier;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("soul_power" in data && data.soul_power != undefined) {
                    this.soul_power = data.soul_power;
                }
                if ("eop" in data && data.eop != undefined) {
                    this.eop = data.eop;
                }
                if ("league" in data && data.league != undefined) {
                    this.league = data.league;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                if ("points_replay" in data && data.points_replay != undefined) {
                    this.points_replay = data.points_replay;
                }
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
                if ("seconds_remaining" in data && data.seconds_remaining != undefined) {
                    this.seconds_remaining = data.seconds_remaining;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 10) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 10, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get contract_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_contract_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get coop_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set coop_identifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_coop_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_user_name() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get soul_power() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set soul_power(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_soul_power() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get eop() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set eop(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_eop() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get league() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set league(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_league() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 13, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
        }
        set grade(value: Contract.PlayerGrade) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_grade() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get points_replay() {
            return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
        }
        set points_replay(value: boolean) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_points_replay() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 5, Platform.UNKNOWN_PLATFORM) as Platform;
        }
        set platform(value: Platform) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_platform() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get seconds_remaining() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set seconds_remaining(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_seconds_remaining() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            contract_identifier?: string;
            coop_identifier?: string;
            user_id?: string;
            user_name?: string;
            soul_power?: number;
            eop?: number;
            league?: number;
            grade?: Contract.PlayerGrade;
            points_replay?: boolean;
            platform?: Platform;
            seconds_remaining?: number;
            client_version?: number;
        }): JoinCoopRequest {
            const message = new JoinCoopRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.contract_identifier != null) {
                message.contract_identifier = data.contract_identifier;
            }
            if (data.coop_identifier != null) {
                message.coop_identifier = data.coop_identifier;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.soul_power != null) {
                message.soul_power = data.soul_power;
            }
            if (data.eop != null) {
                message.eop = data.eop;
            }
            if (data.league != null) {
                message.league = data.league;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.points_replay != null) {
                message.points_replay = data.points_replay;
            }
            if (data.platform != null) {
                message.platform = data.platform;
            }
            if (data.seconds_remaining != null) {
                message.seconds_remaining = data.seconds_remaining;
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                contract_identifier?: string;
                coop_identifier?: string;
                user_id?: string;
                user_name?: string;
                soul_power?: number;
                eop?: number;
                league?: number;
                grade?: Contract.PlayerGrade;
                points_replay?: boolean;
                platform?: Platform;
                seconds_remaining?: number;
                client_version?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.contract_identifier != null) {
                data.contract_identifier = this.contract_identifier;
            }
            if (this.coop_identifier != null) {
                data.coop_identifier = this.coop_identifier;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.soul_power != null) {
                data.soul_power = this.soul_power;
            }
            if (this.eop != null) {
                data.eop = this.eop;
            }
            if (this.league != null) {
                data.league = this.league;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.points_replay != null) {
                data.points_replay = this.points_replay;
            }
            if (this.platform != null) {
                data.platform = this.platform;
            }
            if (this.seconds_remaining != null) {
                data.seconds_remaining = this.seconds_remaining;
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(10, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_contract_identifier && this.contract_identifier.length)
                writer.writeString(1, this.contract_identifier);
            if (this.has_coop_identifier && this.coop_identifier.length)
                writer.writeString(2, this.coop_identifier);
            if (this.has_user_id && this.user_id.length)
                writer.writeString(3, this.user_id);
            if (this.has_user_name && this.user_name.length)
                writer.writeString(4, this.user_name);
            if (this.has_soul_power)
                writer.writeDouble(8, this.soul_power);
            if (this.has_eop)
                writer.writeDouble(12, this.eop);
            if (this.has_league)
                writer.writeUint32(9, this.league);
            if (this.has_grade)
                writer.writeEnum(13, this.grade);
            if (this.has_points_replay)
                writer.writeBool(14, this.points_replay);
            if (this.has_platform)
                writer.writeEnum(5, this.platform);
            if (this.has_seconds_remaining)
                writer.writeDouble(11, this.seconds_remaining);
            if (this.has_client_version)
                writer.writeUint32(7, this.client_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinCoopRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinCoopRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 10:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.contract_identifier = reader.readString();
                        break;
                    case 2:
                        message.coop_identifier = reader.readString();
                        break;
                    case 3:
                        message.user_id = reader.readString();
                        break;
                    case 4:
                        message.user_name = reader.readString();
                        break;
                    case 8:
                        message.soul_power = reader.readDouble();
                        break;
                    case 12:
                        message.eop = reader.readDouble();
                        break;
                    case 9:
                        message.league = reader.readUint32();
                        break;
                    case 13:
                        message.grade = reader.readEnum();
                        break;
                    case 14:
                        message.points_replay = reader.readBool();
                        break;
                    case 5:
                        message.platform = reader.readEnum();
                        break;
                    case 11:
                        message.seconds_remaining = reader.readDouble();
                        break;
                    case 7:
                        message.client_version = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinCoopRequest {
            return JoinCoopRequest.deserialize(bytes);
        }
    }
    export class JoinCoopResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
            banned?: boolean;
            coop_identifier?: string;
            seconds_remaining?: number;
            match_percent?: number;
            num_members?: number;
            status?: ContractCoopStatusResponse.Status;
            grade?: Contract.PlayerGrade;
            can_start?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("banned" in data && data.banned != undefined) {
                    this.banned = data.banned;
                }
                if ("coop_identifier" in data && data.coop_identifier != undefined) {
                    this.coop_identifier = data.coop_identifier;
                }
                if ("seconds_remaining" in data && data.seconds_remaining != undefined) {
                    this.seconds_remaining = data.seconds_remaining;
                }
                if ("match_percent" in data && data.match_percent != undefined) {
                    this.match_percent = data.match_percent;
                }
                if ("num_members" in data && data.num_members != undefined) {
                    this.num_members = data.num_members;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                if ("can_start" in data && data.can_start != undefined) {
                    this.can_start = data.can_start;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_success() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get banned() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set banned(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_banned() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get coop_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set coop_identifier(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_coop_identifier() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get seconds_remaining() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set seconds_remaining(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_seconds_remaining() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get match_percent() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set match_percent(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_match_percent() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get num_members() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set num_members(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_num_members() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 8, ContractCoopStatusResponse.Status.UNKNOWN) as ContractCoopStatusResponse.Status;
        }
        set status(value: ContractCoopStatusResponse.Status) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 9, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
        }
        set grade(value: Contract.PlayerGrade) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_grade() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get can_start() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set can_start(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_can_start() {
            return pb_1.Message.getField(this, 10) != null;
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
            banned?: boolean;
            coop_identifier?: string;
            seconds_remaining?: number;
            match_percent?: number;
            num_members?: number;
            status?: ContractCoopStatusResponse.Status;
            grade?: Contract.PlayerGrade;
            can_start?: boolean;
        }): JoinCoopResponse {
            const message = new JoinCoopResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.banned != null) {
                message.banned = data.banned;
            }
            if (data.coop_identifier != null) {
                message.coop_identifier = data.coop_identifier;
            }
            if (data.seconds_remaining != null) {
                message.seconds_remaining = data.seconds_remaining;
            }
            if (data.match_percent != null) {
                message.match_percent = data.match_percent;
            }
            if (data.num_members != null) {
                message.num_members = data.num_members;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.can_start != null) {
                message.can_start = data.can_start;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
                banned?: boolean;
                coop_identifier?: string;
                seconds_remaining?: number;
                match_percent?: number;
                num_members?: number;
                status?: ContractCoopStatusResponse.Status;
                grade?: Contract.PlayerGrade;
                can_start?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.banned != null) {
                data.banned = this.banned;
            }
            if (this.coop_identifier != null) {
                data.coop_identifier = this.coop_identifier;
            }
            if (this.seconds_remaining != null) {
                data.seconds_remaining = this.seconds_remaining;
            }
            if (this.match_percent != null) {
                data.match_percent = this.match_percent;
            }
            if (this.num_members != null) {
                data.num_members = this.num_members;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.can_start != null) {
                data.can_start = this.can_start;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_success)
                writer.writeBool(1, this.success);
            if (this.has_message && this.message.length)
                writer.writeString(2, this.message);
            if (this.has_banned)
                writer.writeBool(4, this.banned);
            if (this.has_coop_identifier && this.coop_identifier.length)
                writer.writeString(5, this.coop_identifier);
            if (this.has_seconds_remaining)
                writer.writeDouble(3, this.seconds_remaining);
            if (this.has_match_percent)
                writer.writeDouble(6, this.match_percent);
            if (this.has_num_members)
                writer.writeUint32(7, this.num_members);
            if (this.has_status)
                writer.writeEnum(8, this.status);
            if (this.has_grade)
                writer.writeEnum(9, this.grade);
            if (this.has_can_start)
                writer.writeBool(10, this.can_start);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinCoopResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinCoopResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.banned = reader.readBool();
                        break;
                    case 5:
                        message.coop_identifier = reader.readString();
                        break;
                    case 3:
                        message.seconds_remaining = reader.readDouble();
                        break;
                    case 6:
                        message.match_percent = reader.readDouble();
                        break;
                    case 7:
                        message.num_members = reader.readUint32();
                        break;
                    case 8:
                        message.status = reader.readEnum();
                        break;
                    case 9:
                        message.grade = reader.readEnum();
                        break;
                    case 10:
                        message.can_start = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinCoopResponse {
            return JoinCoopResponse.deserialize(bytes);
        }
    }
    export class AutoJoinCoopRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            contract_identifier?: string;
            user_id?: string;
            user_name?: string;
            soul_power?: number;
            eop?: number;
            league?: number;
            grade?: Contract.PlayerGrade;
            points_replay?: boolean;
            seconds_remaining?: number;
            platform?: Platform;
            client_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("contract_identifier" in data && data.contract_identifier != undefined) {
                    this.contract_identifier = data.contract_identifier;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("user_name" in data && data.user_name != undefined) {
                    this.user_name = data.user_name;
                }
                if ("soul_power" in data && data.soul_power != undefined) {
                    this.soul_power = data.soul_power;
                }
                if ("eop" in data && data.eop != undefined) {
                    this.eop = data.eop;
                }
                if ("league" in data && data.league != undefined) {
                    this.league = data.league;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                if ("points_replay" in data && data.points_replay != undefined) {
                    this.points_replay = data.points_replay;
                }
                if ("seconds_remaining" in data && data.seconds_remaining != undefined) {
                    this.seconds_remaining = data.seconds_remaining;
                }
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 9) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get contract_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_contract_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get user_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_user_name() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get soul_power() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set soul_power(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_soul_power() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get eop() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set eop(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_eop() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get league() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set league(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_league() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 12, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
        }
        set grade(value: Contract.PlayerGrade) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_grade() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get points_replay() {
            return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
        }
        set points_replay(value: boolean) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_points_replay() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get seconds_remaining() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set seconds_remaining(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_seconds_remaining() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 6, Platform.UNKNOWN_PLATFORM) as Platform;
        }
        set platform(value: Platform) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_platform() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            contract_identifier?: string;
            user_id?: string;
            user_name?: string;
            soul_power?: number;
            eop?: number;
            league?: number;
            grade?: Contract.PlayerGrade;
            points_replay?: boolean;
            seconds_remaining?: number;
            platform?: Platform;
            client_version?: number;
        }): AutoJoinCoopRequest {
            const message = new AutoJoinCoopRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.contract_identifier != null) {
                message.contract_identifier = data.contract_identifier;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.user_name != null) {
                message.user_name = data.user_name;
            }
            if (data.soul_power != null) {
                message.soul_power = data.soul_power;
            }
            if (data.eop != null) {
                message.eop = data.eop;
            }
            if (data.league != null) {
                message.league = data.league;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.points_replay != null) {
                message.points_replay = data.points_replay;
            }
            if (data.seconds_remaining != null) {
                message.seconds_remaining = data.seconds_remaining;
            }
            if (data.platform != null) {
                message.platform = data.platform;
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                contract_identifier?: string;
                user_id?: string;
                user_name?: string;
                soul_power?: number;
                eop?: number;
                league?: number;
                grade?: Contract.PlayerGrade;
                points_replay?: boolean;
                seconds_remaining?: number;
                platform?: Platform;
                client_version?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.contract_identifier != null) {
                data.contract_identifier = this.contract_identifier;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.user_name != null) {
                data.user_name = this.user_name;
            }
            if (this.soul_power != null) {
                data.soul_power = this.soul_power;
            }
            if (this.eop != null) {
                data.eop = this.eop;
            }
            if (this.league != null) {
                data.league = this.league;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.points_replay != null) {
                data.points_replay = this.points_replay;
            }
            if (this.seconds_remaining != null) {
                data.seconds_remaining = this.seconds_remaining;
            }
            if (this.platform != null) {
                data.platform = this.platform;
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(9, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_contract_identifier && this.contract_identifier.length)
                writer.writeString(1, this.contract_identifier);
            if (this.has_user_id && this.user_id.length)
                writer.writeString(2, this.user_id);
            if (this.has_user_name && this.user_name.length)
                writer.writeString(3, this.user_name);
            if (this.has_soul_power)
                writer.writeDouble(4, this.soul_power);
            if (this.has_eop)
                writer.writeDouble(10, this.eop);
            if (this.has_league)
                writer.writeUint32(8, this.league);
            if (this.has_grade)
                writer.writeEnum(12, this.grade);
            if (this.has_points_replay)
                writer.writeBool(14, this.points_replay);
            if (this.has_seconds_remaining)
                writer.writeDouble(5, this.seconds_remaining);
            if (this.has_platform)
                writer.writeEnum(6, this.platform);
            if (this.has_client_version)
                writer.writeUint32(7, this.client_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AutoJoinCoopRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AutoJoinCoopRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 9:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.contract_identifier = reader.readString();
                        break;
                    case 2:
                        message.user_id = reader.readString();
                        break;
                    case 3:
                        message.user_name = reader.readString();
                        break;
                    case 4:
                        message.soul_power = reader.readDouble();
                        break;
                    case 10:
                        message.eop = reader.readDouble();
                        break;
                    case 8:
                        message.league = reader.readUint32();
                        break;
                    case 12:
                        message.grade = reader.readEnum();
                        break;
                    case 14:
                        message.points_replay = reader.readBool();
                        break;
                    case 5:
                        message.seconds_remaining = reader.readDouble();
                        break;
                    case 6:
                        message.platform = reader.readEnum();
                        break;
                    case 7:
                        message.client_version = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AutoJoinCoopRequest {
            return AutoJoinCoopRequest.deserialize(bytes);
        }
    }
    export class UpdateCoopPermissionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            contract_identifier?: string;
            coop_identifier?: string;
            requesting_user_id?: string;
            public?: boolean;
            client_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("contract_identifier" in data && data.contract_identifier != undefined) {
                    this.contract_identifier = data.contract_identifier;
                }
                if ("coop_identifier" in data && data.coop_identifier != undefined) {
                    this.coop_identifier = data.coop_identifier;
                }
                if ("requesting_user_id" in data && data.requesting_user_id != undefined) {
                    this.requesting_user_id = data.requesting_user_id;
                }
                if ("public" in data && data.public != undefined) {
                    this.public = data.public;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 6) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get contract_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_contract_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get coop_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set coop_identifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_coop_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get requesting_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set requesting_user_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_requesting_user_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get public() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set public(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_public() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            contract_identifier?: string;
            coop_identifier?: string;
            requesting_user_id?: string;
            public?: boolean;
            client_version?: number;
        }): UpdateCoopPermissionsRequest {
            const message = new UpdateCoopPermissionsRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.contract_identifier != null) {
                message.contract_identifier = data.contract_identifier;
            }
            if (data.coop_identifier != null) {
                message.coop_identifier = data.coop_identifier;
            }
            if (data.requesting_user_id != null) {
                message.requesting_user_id = data.requesting_user_id;
            }
            if (data.public != null) {
                message.public = data.public;
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                contract_identifier?: string;
                coop_identifier?: string;
                requesting_user_id?: string;
                public?: boolean;
                client_version?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.contract_identifier != null) {
                data.contract_identifier = this.contract_identifier;
            }
            if (this.coop_identifier != null) {
                data.coop_identifier = this.coop_identifier;
            }
            if (this.requesting_user_id != null) {
                data.requesting_user_id = this.requesting_user_id;
            }
            if (this.public != null) {
                data.public = this.public;
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(6, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_contract_identifier && this.contract_identifier.length)
                writer.writeString(1, this.contract_identifier);
            if (this.has_coop_identifier && this.coop_identifier.length)
                writer.writeString(2, this.coop_identifier);
            if (this.has_requesting_user_id && this.requesting_user_id.length)
                writer.writeString(3, this.requesting_user_id);
            if (this.has_public)
                writer.writeBool(4, this.public);
            if (this.has_client_version)
                writer.writeUint32(5, this.client_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCoopPermissionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCoopPermissionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 6:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.contract_identifier = reader.readString();
                        break;
                    case 2:
                        message.coop_identifier = reader.readString();
                        break;
                    case 3:
                        message.requesting_user_id = reader.readString();
                        break;
                    case 4:
                        message.public = reader.readBool();
                        break;
                    case 5:
                        message.client_version = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCoopPermissionsRequest {
            return UpdateCoopPermissionsRequest.deserialize(bytes);
        }
    }
    export class UpdateCoopPermissionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_success() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            success?: boolean;
            message?: string;
        }): UpdateCoopPermissionsResponse {
            const message = new UpdateCoopPermissionsResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                message?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_success)
                writer.writeBool(1, this.success);
            if (this.has_message && this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateCoopPermissionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateCoopPermissionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateCoopPermissionsResponse {
            return UpdateCoopPermissionsResponse.deserialize(bytes);
        }
    }
    export class LeaveCoopRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            contract_identifier?: string;
            coop_identifier?: string;
            player_identifier?: string;
            client_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("contract_identifier" in data && data.contract_identifier != undefined) {
                    this.contract_identifier = data.contract_identifier;
                }
                if ("coop_identifier" in data && data.coop_identifier != undefined) {
                    this.coop_identifier = data.coop_identifier;
                }
                if ("player_identifier" in data && data.player_identifier != undefined) {
                    this.player_identifier = data.player_identifier;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 8) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get contract_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_contract_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get coop_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set coop_identifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_coop_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get player_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set player_identifier(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_player_identifier() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            contract_identifier?: string;
            coop_identifier?: string;
            player_identifier?: string;
            client_version?: number;
        }): LeaveCoopRequest {
            const message = new LeaveCoopRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.contract_identifier != null) {
                message.contract_identifier = data.contract_identifier;
            }
            if (data.coop_identifier != null) {
                message.coop_identifier = data.coop_identifier;
            }
            if (data.player_identifier != null) {
                message.player_identifier = data.player_identifier;
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                contract_identifier?: string;
                coop_identifier?: string;
                player_identifier?: string;
                client_version?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.contract_identifier != null) {
                data.contract_identifier = this.contract_identifier;
            }
            if (this.coop_identifier != null) {
                data.coop_identifier = this.coop_identifier;
            }
            if (this.player_identifier != null) {
                data.player_identifier = this.player_identifier;
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(8, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_contract_identifier && this.contract_identifier.length)
                writer.writeString(1, this.contract_identifier);
            if (this.has_coop_identifier && this.coop_identifier.length)
                writer.writeString(2, this.coop_identifier);
            if (this.has_player_identifier && this.player_identifier.length)
                writer.writeString(3, this.player_identifier);
            if (this.has_client_version)
                writer.writeUint32(7, this.client_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaveCoopRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaveCoopRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 8:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.contract_identifier = reader.readString();
                        break;
                    case 2:
                        message.coop_identifier = reader.readString();
                        break;
                    case 3:
                        message.player_identifier = reader.readString();
                        break;
                    case 7:
                        message.client_version = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LeaveCoopRequest {
            return LeaveCoopRequest.deserialize(bytes);
        }
    }
    export class GiftPlayerCoopRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            contract_identifier?: string;
            coop_identifier?: string;
            player_identifier?: string;
            requesting_user_id?: string;
            requesting_user_name?: string;
            amount?: number;
            client_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("contract_identifier" in data && data.contract_identifier != undefined) {
                    this.contract_identifier = data.contract_identifier;
                }
                if ("coop_identifier" in data && data.coop_identifier != undefined) {
                    this.coop_identifier = data.coop_identifier;
                }
                if ("player_identifier" in data && data.player_identifier != undefined) {
                    this.player_identifier = data.player_identifier;
                }
                if ("requesting_user_id" in data && data.requesting_user_id != undefined) {
                    this.requesting_user_id = data.requesting_user_id;
                }
                if ("requesting_user_name" in data && data.requesting_user_name != undefined) {
                    this.requesting_user_name = data.requesting_user_name;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 8) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get contract_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_contract_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get coop_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set coop_identifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_coop_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get player_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set player_identifier(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_player_identifier() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get requesting_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set requesting_user_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_requesting_user_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get requesting_user_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set requesting_user_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_requesting_user_name() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            contract_identifier?: string;
            coop_identifier?: string;
            player_identifier?: string;
            requesting_user_id?: string;
            requesting_user_name?: string;
            amount?: number;
            client_version?: number;
        }): GiftPlayerCoopRequest {
            const message = new GiftPlayerCoopRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.contract_identifier != null) {
                message.contract_identifier = data.contract_identifier;
            }
            if (data.coop_identifier != null) {
                message.coop_identifier = data.coop_identifier;
            }
            if (data.player_identifier != null) {
                message.player_identifier = data.player_identifier;
            }
            if (data.requesting_user_id != null) {
                message.requesting_user_id = data.requesting_user_id;
            }
            if (data.requesting_user_name != null) {
                message.requesting_user_name = data.requesting_user_name;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                contract_identifier?: string;
                coop_identifier?: string;
                player_identifier?: string;
                requesting_user_id?: string;
                requesting_user_name?: string;
                amount?: number;
                client_version?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.contract_identifier != null) {
                data.contract_identifier = this.contract_identifier;
            }
            if (this.coop_identifier != null) {
                data.coop_identifier = this.coop_identifier;
            }
            if (this.player_identifier != null) {
                data.player_identifier = this.player_identifier;
            }
            if (this.requesting_user_id != null) {
                data.requesting_user_id = this.requesting_user_id;
            }
            if (this.requesting_user_name != null) {
                data.requesting_user_name = this.requesting_user_name;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(8, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_contract_identifier && this.contract_identifier.length)
                writer.writeString(1, this.contract_identifier);
            if (this.has_coop_identifier && this.coop_identifier.length)
                writer.writeString(2, this.coop_identifier);
            if (this.has_player_identifier && this.player_identifier.length)
                writer.writeString(3, this.player_identifier);
            if (this.has_requesting_user_id && this.requesting_user_id.length)
                writer.writeString(4, this.requesting_user_id);
            if (this.has_requesting_user_name && this.requesting_user_name.length)
                writer.writeString(6, this.requesting_user_name);
            if (this.has_amount)
                writer.writeUint32(5, this.amount);
            if (this.has_client_version)
                writer.writeUint32(7, this.client_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GiftPlayerCoopRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GiftPlayerCoopRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 8:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.contract_identifier = reader.readString();
                        break;
                    case 2:
                        message.coop_identifier = reader.readString();
                        break;
                    case 3:
                        message.player_identifier = reader.readString();
                        break;
                    case 4:
                        message.requesting_user_id = reader.readString();
                        break;
                    case 6:
                        message.requesting_user_name = reader.readString();
                        break;
                    case 5:
                        message.amount = reader.readUint32();
                        break;
                    case 7:
                        message.client_version = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GiftPlayerCoopRequest {
            return GiftPlayerCoopRequest.deserialize(bytes);
        }
    }
    export class SendChickenRunCoopRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            contract_identifier?: string;
            coop_identifier?: string;
            player_identifier?: string;
            requesting_user_id?: string;
            requesting_user_name?: string;
            farm_pop?: number;
            client_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("contract_identifier" in data && data.contract_identifier != undefined) {
                    this.contract_identifier = data.contract_identifier;
                }
                if ("coop_identifier" in data && data.coop_identifier != undefined) {
                    this.coop_identifier = data.coop_identifier;
                }
                if ("player_identifier" in data && data.player_identifier != undefined) {
                    this.player_identifier = data.player_identifier;
                }
                if ("requesting_user_id" in data && data.requesting_user_id != undefined) {
                    this.requesting_user_id = data.requesting_user_id;
                }
                if ("requesting_user_name" in data && data.requesting_user_name != undefined) {
                    this.requesting_user_name = data.requesting_user_name;
                }
                if ("farm_pop" in data && data.farm_pop != undefined) {
                    this.farm_pop = data.farm_pop;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 8) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get contract_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_contract_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get coop_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set coop_identifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_coop_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get player_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set player_identifier(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_player_identifier() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get requesting_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set requesting_user_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_requesting_user_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get requesting_user_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set requesting_user_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_requesting_user_name() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get farm_pop() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set farm_pop(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_farm_pop() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            contract_identifier?: string;
            coop_identifier?: string;
            player_identifier?: string;
            requesting_user_id?: string;
            requesting_user_name?: string;
            farm_pop?: number;
            client_version?: number;
        }): SendChickenRunCoopRequest {
            const message = new SendChickenRunCoopRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.contract_identifier != null) {
                message.contract_identifier = data.contract_identifier;
            }
            if (data.coop_identifier != null) {
                message.coop_identifier = data.coop_identifier;
            }
            if (data.player_identifier != null) {
                message.player_identifier = data.player_identifier;
            }
            if (data.requesting_user_id != null) {
                message.requesting_user_id = data.requesting_user_id;
            }
            if (data.requesting_user_name != null) {
                message.requesting_user_name = data.requesting_user_name;
            }
            if (data.farm_pop != null) {
                message.farm_pop = data.farm_pop;
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                contract_identifier?: string;
                coop_identifier?: string;
                player_identifier?: string;
                requesting_user_id?: string;
                requesting_user_name?: string;
                farm_pop?: number;
                client_version?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.contract_identifier != null) {
                data.contract_identifier = this.contract_identifier;
            }
            if (this.coop_identifier != null) {
                data.coop_identifier = this.coop_identifier;
            }
            if (this.player_identifier != null) {
                data.player_identifier = this.player_identifier;
            }
            if (this.requesting_user_id != null) {
                data.requesting_user_id = this.requesting_user_id;
            }
            if (this.requesting_user_name != null) {
                data.requesting_user_name = this.requesting_user_name;
            }
            if (this.farm_pop != null) {
                data.farm_pop = this.farm_pop;
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(8, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_contract_identifier && this.contract_identifier.length)
                writer.writeString(1, this.contract_identifier);
            if (this.has_coop_identifier && this.coop_identifier.length)
                writer.writeString(2, this.coop_identifier);
            if (this.has_player_identifier && this.player_identifier.length)
                writer.writeString(3, this.player_identifier);
            if (this.has_requesting_user_id && this.requesting_user_id.length)
                writer.writeString(4, this.requesting_user_id);
            if (this.has_requesting_user_name && this.requesting_user_name.length)
                writer.writeString(6, this.requesting_user_name);
            if (this.has_farm_pop)
                writer.writeUint64(5, this.farm_pop);
            if (this.has_client_version)
                writer.writeUint32(7, this.client_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SendChickenRunCoopRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendChickenRunCoopRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 8:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.contract_identifier = reader.readString();
                        break;
                    case 2:
                        message.coop_identifier = reader.readString();
                        break;
                    case 3:
                        message.player_identifier = reader.readString();
                        break;
                    case 4:
                        message.requesting_user_id = reader.readString();
                        break;
                    case 6:
                        message.requesting_user_name = reader.readString();
                        break;
                    case 5:
                        message.farm_pop = reader.readUint64();
                        break;
                    case 7:
                        message.client_version = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SendChickenRunCoopRequest {
            return SendChickenRunCoopRequest.deserialize(bytes);
        }
    }
    export class ReportPlayerCoopRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            contract_identifier?: string;
            coop_identifier?: string;
            user_id?: string;
            reason?: ReportPlayerCoopRequest.Reason;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("contract_identifier" in data && data.contract_identifier != undefined) {
                    this.contract_identifier = data.contract_identifier;
                }
                if ("coop_identifier" in data && data.coop_identifier != undefined) {
                    this.coop_identifier = data.coop_identifier;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 1) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get contract_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_identifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_contract_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get coop_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set coop_identifier(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_coop_identifier() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 5, ReportPlayerCoopRequest.Reason.UNKNOWN) as ReportPlayerCoopRequest.Reason;
        }
        set reason(value: ReportPlayerCoopRequest.Reason) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_reason() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            contract_identifier?: string;
            coop_identifier?: string;
            user_id?: string;
            reason?: ReportPlayerCoopRequest.Reason;
        }): ReportPlayerCoopRequest {
            const message = new ReportPlayerCoopRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.contract_identifier != null) {
                message.contract_identifier = data.contract_identifier;
            }
            if (data.coop_identifier != null) {
                message.coop_identifier = data.coop_identifier;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                contract_identifier?: string;
                coop_identifier?: string;
                user_id?: string;
                reason?: ReportPlayerCoopRequest.Reason;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.contract_identifier != null) {
                data.contract_identifier = this.contract_identifier;
            }
            if (this.coop_identifier != null) {
                data.coop_identifier = this.coop_identifier;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(1, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_contract_identifier && this.contract_identifier.length)
                writer.writeString(2, this.contract_identifier);
            if (this.has_coop_identifier && this.coop_identifier.length)
                writer.writeString(3, this.coop_identifier);
            if (this.has_user_id && this.user_id.length)
                writer.writeString(4, this.user_id);
            if (this.has_reason)
                writer.writeEnum(5, this.reason);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReportPlayerCoopRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReportPlayerCoopRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 2:
                        message.contract_identifier = reader.readString();
                        break;
                    case 3:
                        message.coop_identifier = reader.readString();
                        break;
                    case 4:
                        message.user_id = reader.readString();
                        break;
                    case 5:
                        message.reason = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReportPlayerCoopRequest {
            return ReportPlayerCoopRequest.deserialize(bytes);
        }
    }
    export namespace ReportPlayerCoopRequest {
        export enum Reason {
            UNKNOWN = 0,
            OFFENSIVE_NAME = 1,
            CHEATING = 2,
            LEECHING = 3
        }
    }
    export class KickPlayerCoopRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            contract_identifier?: string;
            coop_identifier?: string;
            player_identifier?: string;
            requesting_user_id?: string;
            reason?: KickPlayerCoopRequest.Reason;
            client_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("contract_identifier" in data && data.contract_identifier != undefined) {
                    this.contract_identifier = data.contract_identifier;
                }
                if ("coop_identifier" in data && data.coop_identifier != undefined) {
                    this.coop_identifier = data.coop_identifier;
                }
                if ("player_identifier" in data && data.player_identifier != undefined) {
                    this.player_identifier = data.player_identifier;
                }
                if ("requesting_user_id" in data && data.requesting_user_id != undefined) {
                    this.requesting_user_id = data.requesting_user_id;
                }
                if ("reason" in data && data.reason != undefined) {
                    this.reason = data.reason;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 8) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get contract_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_contract_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get coop_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set coop_identifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_coop_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get player_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set player_identifier(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_player_identifier() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get requesting_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set requesting_user_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_requesting_user_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get reason() {
            return pb_1.Message.getFieldWithDefault(this, 9, KickPlayerCoopRequest.Reason.INVALID) as KickPlayerCoopRequest.Reason;
        }
        set reason(value: KickPlayerCoopRequest.Reason) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_reason() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            contract_identifier?: string;
            coop_identifier?: string;
            player_identifier?: string;
            requesting_user_id?: string;
            reason?: KickPlayerCoopRequest.Reason;
            client_version?: number;
        }): KickPlayerCoopRequest {
            const message = new KickPlayerCoopRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.contract_identifier != null) {
                message.contract_identifier = data.contract_identifier;
            }
            if (data.coop_identifier != null) {
                message.coop_identifier = data.coop_identifier;
            }
            if (data.player_identifier != null) {
                message.player_identifier = data.player_identifier;
            }
            if (data.requesting_user_id != null) {
                message.requesting_user_id = data.requesting_user_id;
            }
            if (data.reason != null) {
                message.reason = data.reason;
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                contract_identifier?: string;
                coop_identifier?: string;
                player_identifier?: string;
                requesting_user_id?: string;
                reason?: KickPlayerCoopRequest.Reason;
                client_version?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.contract_identifier != null) {
                data.contract_identifier = this.contract_identifier;
            }
            if (this.coop_identifier != null) {
                data.coop_identifier = this.coop_identifier;
            }
            if (this.player_identifier != null) {
                data.player_identifier = this.player_identifier;
            }
            if (this.requesting_user_id != null) {
                data.requesting_user_id = this.requesting_user_id;
            }
            if (this.reason != null) {
                data.reason = this.reason;
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(8, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_contract_identifier && this.contract_identifier.length)
                writer.writeString(1, this.contract_identifier);
            if (this.has_coop_identifier && this.coop_identifier.length)
                writer.writeString(2, this.coop_identifier);
            if (this.has_player_identifier && this.player_identifier.length)
                writer.writeString(3, this.player_identifier);
            if (this.has_requesting_user_id && this.requesting_user_id.length)
                writer.writeString(4, this.requesting_user_id);
            if (this.has_reason)
                writer.writeEnum(9, this.reason);
            if (this.has_client_version)
                writer.writeUint32(7, this.client_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): KickPlayerCoopRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new KickPlayerCoopRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 8:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.contract_identifier = reader.readString();
                        break;
                    case 2:
                        message.coop_identifier = reader.readString();
                        break;
                    case 3:
                        message.player_identifier = reader.readString();
                        break;
                    case 4:
                        message.requesting_user_id = reader.readString();
                        break;
                    case 9:
                        message.reason = reader.readEnum();
                        break;
                    case 7:
                        message.client_version = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): KickPlayerCoopRequest {
            return KickPlayerCoopRequest.deserialize(bytes);
        }
    }
    export namespace KickPlayerCoopRequest {
        export enum Reason {
            INVALID = 0,
            CHEATER = 1,
            IDLE = 2,
            LEECH = 3,
            PRIVATE = 4
        }
    }
    export class ContractCoopStatusUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            user_id?: string;
            contract_identifier?: string;
            coop_identifier?: string;
            push_user_id?: string;
            amount?: number;
            rate?: number;
            time_cheats_detected?: number;
            soul_power?: number;
            eop?: number;
            boost_tokens?: number;
            boost_tokens_spent?: number;
            hide_cc_status?: boolean;
            production_params?: FarmProductionParams;
            farm_info?: PlayerFarmInfo;
            egg_laying_rate_buff?: number;
            earnings_buff?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("contract_identifier" in data && data.contract_identifier != undefined) {
                    this.contract_identifier = data.contract_identifier;
                }
                if ("coop_identifier" in data && data.coop_identifier != undefined) {
                    this.coop_identifier = data.coop_identifier;
                }
                if ("push_user_id" in data && data.push_user_id != undefined) {
                    this.push_user_id = data.push_user_id;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("rate" in data && data.rate != undefined) {
                    this.rate = data.rate;
                }
                if ("time_cheats_detected" in data && data.time_cheats_detected != undefined) {
                    this.time_cheats_detected = data.time_cheats_detected;
                }
                if ("soul_power" in data && data.soul_power != undefined) {
                    this.soul_power = data.soul_power;
                }
                if ("eop" in data && data.eop != undefined) {
                    this.eop = data.eop;
                }
                if ("boost_tokens" in data && data.boost_tokens != undefined) {
                    this.boost_tokens = data.boost_tokens;
                }
                if ("boost_tokens_spent" in data && data.boost_tokens_spent != undefined) {
                    this.boost_tokens_spent = data.boost_tokens_spent;
                }
                if ("hide_cc_status" in data && data.hide_cc_status != undefined) {
                    this.hide_cc_status = data.hide_cc_status;
                }
                if ("production_params" in data && data.production_params != undefined) {
                    this.production_params = data.production_params;
                }
                if ("farm_info" in data && data.farm_info != undefined) {
                    this.farm_info = data.farm_info;
                }
                if ("egg_laying_rate_buff" in data && data.egg_laying_rate_buff != undefined) {
                    this.egg_laying_rate_buff = data.egg_laying_rate_buff;
                }
                if ("earnings_buff" in data && data.earnings_buff != undefined) {
                    this.earnings_buff = data.earnings_buff;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 12) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get contract_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_identifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_contract_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get coop_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set coop_identifier(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_coop_identifier() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get push_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set push_user_id(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_push_user_id() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get rate() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set rate(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_rate() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get time_cheats_detected() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set time_cheats_detected(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_time_cheats_detected() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get soul_power() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set soul_power(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_soul_power() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get eop() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set eop(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_eop() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get boost_tokens() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set boost_tokens(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_boost_tokens() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get boost_tokens_spent() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set boost_tokens_spent(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_boost_tokens_spent() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get hide_cc_status() {
            return pb_1.Message.getFieldWithDefault(this, 17, false) as boolean;
        }
        set hide_cc_status(value: boolean) {
            pb_1.Message.setField(this, 17, value);
        }
        get has_hide_cc_status() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get production_params() {
            return pb_1.Message.getWrapperField(this, FarmProductionParams, 14) as FarmProductionParams;
        }
        set production_params(value: FarmProductionParams) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_production_params() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get farm_info() {
            return pb_1.Message.getWrapperField(this, PlayerFarmInfo, 16) as PlayerFarmInfo;
        }
        set farm_info(value: PlayerFarmInfo) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_farm_info() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get egg_laying_rate_buff() {
            return pb_1.Message.getFieldWithDefault(this, 10, 1) as number;
        }
        set egg_laying_rate_buff(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_egg_laying_rate_buff() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get earnings_buff() {
            return pb_1.Message.getFieldWithDefault(this, 11, 1) as number;
        }
        set earnings_buff(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_earnings_buff() {
            return pb_1.Message.getField(this, 11) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            user_id?: string;
            contract_identifier?: string;
            coop_identifier?: string;
            push_user_id?: string;
            amount?: number;
            rate?: number;
            time_cheats_detected?: number;
            soul_power?: number;
            eop?: number;
            boost_tokens?: number;
            boost_tokens_spent?: number;
            hide_cc_status?: boolean;
            production_params?: ReturnType<typeof FarmProductionParams.prototype.toObject>;
            farm_info?: ReturnType<typeof PlayerFarmInfo.prototype.toObject>;
            egg_laying_rate_buff?: number;
            earnings_buff?: number;
        }): ContractCoopStatusUpdateRequest {
            const message = new ContractCoopStatusUpdateRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.contract_identifier != null) {
                message.contract_identifier = data.contract_identifier;
            }
            if (data.coop_identifier != null) {
                message.coop_identifier = data.coop_identifier;
            }
            if (data.push_user_id != null) {
                message.push_user_id = data.push_user_id;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.rate != null) {
                message.rate = data.rate;
            }
            if (data.time_cheats_detected != null) {
                message.time_cheats_detected = data.time_cheats_detected;
            }
            if (data.soul_power != null) {
                message.soul_power = data.soul_power;
            }
            if (data.eop != null) {
                message.eop = data.eop;
            }
            if (data.boost_tokens != null) {
                message.boost_tokens = data.boost_tokens;
            }
            if (data.boost_tokens_spent != null) {
                message.boost_tokens_spent = data.boost_tokens_spent;
            }
            if (data.hide_cc_status != null) {
                message.hide_cc_status = data.hide_cc_status;
            }
            if (data.production_params != null) {
                message.production_params = FarmProductionParams.fromObject(data.production_params);
            }
            if (data.farm_info != null) {
                message.farm_info = PlayerFarmInfo.fromObject(data.farm_info);
            }
            if (data.egg_laying_rate_buff != null) {
                message.egg_laying_rate_buff = data.egg_laying_rate_buff;
            }
            if (data.earnings_buff != null) {
                message.earnings_buff = data.earnings_buff;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                user_id?: string;
                contract_identifier?: string;
                coop_identifier?: string;
                push_user_id?: string;
                amount?: number;
                rate?: number;
                time_cheats_detected?: number;
                soul_power?: number;
                eop?: number;
                boost_tokens?: number;
                boost_tokens_spent?: number;
                hide_cc_status?: boolean;
                production_params?: ReturnType<typeof FarmProductionParams.prototype.toObject>;
                farm_info?: ReturnType<typeof PlayerFarmInfo.prototype.toObject>;
                egg_laying_rate_buff?: number;
                earnings_buff?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.contract_identifier != null) {
                data.contract_identifier = this.contract_identifier;
            }
            if (this.coop_identifier != null) {
                data.coop_identifier = this.coop_identifier;
            }
            if (this.push_user_id != null) {
                data.push_user_id = this.push_user_id;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.rate != null) {
                data.rate = this.rate;
            }
            if (this.time_cheats_detected != null) {
                data.time_cheats_detected = this.time_cheats_detected;
            }
            if (this.soul_power != null) {
                data.soul_power = this.soul_power;
            }
            if (this.eop != null) {
                data.eop = this.eop;
            }
            if (this.boost_tokens != null) {
                data.boost_tokens = this.boost_tokens;
            }
            if (this.boost_tokens_spent != null) {
                data.boost_tokens_spent = this.boost_tokens_spent;
            }
            if (this.hide_cc_status != null) {
                data.hide_cc_status = this.hide_cc_status;
            }
            if (this.production_params != null) {
                data.production_params = this.production_params.toObject();
            }
            if (this.farm_info != null) {
                data.farm_info = this.farm_info.toObject();
            }
            if (this.egg_laying_rate_buff != null) {
                data.egg_laying_rate_buff = this.egg_laying_rate_buff;
            }
            if (this.earnings_buff != null) {
                data.earnings_buff = this.earnings_buff;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(12, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_user_id && this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_contract_identifier && this.contract_identifier.length)
                writer.writeString(2, this.contract_identifier);
            if (this.has_coop_identifier && this.coop_identifier.length)
                writer.writeString(3, this.coop_identifier);
            if (this.has_push_user_id && this.push_user_id.length)
                writer.writeString(8, this.push_user_id);
            if (this.has_amount)
                writer.writeDouble(4, this.amount);
            if (this.has_rate)
                writer.writeDouble(5, this.rate);
            if (this.has_time_cheats_detected)
                writer.writeUint32(6, this.time_cheats_detected);
            if (this.has_soul_power)
                writer.writeDouble(7, this.soul_power);
            if (this.has_eop)
                writer.writeUint32(15, this.eop);
            if (this.has_boost_tokens)
                writer.writeUint32(9, this.boost_tokens);
            if (this.has_boost_tokens_spent)
                writer.writeUint32(13, this.boost_tokens_spent);
            if (this.has_hide_cc_status)
                writer.writeBool(17, this.hide_cc_status);
            if (this.has_production_params)
                writer.writeMessage(14, this.production_params, () => this.production_params.serialize(writer));
            if (this.has_farm_info)
                writer.writeMessage(16, this.farm_info, () => this.farm_info.serialize(writer));
            if (this.has_egg_laying_rate_buff)
                writer.writeDouble(10, this.egg_laying_rate_buff);
            if (this.has_earnings_buff)
                writer.writeDouble(11, this.earnings_buff);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractCoopStatusUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractCoopStatusUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 12:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.contract_identifier = reader.readString();
                        break;
                    case 3:
                        message.coop_identifier = reader.readString();
                        break;
                    case 8:
                        message.push_user_id = reader.readString();
                        break;
                    case 4:
                        message.amount = reader.readDouble();
                        break;
                    case 5:
                        message.rate = reader.readDouble();
                        break;
                    case 6:
                        message.time_cheats_detected = reader.readUint32();
                        break;
                    case 7:
                        message.soul_power = reader.readDouble();
                        break;
                    case 15:
                        message.eop = reader.readUint32();
                        break;
                    case 9:
                        message.boost_tokens = reader.readUint32();
                        break;
                    case 13:
                        message.boost_tokens_spent = reader.readUint32();
                        break;
                    case 17:
                        message.hide_cc_status = reader.readBool();
                        break;
                    case 14:
                        reader.readMessage(message.production_params, () => message.production_params = FarmProductionParams.deserialize(reader));
                        break;
                    case 16:
                        reader.readMessage(message.farm_info, () => message.farm_info = PlayerFarmInfo.deserialize(reader));
                        break;
                    case 10:
                        message.egg_laying_rate_buff = reader.readDouble();
                        break;
                    case 11:
                        message.earnings_buff = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractCoopStatusUpdateRequest {
            return ContractCoopStatusUpdateRequest.deserialize(bytes);
        }
    }
    export class ContractCoopStatusUpdateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            finalized?: boolean;
            exists?: boolean;
            status?: ContractCoopStatusResponse.MemberStatus;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("finalized" in data && data.finalized != undefined) {
                    this.finalized = data.finalized;
                }
                if ("exists" in data && data.exists != undefined) {
                    this.exists = data.exists;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get finalized() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set finalized(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_finalized() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get exists() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set exists(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_exists() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 3, ContractCoopStatusResponse.MemberStatus.VALID) as ContractCoopStatusResponse.MemberStatus;
        }
        set status(value: ContractCoopStatusResponse.MemberStatus) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            finalized?: boolean;
            exists?: boolean;
            status?: ContractCoopStatusResponse.MemberStatus;
        }): ContractCoopStatusUpdateResponse {
            const message = new ContractCoopStatusUpdateResponse({});
            if (data.finalized != null) {
                message.finalized = data.finalized;
            }
            if (data.exists != null) {
                message.exists = data.exists;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                finalized?: boolean;
                exists?: boolean;
                status?: ContractCoopStatusResponse.MemberStatus;
            } = {};
            if (this.finalized != null) {
                data.finalized = this.finalized;
            }
            if (this.exists != null) {
                data.exists = this.exists;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_finalized)
                writer.writeBool(1, this.finalized);
            if (this.has_exists)
                writer.writeBool(2, this.exists);
            if (this.has_status)
                writer.writeEnum(3, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractCoopStatusUpdateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractCoopStatusUpdateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.finalized = reader.readBool();
                        break;
                    case 2:
                        message.exists = reader.readBool();
                        break;
                    case 3:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractCoopStatusUpdateResponse {
            return ContractCoopStatusUpdateResponse.deserialize(bytes);
        }
    }
    export class CoopBuffState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            egg_laying_rate?: number;
            earnings?: number;
            server_timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("egg_laying_rate" in data && data.egg_laying_rate != undefined) {
                    this.egg_laying_rate = data.egg_laying_rate;
                }
                if ("earnings" in data && data.earnings != undefined) {
                    this.earnings = data.earnings;
                }
                if ("server_timestamp" in data && data.server_timestamp != undefined) {
                    this.server_timestamp = data.server_timestamp;
                }
            }
        }
        get egg_laying_rate() {
            return pb_1.Message.getFieldWithDefault(this, 1, 1) as number;
        }
        set egg_laying_rate(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_egg_laying_rate() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get earnings() {
            return pb_1.Message.getFieldWithDefault(this, 2, 1) as number;
        }
        set earnings(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_earnings() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get server_timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set server_timestamp(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_server_timestamp() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            egg_laying_rate?: number;
            earnings?: number;
            server_timestamp?: number;
        }): CoopBuffState {
            const message = new CoopBuffState({});
            if (data.egg_laying_rate != null) {
                message.egg_laying_rate = data.egg_laying_rate;
            }
            if (data.earnings != null) {
                message.earnings = data.earnings;
            }
            if (data.server_timestamp != null) {
                message.server_timestamp = data.server_timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                egg_laying_rate?: number;
                earnings?: number;
                server_timestamp?: number;
            } = {};
            if (this.egg_laying_rate != null) {
                data.egg_laying_rate = this.egg_laying_rate;
            }
            if (this.earnings != null) {
                data.earnings = this.earnings;
            }
            if (this.server_timestamp != null) {
                data.server_timestamp = this.server_timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_egg_laying_rate)
                writer.writeDouble(1, this.egg_laying_rate);
            if (this.has_earnings)
                writer.writeDouble(2, this.earnings);
            if (this.has_server_timestamp)
                writer.writeDouble(3, this.server_timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CoopBuffState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CoopBuffState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.egg_laying_rate = reader.readDouble();
                        break;
                    case 2:
                        message.earnings = reader.readDouble();
                        break;
                    case 3:
                        message.server_timestamp = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CoopBuffState {
            return CoopBuffState.deserialize(bytes);
        }
    }
    export class CoopBuffHistory extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            history: CoopBuffState[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.history = data.history;
            }
        }
        get history() {
            return pb_1.Message.getRepeatedWrapperField(this, CoopBuffState, 1) as CoopBuffState[];
        }
        set history(value: CoopBuffState[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            history?: ReturnType<typeof CoopBuffState.prototype.toObject>[];
        }): CoopBuffHistory {
            const message = new CoopBuffHistory({
                history: data.history.map(item => CoopBuffState.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                history?: ReturnType<typeof CoopBuffState.prototype.toObject>[];
            } = {};
            if (this.history != null) {
                data.history = this.history.map((item: CoopBuffState) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.history.length)
                writer.writeRepeatedMessage(1, this.history, (item: CoopBuffState) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CoopBuffHistory {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CoopBuffHistory();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.history, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CoopBuffState.deserialize(reader), CoopBuffState));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CoopBuffHistory {
            return CoopBuffHistory.deserialize(bytes);
        }
    }
    export class CoopChickenRunEntry extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            server_timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("server_timestamp" in data && data.server_timestamp != undefined) {
                    this.server_timestamp = data.server_timestamp;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get server_timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set server_timestamp(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_server_timestamp() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            user_id?: string;
            server_timestamp?: number;
        }): CoopChickenRunEntry {
            const message = new CoopChickenRunEntry({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.server_timestamp != null) {
                message.server_timestamp = data.server_timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                server_timestamp?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.server_timestamp != null) {
                data.server_timestamp = this.server_timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user_id && this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_server_timestamp)
                writer.writeDouble(2, this.server_timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CoopChickenRunEntry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CoopChickenRunEntry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.server_timestamp = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CoopChickenRunEntry {
            return CoopChickenRunEntry.deserialize(bytes);
        }
    }
    export class CoopLastChickenRunTimes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            entries: CoopChickenRunEntry[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.entries = data.entries;
            }
        }
        get entries() {
            return pb_1.Message.getRepeatedWrapperField(this, CoopChickenRunEntry, 3) as CoopChickenRunEntry[];
        }
        set entries(value: CoopChickenRunEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            entries?: ReturnType<typeof CoopChickenRunEntry.prototype.toObject>[];
        }): CoopLastChickenRunTimes {
            const message = new CoopLastChickenRunTimes({
                entries: data.entries.map(item => CoopChickenRunEntry.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                entries?: ReturnType<typeof CoopChickenRunEntry.prototype.toObject>[];
            } = {};
            if (this.entries != null) {
                data.entries = this.entries.map((item: CoopChickenRunEntry) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.entries.length)
                writer.writeRepeatedMessage(3, this.entries, (item: CoopChickenRunEntry) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CoopLastChickenRunTimes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CoopLastChickenRunTimes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        reader.readMessage(message.entries, () => pb_1.Message.addToRepeatedWrapperField(message, 3, CoopChickenRunEntry.deserialize(reader), CoopChickenRunEntry));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CoopLastChickenRunTimes {
            return CoopLastChickenRunTimes.deserialize(bytes);
        }
    }
    export class LeaderboardAnalysis extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chunks: LeaderboardAnalysis.Chunk[];
            count?: number;
            high_score?: number;
            low_score?: number;
            cursor?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.chunks = data.chunks;
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("high_score" in data && data.high_score != undefined) {
                    this.high_score = data.high_score;
                }
                if ("low_score" in data && data.low_score != undefined) {
                    this.low_score = data.low_score;
                }
                if ("cursor" in data && data.cursor != undefined) {
                    this.cursor = data.cursor;
                }
            }
        }
        get chunks() {
            return pb_1.Message.getRepeatedWrapperField(this, LeaderboardAnalysis.Chunk, 1) as LeaderboardAnalysis.Chunk[];
        }
        set chunks(value: LeaderboardAnalysis.Chunk[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_count() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get high_score() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set high_score(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_high_score() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get low_score() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set low_score(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_low_score() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get cursor() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set cursor(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_cursor() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            chunks?: ReturnType<typeof LeaderboardAnalysis.Chunk.prototype.toObject>[];
            count?: number;
            high_score?: number;
            low_score?: number;
            cursor?: string;
        }): LeaderboardAnalysis {
            const message = new LeaderboardAnalysis({
                chunks: data.chunks.map(item => LeaderboardAnalysis.Chunk.fromObject(item))
            });
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.high_score != null) {
                message.high_score = data.high_score;
            }
            if (data.low_score != null) {
                message.low_score = data.low_score;
            }
            if (data.cursor != null) {
                message.cursor = data.cursor;
            }
            return message;
        }
        toObject() {
            const data: {
                chunks?: ReturnType<typeof LeaderboardAnalysis.Chunk.prototype.toObject>[];
                count?: number;
                high_score?: number;
                low_score?: number;
                cursor?: string;
            } = {};
            if (this.chunks != null) {
                data.chunks = this.chunks.map((item: LeaderboardAnalysis.Chunk) => item.toObject());
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.high_score != null) {
                data.high_score = this.high_score;
            }
            if (this.low_score != null) {
                data.low_score = this.low_score;
            }
            if (this.cursor != null) {
                data.cursor = this.cursor;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chunks.length)
                writer.writeRepeatedMessage(1, this.chunks, (item: LeaderboardAnalysis.Chunk) => item.serialize(writer));
            if (this.has_count)
                writer.writeUint32(2, this.count);
            if (this.has_high_score)
                writer.writeDouble(3, this.high_score);
            if (this.has_low_score)
                writer.writeDouble(4, this.low_score);
            if (this.has_cursor && this.cursor.length)
                writer.writeString(5, this.cursor);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaderboardAnalysis {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaderboardAnalysis();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.chunks, () => pb_1.Message.addToRepeatedWrapperField(message, 1, LeaderboardAnalysis.Chunk.deserialize(reader), LeaderboardAnalysis.Chunk));
                        break;
                    case 2:
                        message.count = reader.readUint32();
                        break;
                    case 3:
                        message.high_score = reader.readDouble();
                        break;
                    case 4:
                        message.low_score = reader.readDouble();
                        break;
                    case 5:
                        message.cursor = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LeaderboardAnalysis {
            return LeaderboardAnalysis.deserialize(bytes);
        }
    }
    export namespace LeaderboardAnalysis {
        export class Chunk extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                start_index?: number;
                end_index?: number;
                high_score?: number;
                low_score?: number;
                start_cursor?: string;
                end_cursor?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("start_index" in data && data.start_index != undefined) {
                        this.start_index = data.start_index;
                    }
                    if ("end_index" in data && data.end_index != undefined) {
                        this.end_index = data.end_index;
                    }
                    if ("high_score" in data && data.high_score != undefined) {
                        this.high_score = data.high_score;
                    }
                    if ("low_score" in data && data.low_score != undefined) {
                        this.low_score = data.low_score;
                    }
                    if ("start_cursor" in data && data.start_cursor != undefined) {
                        this.start_cursor = data.start_cursor;
                    }
                    if ("end_cursor" in data && data.end_cursor != undefined) {
                        this.end_cursor = data.end_cursor;
                    }
                }
            }
            get start_index() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set start_index(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_start_index() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get end_index() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set end_index(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_end_index() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get high_score() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set high_score(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_high_score() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get low_score() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set low_score(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_low_score() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get start_cursor() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set start_cursor(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_start_cursor() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get end_cursor() {
                return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
            }
            set end_cursor(value: string) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_end_cursor() {
                return pb_1.Message.getField(this, 6) != null;
            }
            static fromObject(data: {
                start_index?: number;
                end_index?: number;
                high_score?: number;
                low_score?: number;
                start_cursor?: string;
                end_cursor?: string;
            }): Chunk {
                const message = new Chunk({});
                if (data.start_index != null) {
                    message.start_index = data.start_index;
                }
                if (data.end_index != null) {
                    message.end_index = data.end_index;
                }
                if (data.high_score != null) {
                    message.high_score = data.high_score;
                }
                if (data.low_score != null) {
                    message.low_score = data.low_score;
                }
                if (data.start_cursor != null) {
                    message.start_cursor = data.start_cursor;
                }
                if (data.end_cursor != null) {
                    message.end_cursor = data.end_cursor;
                }
                return message;
            }
            toObject() {
                const data: {
                    start_index?: number;
                    end_index?: number;
                    high_score?: number;
                    low_score?: number;
                    start_cursor?: string;
                    end_cursor?: string;
                } = {};
                if (this.start_index != null) {
                    data.start_index = this.start_index;
                }
                if (this.end_index != null) {
                    data.end_index = this.end_index;
                }
                if (this.high_score != null) {
                    data.high_score = this.high_score;
                }
                if (this.low_score != null) {
                    data.low_score = this.low_score;
                }
                if (this.start_cursor != null) {
                    data.start_cursor = this.start_cursor;
                }
                if (this.end_cursor != null) {
                    data.end_cursor = this.end_cursor;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_start_index)
                    writer.writeUint32(1, this.start_index);
                if (this.has_end_index)
                    writer.writeUint32(2, this.end_index);
                if (this.has_high_score)
                    writer.writeDouble(3, this.high_score);
                if (this.has_low_score)
                    writer.writeDouble(4, this.low_score);
                if (this.has_start_cursor && this.start_cursor.length)
                    writer.writeString(5, this.start_cursor);
                if (this.has_end_cursor && this.end_cursor.length)
                    writer.writeString(6, this.end_cursor);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Chunk {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Chunk();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.start_index = reader.readUint32();
                            break;
                        case 2:
                            message.end_index = reader.readUint32();
                            break;
                        case 3:
                            message.high_score = reader.readDouble();
                            break;
                        case 4:
                            message.low_score = reader.readDouble();
                            break;
                        case 5:
                            message.start_cursor = reader.readString();
                            break;
                        case 6:
                            message.end_cursor = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Chunk {
                return Chunk.deserialize(bytes);
            }
        }
    }
    export class LeaderboardInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            seasons: LeaderboardInfo.Season[];
            all_time_scope?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.seasons = data.seasons;
                if ("all_time_scope" in data && data.all_time_scope != undefined) {
                    this.all_time_scope = data.all_time_scope;
                }
            }
        }
        get seasons() {
            return pb_1.Message.getRepeatedWrapperField(this, LeaderboardInfo.Season, 1) as LeaderboardInfo.Season[];
        }
        set seasons(value: LeaderboardInfo.Season[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get all_time_scope() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set all_time_scope(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_all_time_scope() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            seasons?: ReturnType<typeof LeaderboardInfo.Season.prototype.toObject>[];
            all_time_scope?: string;
        }): LeaderboardInfo {
            const message = new LeaderboardInfo({
                seasons: data.seasons.map(item => LeaderboardInfo.Season.fromObject(item))
            });
            if (data.all_time_scope != null) {
                message.all_time_scope = data.all_time_scope;
            }
            return message;
        }
        toObject() {
            const data: {
                seasons?: ReturnType<typeof LeaderboardInfo.Season.prototype.toObject>[];
                all_time_scope?: string;
            } = {};
            if (this.seasons != null) {
                data.seasons = this.seasons.map((item: LeaderboardInfo.Season) => item.toObject());
            }
            if (this.all_time_scope != null) {
                data.all_time_scope = this.all_time_scope;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.seasons.length)
                writer.writeRepeatedMessage(1, this.seasons, (item: LeaderboardInfo.Season) => item.serialize(writer));
            if (this.has_all_time_scope && this.all_time_scope.length)
                writer.writeString(2, this.all_time_scope);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaderboardInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaderboardInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.seasons, () => pb_1.Message.addToRepeatedWrapperField(message, 1, LeaderboardInfo.Season.deserialize(reader), LeaderboardInfo.Season));
                        break;
                    case 2:
                        message.all_time_scope = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LeaderboardInfo {
            return LeaderboardInfo.deserialize(bytes);
        }
    }
    export namespace LeaderboardInfo {
        export class Season extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                scope?: string;
                name?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("scope" in data && data.scope != undefined) {
                        this.scope = data.scope;
                    }
                    if ("name" in data && data.name != undefined) {
                        this.name = data.name;
                    }
                }
            }
            get scope() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set scope(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_scope() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get name() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set name(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_name() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                scope?: string;
                name?: string;
            }): Season {
                const message = new Season({});
                if (data.scope != null) {
                    message.scope = data.scope;
                }
                if (data.name != null) {
                    message.name = data.name;
                }
                return message;
            }
            toObject() {
                const data: {
                    scope?: string;
                    name?: string;
                } = {};
                if (this.scope != null) {
                    data.scope = this.scope;
                }
                if (this.name != null) {
                    data.name = this.name;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_scope && this.scope.length)
                    writer.writeString(1, this.scope);
                if (this.has_name && this.name.length)
                    writer.writeString(2, this.name);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Season {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Season();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.scope = reader.readString();
                            break;
                        case 2:
                            message.name = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Season {
                return Season.deserialize(bytes);
            }
        }
    }
    export class LeaderboardRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            scope?: string;
            grade?: Contract.PlayerGrade;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("scope" in data && data.scope != undefined) {
                    this.scope = data.scope;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 1) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get scope() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set scope(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_scope() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 3, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
        }
        set grade(value: Contract.PlayerGrade) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_grade() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            scope?: string;
            grade?: Contract.PlayerGrade;
        }): LeaderboardRequest {
            const message = new LeaderboardRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.scope != null) {
                message.scope = data.scope;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                scope?: string;
                grade?: Contract.PlayerGrade;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.scope != null) {
                data.scope = this.scope;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(1, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_scope && this.scope.length)
                writer.writeString(2, this.scope);
            if (this.has_grade)
                writer.writeEnum(3, this.grade);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaderboardRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaderboardRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 2:
                        message.scope = reader.readString();
                        break;
                    case 3:
                        message.grade = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LeaderboardRequest {
            return LeaderboardRequest.deserialize(bytes);
        }
    }
    export class LeaderboardResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            scope?: string;
            grade?: Contract.PlayerGrade;
            top_entries: LeaderboardResponse.Entry[];
            count?: number;
            rank?: number;
            score?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("scope" in data && data.scope != undefined) {
                    this.scope = data.scope;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                this.top_entries = data.top_entries;
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("rank" in data && data.rank != undefined) {
                    this.rank = data.rank;
                }
                if ("score" in data && data.score != undefined) {
                    this.score = data.score;
                }
            }
        }
        get scope() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set scope(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_scope() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 2, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
        }
        set grade(value: Contract.PlayerGrade) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_grade() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get top_entries() {
            return pb_1.Message.getRepeatedWrapperField(this, LeaderboardResponse.Entry, 3) as LeaderboardResponse.Entry[];
        }
        set top_entries(value: LeaderboardResponse.Entry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_count() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get rank() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set rank(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_rank() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get score() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set score(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_score() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            scope?: string;
            grade?: Contract.PlayerGrade;
            top_entries?: ReturnType<typeof LeaderboardResponse.Entry.prototype.toObject>[];
            count?: number;
            rank?: number;
            score?: number;
        }): LeaderboardResponse {
            const message = new LeaderboardResponse({
                top_entries: data.top_entries.map(item => LeaderboardResponse.Entry.fromObject(item))
            });
            if (data.scope != null) {
                message.scope = data.scope;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.rank != null) {
                message.rank = data.rank;
            }
            if (data.score != null) {
                message.score = data.score;
            }
            return message;
        }
        toObject() {
            const data: {
                scope?: string;
                grade?: Contract.PlayerGrade;
                top_entries?: ReturnType<typeof LeaderboardResponse.Entry.prototype.toObject>[];
                count?: number;
                rank?: number;
                score?: number;
            } = {};
            if (this.scope != null) {
                data.scope = this.scope;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.top_entries != null) {
                data.top_entries = this.top_entries.map((item: LeaderboardResponse.Entry) => item.toObject());
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.rank != null) {
                data.rank = this.rank;
            }
            if (this.score != null) {
                data.score = this.score;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_scope && this.scope.length)
                writer.writeString(1, this.scope);
            if (this.has_grade)
                writer.writeEnum(2, this.grade);
            if (this.top_entries.length)
                writer.writeRepeatedMessage(3, this.top_entries, (item: LeaderboardResponse.Entry) => item.serialize(writer));
            if (this.has_count)
                writer.writeUint32(4, this.count);
            if (this.has_rank)
                writer.writeUint32(5, this.rank);
            if (this.has_score)
                writer.writeDouble(6, this.score);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaderboardResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaderboardResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.scope = reader.readString();
                        break;
                    case 2:
                        message.grade = reader.readEnum();
                        break;
                    case 3:
                        reader.readMessage(message.top_entries, () => pb_1.Message.addToRepeatedWrapperField(message, 3, LeaderboardResponse.Entry.deserialize(reader), LeaderboardResponse.Entry));
                        break;
                    case 4:
                        message.count = reader.readUint32();
                        break;
                    case 5:
                        message.rank = reader.readUint32();
                        break;
                    case 6:
                        message.score = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LeaderboardResponse {
            return LeaderboardResponse.deserialize(bytes);
        }
    }
    export namespace LeaderboardResponse {
        export class Entry extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                rank?: number;
                alias?: string;
                score?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("rank" in data && data.rank != undefined) {
                        this.rank = data.rank;
                    }
                    if ("alias" in data && data.alias != undefined) {
                        this.alias = data.alias;
                    }
                    if ("score" in data && data.score != undefined) {
                        this.score = data.score;
                    }
                }
            }
            get rank() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set rank(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_rank() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get alias() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set alias(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_alias() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get score() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set score(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_score() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                rank?: number;
                alias?: string;
                score?: number;
            }): Entry {
                const message = new Entry({});
                if (data.rank != null) {
                    message.rank = data.rank;
                }
                if (data.alias != null) {
                    message.alias = data.alias;
                }
                if (data.score != null) {
                    message.score = data.score;
                }
                return message;
            }
            toObject() {
                const data: {
                    rank?: number;
                    alias?: string;
                    score?: number;
                } = {};
                if (this.rank != null) {
                    data.rank = this.rank;
                }
                if (this.alias != null) {
                    data.alias = this.alias;
                }
                if (this.score != null) {
                    data.score = this.score;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_rank)
                    writer.writeUint32(1, this.rank);
                if (this.has_alias && this.alias.length)
                    writer.writeString(2, this.alias);
                if (this.has_score)
                    writer.writeDouble(3, this.score);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Entry {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Entry();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.rank = reader.readUint32();
                            break;
                        case 2:
                            message.alias = reader.readString();
                            break;
                        case 3:
                            message.score = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Entry {
                return Entry.deserialize(bytes);
            }
        }
    }
    export class ContractsArchive extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            archive: LocalContract[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.archive = data.archive;
            }
        }
        get archive() {
            return pb_1.Message.getRepeatedWrapperField(this, LocalContract, 1) as LocalContract[];
        }
        set archive(value: LocalContract[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            archive?: ReturnType<typeof LocalContract.prototype.toObject>[];
        }): ContractsArchive {
            const message = new ContractsArchive({
                archive: data.archive.map(item => LocalContract.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                archive?: ReturnType<typeof LocalContract.prototype.toObject>[];
            } = {};
            if (this.archive != null) {
                data.archive = this.archive.map((item: LocalContract) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.archive.length)
                writer.writeRepeatedMessage(1, this.archive, (item: LocalContract) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractsArchive {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractsArchive();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.archive, () => pb_1.Message.addToRepeatedWrapperField(message, 1, LocalContract.deserialize(reader), LocalContract));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractsArchive {
            return ContractsArchive.deserialize(bytes);
        }
    }
    export class ContractAction extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            action_name?: string;
            approx_time?: number;
            dest_user_id?: string;
            contract_id?: string;
            coop_id?: string;
            autojoin?: boolean;
            grade?: number;
            replay?: boolean;
            points_replay?: boolean;
            reward_type?: number;
            reward_subtype?: string;
            reward_amount?: number;
            goal_index?: number;
            boost_id?: string;
            tokens?: number;
            kick_reason?: number;
            public?: boolean;
            cc_only?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("action_name" in data && data.action_name != undefined) {
                    this.action_name = data.action_name;
                }
                if ("approx_time" in data && data.approx_time != undefined) {
                    this.approx_time = data.approx_time;
                }
                if ("dest_user_id" in data && data.dest_user_id != undefined) {
                    this.dest_user_id = data.dest_user_id;
                }
                if ("contract_id" in data && data.contract_id != undefined) {
                    this.contract_id = data.contract_id;
                }
                if ("coop_id" in data && data.coop_id != undefined) {
                    this.coop_id = data.coop_id;
                }
                if ("autojoin" in data && data.autojoin != undefined) {
                    this.autojoin = data.autojoin;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                if ("replay" in data && data.replay != undefined) {
                    this.replay = data.replay;
                }
                if ("points_replay" in data && data.points_replay != undefined) {
                    this.points_replay = data.points_replay;
                }
                if ("reward_type" in data && data.reward_type != undefined) {
                    this.reward_type = data.reward_type;
                }
                if ("reward_subtype" in data && data.reward_subtype != undefined) {
                    this.reward_subtype = data.reward_subtype;
                }
                if ("reward_amount" in data && data.reward_amount != undefined) {
                    this.reward_amount = data.reward_amount;
                }
                if ("goal_index" in data && data.goal_index != undefined) {
                    this.goal_index = data.goal_index;
                }
                if ("boost_id" in data && data.boost_id != undefined) {
                    this.boost_id = data.boost_id;
                }
                if ("tokens" in data && data.tokens != undefined) {
                    this.tokens = data.tokens;
                }
                if ("kick_reason" in data && data.kick_reason != undefined) {
                    this.kick_reason = data.kick_reason;
                }
                if ("public" in data && data.public != undefined) {
                    this.public = data.public;
                }
                if ("cc_only" in data && data.cc_only != undefined) {
                    this.cc_only = data.cc_only;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get action_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set action_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_action_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get approx_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set approx_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_approx_time() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get dest_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set dest_user_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_dest_user_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get contract_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set contract_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_contract_id() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get coop_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set coop_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_coop_id() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get autojoin() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set autojoin(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_autojoin() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set grade(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_grade() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get replay() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set replay(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_replay() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get points_replay() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set points_replay(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_points_replay() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get reward_type() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set reward_type(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_reward_type() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get reward_subtype() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set reward_subtype(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_reward_subtype() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get reward_amount() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set reward_amount(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_reward_amount() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get goal_index() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set goal_index(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_goal_index() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get boost_id() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set boost_id(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_boost_id() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get tokens() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set tokens(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_tokens() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get kick_reason() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set kick_reason(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get has_kick_reason() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get public() {
            return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
        }
        set public(value: boolean) {
            pb_1.Message.setField(this, 18, value);
        }
        get has_public() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get cc_only() {
            return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
        }
        set cc_only(value: boolean) {
            pb_1.Message.setField(this, 19, value);
        }
        get has_cc_only() {
            return pb_1.Message.getField(this, 19) != null;
        }
        static fromObject(data: {
            user_id?: string;
            action_name?: string;
            approx_time?: number;
            dest_user_id?: string;
            contract_id?: string;
            coop_id?: string;
            autojoin?: boolean;
            grade?: number;
            replay?: boolean;
            points_replay?: boolean;
            reward_type?: number;
            reward_subtype?: string;
            reward_amount?: number;
            goal_index?: number;
            boost_id?: string;
            tokens?: number;
            kick_reason?: number;
            public?: boolean;
            cc_only?: boolean;
        }): ContractAction {
            const message = new ContractAction({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.action_name != null) {
                message.action_name = data.action_name;
            }
            if (data.approx_time != null) {
                message.approx_time = data.approx_time;
            }
            if (data.dest_user_id != null) {
                message.dest_user_id = data.dest_user_id;
            }
            if (data.contract_id != null) {
                message.contract_id = data.contract_id;
            }
            if (data.coop_id != null) {
                message.coop_id = data.coop_id;
            }
            if (data.autojoin != null) {
                message.autojoin = data.autojoin;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.replay != null) {
                message.replay = data.replay;
            }
            if (data.points_replay != null) {
                message.points_replay = data.points_replay;
            }
            if (data.reward_type != null) {
                message.reward_type = data.reward_type;
            }
            if (data.reward_subtype != null) {
                message.reward_subtype = data.reward_subtype;
            }
            if (data.reward_amount != null) {
                message.reward_amount = data.reward_amount;
            }
            if (data.goal_index != null) {
                message.goal_index = data.goal_index;
            }
            if (data.boost_id != null) {
                message.boost_id = data.boost_id;
            }
            if (data.tokens != null) {
                message.tokens = data.tokens;
            }
            if (data.kick_reason != null) {
                message.kick_reason = data.kick_reason;
            }
            if (data.public != null) {
                message.public = data.public;
            }
            if (data.cc_only != null) {
                message.cc_only = data.cc_only;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                action_name?: string;
                approx_time?: number;
                dest_user_id?: string;
                contract_id?: string;
                coop_id?: string;
                autojoin?: boolean;
                grade?: number;
                replay?: boolean;
                points_replay?: boolean;
                reward_type?: number;
                reward_subtype?: string;
                reward_amount?: number;
                goal_index?: number;
                boost_id?: string;
                tokens?: number;
                kick_reason?: number;
                public?: boolean;
                cc_only?: boolean;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.action_name != null) {
                data.action_name = this.action_name;
            }
            if (this.approx_time != null) {
                data.approx_time = this.approx_time;
            }
            if (this.dest_user_id != null) {
                data.dest_user_id = this.dest_user_id;
            }
            if (this.contract_id != null) {
                data.contract_id = this.contract_id;
            }
            if (this.coop_id != null) {
                data.coop_id = this.coop_id;
            }
            if (this.autojoin != null) {
                data.autojoin = this.autojoin;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.replay != null) {
                data.replay = this.replay;
            }
            if (this.points_replay != null) {
                data.points_replay = this.points_replay;
            }
            if (this.reward_type != null) {
                data.reward_type = this.reward_type;
            }
            if (this.reward_subtype != null) {
                data.reward_subtype = this.reward_subtype;
            }
            if (this.reward_amount != null) {
                data.reward_amount = this.reward_amount;
            }
            if (this.goal_index != null) {
                data.goal_index = this.goal_index;
            }
            if (this.boost_id != null) {
                data.boost_id = this.boost_id;
            }
            if (this.tokens != null) {
                data.tokens = this.tokens;
            }
            if (this.kick_reason != null) {
                data.kick_reason = this.kick_reason;
            }
            if (this.public != null) {
                data.public = this.public;
            }
            if (this.cc_only != null) {
                data.cc_only = this.cc_only;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user_id && this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_action_name && this.action_name.length)
                writer.writeString(2, this.action_name);
            if (this.has_approx_time)
                writer.writeDouble(3, this.approx_time);
            if (this.has_dest_user_id && this.dest_user_id.length)
                writer.writeString(4, this.dest_user_id);
            if (this.has_contract_id && this.contract_id.length)
                writer.writeString(5, this.contract_id);
            if (this.has_coop_id && this.coop_id.length)
                writer.writeString(6, this.coop_id);
            if (this.has_autojoin)
                writer.writeBool(7, this.autojoin);
            if (this.has_grade)
                writer.writeUint32(8, this.grade);
            if (this.has_replay)
                writer.writeBool(9, this.replay);
            if (this.has_points_replay)
                writer.writeBool(10, this.points_replay);
            if (this.has_reward_type)
                writer.writeUint32(11, this.reward_type);
            if (this.has_reward_subtype && this.reward_subtype.length)
                writer.writeString(12, this.reward_subtype);
            if (this.has_reward_amount)
                writer.writeDouble(13, this.reward_amount);
            if (this.has_goal_index)
                writer.writeUint32(14, this.goal_index);
            if (this.has_boost_id && this.boost_id.length)
                writer.writeString(15, this.boost_id);
            if (this.has_tokens)
                writer.writeUint32(16, this.tokens);
            if (this.has_kick_reason)
                writer.writeUint32(17, this.kick_reason);
            if (this.has_public)
                writer.writeBool(18, this.public);
            if (this.has_cc_only)
                writer.writeBool(19, this.cc_only);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractAction {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractAction();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.action_name = reader.readString();
                        break;
                    case 3:
                        message.approx_time = reader.readDouble();
                        break;
                    case 4:
                        message.dest_user_id = reader.readString();
                        break;
                    case 5:
                        message.contract_id = reader.readString();
                        break;
                    case 6:
                        message.coop_id = reader.readString();
                        break;
                    case 7:
                        message.autojoin = reader.readBool();
                        break;
                    case 8:
                        message.grade = reader.readUint32();
                        break;
                    case 9:
                        message.replay = reader.readBool();
                        break;
                    case 10:
                        message.points_replay = reader.readBool();
                        break;
                    case 11:
                        message.reward_type = reader.readUint32();
                        break;
                    case 12:
                        message.reward_subtype = reader.readString();
                        break;
                    case 13:
                        message.reward_amount = reader.readDouble();
                        break;
                    case 14:
                        message.goal_index = reader.readUint32();
                        break;
                    case 15:
                        message.boost_id = reader.readString();
                        break;
                    case 16:
                        message.tokens = reader.readUint32();
                        break;
                    case 17:
                        message.kick_reason = reader.readUint32();
                        break;
                    case 18:
                        message.public = reader.readBool();
                        break;
                    case 19:
                        message.cc_only = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractAction {
            return ContractAction.deserialize(bytes);
        }
    }
    export class UserDataInfoRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            user_id?: string;
            device_id?: string;
            backup_checksum?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("backup_checksum" in data && data.backup_checksum != undefined) {
                    this.backup_checksum = data.backup_checksum;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 4) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_device_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get backup_checksum() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set backup_checksum(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_backup_checksum() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            user_id?: string;
            device_id?: string;
            backup_checksum?: number;
        }): UserDataInfoRequest {
            const message = new UserDataInfoRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.backup_checksum != null) {
                message.backup_checksum = data.backup_checksum;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                user_id?: string;
                device_id?: string;
                backup_checksum?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.backup_checksum != null) {
                data.backup_checksum = this.backup_checksum;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(4, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_user_id && this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_device_id && this.device_id.length)
                writer.writeString(2, this.device_id);
            if (this.has_backup_checksum)
                writer.writeUint64(3, this.backup_checksum);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserDataInfoRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserDataInfoRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 4:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.device_id = reader.readString();
                        break;
                    case 3:
                        message.backup_checksum = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserDataInfoRequest {
            return UserDataInfoRequest.deserialize(bytes);
        }
    }
    export class UserDataInfoResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            backup_checksum?: number;
            backup_total_cash?: number;
            coop_memberships: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("backup_checksum" in data && data.backup_checksum != undefined) {
                    this.backup_checksum = data.backup_checksum;
                }
                if ("backup_total_cash" in data && data.backup_total_cash != undefined) {
                    this.backup_total_cash = data.backup_total_cash;
                }
                this.coop_memberships = data.coop_memberships;
            }
        }
        get backup_checksum() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set backup_checksum(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_backup_checksum() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get backup_total_cash() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set backup_total_cash(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_backup_total_cash() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get coop_memberships() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set coop_memberships(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            backup_checksum?: number;
            backup_total_cash?: number;
            coop_memberships: string[];
        }): UserDataInfoResponse {
            const message = new UserDataInfoResponse({
                coop_memberships: data.coop_memberships
            });
            if (data.backup_checksum != null) {
                message.backup_checksum = data.backup_checksum;
            }
            if (data.backup_total_cash != null) {
                message.backup_total_cash = data.backup_total_cash;
            }
            return message;
        }
        toObject() {
            const data: {
                backup_checksum?: number;
                backup_total_cash?: number;
                coop_memberships: string[];
            } = {
                coop_memberships: this.coop_memberships
            };
            if (this.backup_checksum != null) {
                data.backup_checksum = this.backup_checksum;
            }
            if (this.backup_total_cash != null) {
                data.backup_total_cash = this.backup_total_cash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_backup_checksum)
                writer.writeUint64(1, this.backup_checksum);
            if (this.has_backup_total_cash)
                writer.writeDouble(2, this.backup_total_cash);
            if (this.coop_memberships.length)
                writer.writeRepeatedString(3, this.coop_memberships);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserDataInfoResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserDataInfoResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.backup_checksum = reader.readUint64();
                        break;
                    case 2:
                        message.backup_total_cash = reader.readDouble();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserDataInfoResponse {
            return UserDataInfoResponse.deserialize(bytes);
        }
    }
    export class ClearAllUserDataRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            user_id?: string;
            device_id?: string;
            backup_checksum?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("device_id" in data && data.device_id != undefined) {
                    this.device_id = data.device_id;
                }
                if ("backup_checksum" in data && data.backup_checksum != undefined) {
                    this.backup_checksum = data.backup_checksum;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 4) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get device_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set device_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_device_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get backup_checksum() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set backup_checksum(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_backup_checksum() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            user_id?: string;
            device_id?: string;
            backup_checksum?: number;
        }): ClearAllUserDataRequest {
            const message = new ClearAllUserDataRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.device_id != null) {
                message.device_id = data.device_id;
            }
            if (data.backup_checksum != null) {
                message.backup_checksum = data.backup_checksum;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                user_id?: string;
                device_id?: string;
                backup_checksum?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.device_id != null) {
                data.device_id = this.device_id;
            }
            if (this.backup_checksum != null) {
                data.backup_checksum = this.backup_checksum;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(4, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_user_id && this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_device_id && this.device_id.length)
                writer.writeString(2, this.device_id);
            if (this.has_backup_checksum)
                writer.writeUint64(3, this.backup_checksum);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClearAllUserDataRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClearAllUserDataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 4:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.device_id = reader.readString();
                        break;
                    case 3:
                        message.backup_checksum = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClearAllUserDataRequest {
            return ClearAllUserDataRequest.deserialize(bytes);
        }
    }
    export class ServerGift extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            reward_type?: RewardType;
            reward_sub_type?: string;
            reward_amount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("reward_type" in data && data.reward_type != undefined) {
                    this.reward_type = data.reward_type;
                }
                if ("reward_sub_type" in data && data.reward_sub_type != undefined) {
                    this.reward_sub_type = data.reward_sub_type;
                }
                if ("reward_amount" in data && data.reward_amount != undefined) {
                    this.reward_amount = data.reward_amount;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get reward_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, RewardType.CASH) as RewardType;
        }
        set reward_type(value: RewardType) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_reward_type() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get reward_sub_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set reward_sub_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_reward_sub_type() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get reward_amount() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set reward_amount(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_reward_amount() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            user_id?: string;
            reward_type?: RewardType;
            reward_sub_type?: string;
            reward_amount?: number;
        }): ServerGift {
            const message = new ServerGift({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.reward_type != null) {
                message.reward_type = data.reward_type;
            }
            if (data.reward_sub_type != null) {
                message.reward_sub_type = data.reward_sub_type;
            }
            if (data.reward_amount != null) {
                message.reward_amount = data.reward_amount;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                reward_type?: RewardType;
                reward_sub_type?: string;
                reward_amount?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.reward_type != null) {
                data.reward_type = this.reward_type;
            }
            if (this.reward_sub_type != null) {
                data.reward_sub_type = this.reward_sub_type;
            }
            if (this.reward_amount != null) {
                data.reward_amount = this.reward_amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user_id && this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_reward_type)
                writer.writeEnum(3, this.reward_type);
            if (this.has_reward_sub_type && this.reward_sub_type.length)
                writer.writeString(4, this.reward_sub_type);
            if (this.has_reward_amount)
                writer.writeDouble(5, this.reward_amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerGift {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerGift();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 3:
                        message.reward_type = reader.readEnum();
                        break;
                    case 4:
                        message.reward_sub_type = reader.readString();
                        break;
                    case 5:
                        message.reward_amount = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServerGift {
            return ServerGift.deserialize(bytes);
        }
    }
    export class LiveConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            config_id?: string;
            boosts_config?: LiveConfig.BoostsConfig;
            gift_config?: LiveConfig.GiftConfig;
            misc_config?: LiveConfig.MiscConfig;
            help_config?: LiveConfig.HelpConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config_id" in data && data.config_id != undefined) {
                    this.config_id = data.config_id;
                }
                if ("boosts_config" in data && data.boosts_config != undefined) {
                    this.boosts_config = data.boosts_config;
                }
                if ("gift_config" in data && data.gift_config != undefined) {
                    this.gift_config = data.gift_config;
                }
                if ("misc_config" in data && data.misc_config != undefined) {
                    this.misc_config = data.misc_config;
                }
                if ("help_config" in data && data.help_config != undefined) {
                    this.help_config = data.help_config;
                }
            }
        }
        get config_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set config_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_config_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get boosts_config() {
            return pb_1.Message.getWrapperField(this, LiveConfig.BoostsConfig, 2) as LiveConfig.BoostsConfig;
        }
        set boosts_config(value: LiveConfig.BoostsConfig) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_boosts_config() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get gift_config() {
            return pb_1.Message.getWrapperField(this, LiveConfig.GiftConfig, 3) as LiveConfig.GiftConfig;
        }
        set gift_config(value: LiveConfig.GiftConfig) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_gift_config() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get misc_config() {
            return pb_1.Message.getWrapperField(this, LiveConfig.MiscConfig, 4) as LiveConfig.MiscConfig;
        }
        set misc_config(value: LiveConfig.MiscConfig) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_misc_config() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get help_config() {
            return pb_1.Message.getWrapperField(this, LiveConfig.HelpConfig, 5) as LiveConfig.HelpConfig;
        }
        set help_config(value: LiveConfig.HelpConfig) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_help_config() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            config_id?: string;
            boosts_config?: ReturnType<typeof LiveConfig.BoostsConfig.prototype.toObject>;
            gift_config?: ReturnType<typeof LiveConfig.GiftConfig.prototype.toObject>;
            misc_config?: ReturnType<typeof LiveConfig.MiscConfig.prototype.toObject>;
            help_config?: ReturnType<typeof LiveConfig.HelpConfig.prototype.toObject>;
        }): LiveConfig {
            const message = new LiveConfig({});
            if (data.config_id != null) {
                message.config_id = data.config_id;
            }
            if (data.boosts_config != null) {
                message.boosts_config = LiveConfig.BoostsConfig.fromObject(data.boosts_config);
            }
            if (data.gift_config != null) {
                message.gift_config = LiveConfig.GiftConfig.fromObject(data.gift_config);
            }
            if (data.misc_config != null) {
                message.misc_config = LiveConfig.MiscConfig.fromObject(data.misc_config);
            }
            if (data.help_config != null) {
                message.help_config = LiveConfig.HelpConfig.fromObject(data.help_config);
            }
            return message;
        }
        toObject() {
            const data: {
                config_id?: string;
                boosts_config?: ReturnType<typeof LiveConfig.BoostsConfig.prototype.toObject>;
                gift_config?: ReturnType<typeof LiveConfig.GiftConfig.prototype.toObject>;
                misc_config?: ReturnType<typeof LiveConfig.MiscConfig.prototype.toObject>;
                help_config?: ReturnType<typeof LiveConfig.HelpConfig.prototype.toObject>;
            } = {};
            if (this.config_id != null) {
                data.config_id = this.config_id;
            }
            if (this.boosts_config != null) {
                data.boosts_config = this.boosts_config.toObject();
            }
            if (this.gift_config != null) {
                data.gift_config = this.gift_config.toObject();
            }
            if (this.misc_config != null) {
                data.misc_config = this.misc_config.toObject();
            }
            if (this.help_config != null) {
                data.help_config = this.help_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_config_id && this.config_id.length)
                writer.writeString(1, this.config_id);
            if (this.has_boosts_config)
                writer.writeMessage(2, this.boosts_config, () => this.boosts_config.serialize(writer));
            if (this.has_gift_config)
                writer.writeMessage(3, this.gift_config, () => this.gift_config.serialize(writer));
            if (this.has_misc_config)
                writer.writeMessage(4, this.misc_config, () => this.misc_config.serialize(writer));
            if (this.has_help_config)
                writer.writeMessage(5, this.help_config, () => this.help_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LiveConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LiveConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.config_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.boosts_config, () => message.boosts_config = LiveConfig.BoostsConfig.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.gift_config, () => message.gift_config = LiveConfig.GiftConfig.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.misc_config, () => message.misc_config = LiveConfig.MiscConfig.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.help_config, () => message.help_config = LiveConfig.HelpConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LiveConfig {
            return LiveConfig.deserialize(bytes);
        }
    }
    export namespace LiveConfig {
        export class BoostsConfig extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                item_configs: LiveConfig.BoostsConfig.ItemConfig[];
                cash_boost_cooloff_time?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    this.item_configs = data.item_configs;
                    if ("cash_boost_cooloff_time" in data && data.cash_boost_cooloff_time != undefined) {
                        this.cash_boost_cooloff_time = data.cash_boost_cooloff_time;
                    }
                }
            }
            get item_configs() {
                return pb_1.Message.getRepeatedWrapperField(this, LiveConfig.BoostsConfig.ItemConfig, 1) as LiveConfig.BoostsConfig.ItemConfig[];
            }
            set item_configs(value: LiveConfig.BoostsConfig.ItemConfig[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get cash_boost_cooloff_time() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set cash_boost_cooloff_time(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_cash_boost_cooloff_time() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                item_configs?: ReturnType<typeof LiveConfig.BoostsConfig.ItemConfig.prototype.toObject>[];
                cash_boost_cooloff_time?: number;
            }): BoostsConfig {
                const message = new BoostsConfig({
                    item_configs: data.item_configs.map(item => LiveConfig.BoostsConfig.ItemConfig.fromObject(item))
                });
                if (data.cash_boost_cooloff_time != null) {
                    message.cash_boost_cooloff_time = data.cash_boost_cooloff_time;
                }
                return message;
            }
            toObject() {
                const data: {
                    item_configs?: ReturnType<typeof LiveConfig.BoostsConfig.ItemConfig.prototype.toObject>[];
                    cash_boost_cooloff_time?: number;
                } = {};
                if (this.item_configs != null) {
                    data.item_configs = this.item_configs.map((item: LiveConfig.BoostsConfig.ItemConfig) => item.toObject());
                }
                if (this.cash_boost_cooloff_time != null) {
                    data.cash_boost_cooloff_time = this.cash_boost_cooloff_time;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.item_configs.length)
                    writer.writeRepeatedMessage(1, this.item_configs, (item: LiveConfig.BoostsConfig.ItemConfig) => item.serialize(writer));
                if (this.has_cash_boost_cooloff_time)
                    writer.writeDouble(2, this.cash_boost_cooloff_time);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BoostsConfig {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BoostsConfig();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.item_configs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, LiveConfig.BoostsConfig.ItemConfig.deserialize(reader), LiveConfig.BoostsConfig.ItemConfig));
                            break;
                        case 2:
                            message.cash_boost_cooloff_time = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): BoostsConfig {
                return BoostsConfig.deserialize(bytes);
            }
        }
        export namespace BoostsConfig {
            export class ItemConfig extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    boost_id?: string;
                    price?: number;
                    token_price?: number;
                    se_required?: number;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("boost_id" in data && data.boost_id != undefined) {
                            this.boost_id = data.boost_id;
                        }
                        if ("price" in data && data.price != undefined) {
                            this.price = data.price;
                        }
                        if ("token_price" in data && data.token_price != undefined) {
                            this.token_price = data.token_price;
                        }
                        if ("se_required" in data && data.se_required != undefined) {
                            this.se_required = data.se_required;
                        }
                    }
                }
                get boost_id() {
                    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
                }
                set boost_id(value: string) {
                    pb_1.Message.setField(this, 1, value);
                }
                get has_boost_id() {
                    return pb_1.Message.getField(this, 1) != null;
                }
                get price() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set price(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                get has_price() {
                    return pb_1.Message.getField(this, 2) != null;
                }
                get token_price() {
                    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
                }
                set token_price(value: number) {
                    pb_1.Message.setField(this, 3, value);
                }
                get has_token_price() {
                    return pb_1.Message.getField(this, 3) != null;
                }
                get se_required() {
                    return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
                }
                set se_required(value: number) {
                    pb_1.Message.setField(this, 4, value);
                }
                get has_se_required() {
                    return pb_1.Message.getField(this, 4) != null;
                }
                static fromObject(data: {
                    boost_id?: string;
                    price?: number;
                    token_price?: number;
                    se_required?: number;
                }): ItemConfig {
                    const message = new ItemConfig({});
                    if (data.boost_id != null) {
                        message.boost_id = data.boost_id;
                    }
                    if (data.price != null) {
                        message.price = data.price;
                    }
                    if (data.token_price != null) {
                        message.token_price = data.token_price;
                    }
                    if (data.se_required != null) {
                        message.se_required = data.se_required;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        boost_id?: string;
                        price?: number;
                        token_price?: number;
                        se_required?: number;
                    } = {};
                    if (this.boost_id != null) {
                        data.boost_id = this.boost_id;
                    }
                    if (this.price != null) {
                        data.price = this.price;
                    }
                    if (this.token_price != null) {
                        data.token_price = this.token_price;
                    }
                    if (this.se_required != null) {
                        data.se_required = this.se_required;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.has_boost_id && this.boost_id.length)
                        writer.writeString(1, this.boost_id);
                    if (this.has_price)
                        writer.writeUint32(2, this.price);
                    if (this.has_token_price)
                        writer.writeUint32(3, this.token_price);
                    if (this.has_se_required)
                        writer.writeDouble(4, this.se_required);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ItemConfig {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ItemConfig();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.boost_id = reader.readString();
                                break;
                            case 2:
                                message.price = reader.readUint32();
                                break;
                            case 3:
                                message.token_price = reader.readUint32();
                                break;
                            case 4:
                                message.se_required = reader.readDouble();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): ItemConfig {
                    return ItemConfig.deserialize(bytes);
                }
            }
        }
        export class GiftConfig extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                gift_configs: LiveConfig.GiftConfig.GiftValueConfig[];
                gift_mu_min_spent?: number;
                gift_mu_max_spent?: number;
                gift_mu_overall_mult?: number;
                random_gift_mu_config?: LiveConfig.GiftConfig.GiftMuConfig;
                video_gift_mu_config?: LiveConfig.GiftConfig.GiftMuConfig;
                package_interval?: number;
                video_offer_interval?: number;
                video_offer_interval_contract?: number;
                video_offer_interval_piggy_full?: number;
                video_offer_interval_piggy_extra_full?: number;
                video_reset_on_idle?: boolean;
                package_interval_contract?: number;
                package_interval_piggy_full?: number;
                package_interval_piggy_extra_full?: number;
                package_reset_on_idle?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    this.gift_configs = data.gift_configs;
                    if ("gift_mu_min_spent" in data && data.gift_mu_min_spent != undefined) {
                        this.gift_mu_min_spent = data.gift_mu_min_spent;
                    }
                    if ("gift_mu_max_spent" in data && data.gift_mu_max_spent != undefined) {
                        this.gift_mu_max_spent = data.gift_mu_max_spent;
                    }
                    if ("gift_mu_overall_mult" in data && data.gift_mu_overall_mult != undefined) {
                        this.gift_mu_overall_mult = data.gift_mu_overall_mult;
                    }
                    if ("random_gift_mu_config" in data && data.random_gift_mu_config != undefined) {
                        this.random_gift_mu_config = data.random_gift_mu_config;
                    }
                    if ("video_gift_mu_config" in data && data.video_gift_mu_config != undefined) {
                        this.video_gift_mu_config = data.video_gift_mu_config;
                    }
                    if ("package_interval" in data && data.package_interval != undefined) {
                        this.package_interval = data.package_interval;
                    }
                    if ("video_offer_interval" in data && data.video_offer_interval != undefined) {
                        this.video_offer_interval = data.video_offer_interval;
                    }
                    if ("video_offer_interval_contract" in data && data.video_offer_interval_contract != undefined) {
                        this.video_offer_interval_contract = data.video_offer_interval_contract;
                    }
                    if ("video_offer_interval_piggy_full" in data && data.video_offer_interval_piggy_full != undefined) {
                        this.video_offer_interval_piggy_full = data.video_offer_interval_piggy_full;
                    }
                    if ("video_offer_interval_piggy_extra_full" in data && data.video_offer_interval_piggy_extra_full != undefined) {
                        this.video_offer_interval_piggy_extra_full = data.video_offer_interval_piggy_extra_full;
                    }
                    if ("video_reset_on_idle" in data && data.video_reset_on_idle != undefined) {
                        this.video_reset_on_idle = data.video_reset_on_idle;
                    }
                    if ("package_interval_contract" in data && data.package_interval_contract != undefined) {
                        this.package_interval_contract = data.package_interval_contract;
                    }
                    if ("package_interval_piggy_full" in data && data.package_interval_piggy_full != undefined) {
                        this.package_interval_piggy_full = data.package_interval_piggy_full;
                    }
                    if ("package_interval_piggy_extra_full" in data && data.package_interval_piggy_extra_full != undefined) {
                        this.package_interval_piggy_extra_full = data.package_interval_piggy_extra_full;
                    }
                    if ("package_reset_on_idle" in data && data.package_reset_on_idle != undefined) {
                        this.package_reset_on_idle = data.package_reset_on_idle;
                    }
                }
            }
            get gift_configs() {
                return pb_1.Message.getRepeatedWrapperField(this, LiveConfig.GiftConfig.GiftValueConfig, 9) as LiveConfig.GiftConfig.GiftValueConfig[];
            }
            set gift_configs(value: LiveConfig.GiftConfig.GiftValueConfig[]) {
                pb_1.Message.setRepeatedWrapperField(this, 9, value);
            }
            get gift_mu_min_spent() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }
            set gift_mu_min_spent(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get has_gift_mu_min_spent() {
                return pb_1.Message.getField(this, 10) != null;
            }
            get gift_mu_max_spent() {
                return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
            }
            set gift_mu_max_spent(value: number) {
                pb_1.Message.setField(this, 11, value);
            }
            get has_gift_mu_max_spent() {
                return pb_1.Message.getField(this, 11) != null;
            }
            get gift_mu_overall_mult() {
                return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
            }
            set gift_mu_overall_mult(value: number) {
                pb_1.Message.setField(this, 12, value);
            }
            get has_gift_mu_overall_mult() {
                return pb_1.Message.getField(this, 12) != null;
            }
            get random_gift_mu_config() {
                return pb_1.Message.getWrapperField(this, LiveConfig.GiftConfig.GiftMuConfig, 15) as LiveConfig.GiftConfig.GiftMuConfig;
            }
            set random_gift_mu_config(value: LiveConfig.GiftConfig.GiftMuConfig) {
                pb_1.Message.setWrapperField(this, 15, value);
            }
            get has_random_gift_mu_config() {
                return pb_1.Message.getField(this, 15) != null;
            }
            get video_gift_mu_config() {
                return pb_1.Message.getWrapperField(this, LiveConfig.GiftConfig.GiftMuConfig, 16) as LiveConfig.GiftConfig.GiftMuConfig;
            }
            set video_gift_mu_config(value: LiveConfig.GiftConfig.GiftMuConfig) {
                pb_1.Message.setWrapperField(this, 16, value);
            }
            get has_video_gift_mu_config() {
                return pb_1.Message.getField(this, 16) != null;
            }
            get package_interval() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set package_interval(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_package_interval() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get video_offer_interval() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set video_offer_interval(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_video_offer_interval() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get video_offer_interval_contract() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set video_offer_interval_contract(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_video_offer_interval_contract() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get video_offer_interval_piggy_full() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set video_offer_interval_piggy_full(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_video_offer_interval_piggy_full() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get video_offer_interval_piggy_extra_full() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set video_offer_interval_piggy_extra_full(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_video_offer_interval_piggy_extra_full() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get video_reset_on_idle() {
                return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
            }
            set video_reset_on_idle(value: boolean) {
                pb_1.Message.setField(this, 14, value);
            }
            get has_video_reset_on_idle() {
                return pb_1.Message.getField(this, 14) != null;
            }
            get package_interval_contract() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set package_interval_contract(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_package_interval_contract() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get package_interval_piggy_full() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set package_interval_piggy_full(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get has_package_interval_piggy_full() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get package_interval_piggy_extra_full() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set package_interval_piggy_extra_full(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get has_package_interval_piggy_extra_full() {
                return pb_1.Message.getField(this, 8) != null;
            }
            get package_reset_on_idle() {
                return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
            }
            set package_reset_on_idle(value: boolean) {
                pb_1.Message.setField(this, 13, value);
            }
            get has_package_reset_on_idle() {
                return pb_1.Message.getField(this, 13) != null;
            }
            static fromObject(data: {
                gift_configs?: ReturnType<typeof LiveConfig.GiftConfig.GiftValueConfig.prototype.toObject>[];
                gift_mu_min_spent?: number;
                gift_mu_max_spent?: number;
                gift_mu_overall_mult?: number;
                random_gift_mu_config?: ReturnType<typeof LiveConfig.GiftConfig.GiftMuConfig.prototype.toObject>;
                video_gift_mu_config?: ReturnType<typeof LiveConfig.GiftConfig.GiftMuConfig.prototype.toObject>;
                package_interval?: number;
                video_offer_interval?: number;
                video_offer_interval_contract?: number;
                video_offer_interval_piggy_full?: number;
                video_offer_interval_piggy_extra_full?: number;
                video_reset_on_idle?: boolean;
                package_interval_contract?: number;
                package_interval_piggy_full?: number;
                package_interval_piggy_extra_full?: number;
                package_reset_on_idle?: boolean;
            }): GiftConfig {
                const message = new GiftConfig({
                    gift_configs: data.gift_configs.map(item => LiveConfig.GiftConfig.GiftValueConfig.fromObject(item))
                });
                if (data.gift_mu_min_spent != null) {
                    message.gift_mu_min_spent = data.gift_mu_min_spent;
                }
                if (data.gift_mu_max_spent != null) {
                    message.gift_mu_max_spent = data.gift_mu_max_spent;
                }
                if (data.gift_mu_overall_mult != null) {
                    message.gift_mu_overall_mult = data.gift_mu_overall_mult;
                }
                if (data.random_gift_mu_config != null) {
                    message.random_gift_mu_config = LiveConfig.GiftConfig.GiftMuConfig.fromObject(data.random_gift_mu_config);
                }
                if (data.video_gift_mu_config != null) {
                    message.video_gift_mu_config = LiveConfig.GiftConfig.GiftMuConfig.fromObject(data.video_gift_mu_config);
                }
                if (data.package_interval != null) {
                    message.package_interval = data.package_interval;
                }
                if (data.video_offer_interval != null) {
                    message.video_offer_interval = data.video_offer_interval;
                }
                if (data.video_offer_interval_contract != null) {
                    message.video_offer_interval_contract = data.video_offer_interval_contract;
                }
                if (data.video_offer_interval_piggy_full != null) {
                    message.video_offer_interval_piggy_full = data.video_offer_interval_piggy_full;
                }
                if (data.video_offer_interval_piggy_extra_full != null) {
                    message.video_offer_interval_piggy_extra_full = data.video_offer_interval_piggy_extra_full;
                }
                if (data.video_reset_on_idle != null) {
                    message.video_reset_on_idle = data.video_reset_on_idle;
                }
                if (data.package_interval_contract != null) {
                    message.package_interval_contract = data.package_interval_contract;
                }
                if (data.package_interval_piggy_full != null) {
                    message.package_interval_piggy_full = data.package_interval_piggy_full;
                }
                if (data.package_interval_piggy_extra_full != null) {
                    message.package_interval_piggy_extra_full = data.package_interval_piggy_extra_full;
                }
                if (data.package_reset_on_idle != null) {
                    message.package_reset_on_idle = data.package_reset_on_idle;
                }
                return message;
            }
            toObject() {
                const data: {
                    gift_configs?: ReturnType<typeof LiveConfig.GiftConfig.GiftValueConfig.prototype.toObject>[];
                    gift_mu_min_spent?: number;
                    gift_mu_max_spent?: number;
                    gift_mu_overall_mult?: number;
                    random_gift_mu_config?: ReturnType<typeof LiveConfig.GiftConfig.GiftMuConfig.prototype.toObject>;
                    video_gift_mu_config?: ReturnType<typeof LiveConfig.GiftConfig.GiftMuConfig.prototype.toObject>;
                    package_interval?: number;
                    video_offer_interval?: number;
                    video_offer_interval_contract?: number;
                    video_offer_interval_piggy_full?: number;
                    video_offer_interval_piggy_extra_full?: number;
                    video_reset_on_idle?: boolean;
                    package_interval_contract?: number;
                    package_interval_piggy_full?: number;
                    package_interval_piggy_extra_full?: number;
                    package_reset_on_idle?: boolean;
                } = {};
                if (this.gift_configs != null) {
                    data.gift_configs = this.gift_configs.map((item: LiveConfig.GiftConfig.GiftValueConfig) => item.toObject());
                }
                if (this.gift_mu_min_spent != null) {
                    data.gift_mu_min_spent = this.gift_mu_min_spent;
                }
                if (this.gift_mu_max_spent != null) {
                    data.gift_mu_max_spent = this.gift_mu_max_spent;
                }
                if (this.gift_mu_overall_mult != null) {
                    data.gift_mu_overall_mult = this.gift_mu_overall_mult;
                }
                if (this.random_gift_mu_config != null) {
                    data.random_gift_mu_config = this.random_gift_mu_config.toObject();
                }
                if (this.video_gift_mu_config != null) {
                    data.video_gift_mu_config = this.video_gift_mu_config.toObject();
                }
                if (this.package_interval != null) {
                    data.package_interval = this.package_interval;
                }
                if (this.video_offer_interval != null) {
                    data.video_offer_interval = this.video_offer_interval;
                }
                if (this.video_offer_interval_contract != null) {
                    data.video_offer_interval_contract = this.video_offer_interval_contract;
                }
                if (this.video_offer_interval_piggy_full != null) {
                    data.video_offer_interval_piggy_full = this.video_offer_interval_piggy_full;
                }
                if (this.video_offer_interval_piggy_extra_full != null) {
                    data.video_offer_interval_piggy_extra_full = this.video_offer_interval_piggy_extra_full;
                }
                if (this.video_reset_on_idle != null) {
                    data.video_reset_on_idle = this.video_reset_on_idle;
                }
                if (this.package_interval_contract != null) {
                    data.package_interval_contract = this.package_interval_contract;
                }
                if (this.package_interval_piggy_full != null) {
                    data.package_interval_piggy_full = this.package_interval_piggy_full;
                }
                if (this.package_interval_piggy_extra_full != null) {
                    data.package_interval_piggy_extra_full = this.package_interval_piggy_extra_full;
                }
                if (this.package_reset_on_idle != null) {
                    data.package_reset_on_idle = this.package_reset_on_idle;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.gift_configs.length)
                    writer.writeRepeatedMessage(9, this.gift_configs, (item: LiveConfig.GiftConfig.GiftValueConfig) => item.serialize(writer));
                if (this.has_gift_mu_min_spent)
                    writer.writeDouble(10, this.gift_mu_min_spent);
                if (this.has_gift_mu_max_spent)
                    writer.writeDouble(11, this.gift_mu_max_spent);
                if (this.has_gift_mu_overall_mult)
                    writer.writeDouble(12, this.gift_mu_overall_mult);
                if (this.has_random_gift_mu_config)
                    writer.writeMessage(15, this.random_gift_mu_config, () => this.random_gift_mu_config.serialize(writer));
                if (this.has_video_gift_mu_config)
                    writer.writeMessage(16, this.video_gift_mu_config, () => this.video_gift_mu_config.serialize(writer));
                if (this.has_package_interval)
                    writer.writeDouble(1, this.package_interval);
                if (this.has_video_offer_interval)
                    writer.writeDouble(2, this.video_offer_interval);
                if (this.has_video_offer_interval_contract)
                    writer.writeDouble(3, this.video_offer_interval_contract);
                if (this.has_video_offer_interval_piggy_full)
                    writer.writeDouble(4, this.video_offer_interval_piggy_full);
                if (this.has_video_offer_interval_piggy_extra_full)
                    writer.writeDouble(5, this.video_offer_interval_piggy_extra_full);
                if (this.has_video_reset_on_idle)
                    writer.writeBool(14, this.video_reset_on_idle);
                if (this.has_package_interval_contract)
                    writer.writeDouble(6, this.package_interval_contract);
                if (this.has_package_interval_piggy_full)
                    writer.writeDouble(7, this.package_interval_piggy_full);
                if (this.has_package_interval_piggy_extra_full)
                    writer.writeDouble(8, this.package_interval_piggy_extra_full);
                if (this.has_package_reset_on_idle)
                    writer.writeBool(13, this.package_reset_on_idle);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GiftConfig {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GiftConfig();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 9:
                            reader.readMessage(message.gift_configs, () => pb_1.Message.addToRepeatedWrapperField(message, 9, LiveConfig.GiftConfig.GiftValueConfig.deserialize(reader), LiveConfig.GiftConfig.GiftValueConfig));
                            break;
                        case 10:
                            message.gift_mu_min_spent = reader.readDouble();
                            break;
                        case 11:
                            message.gift_mu_max_spent = reader.readDouble();
                            break;
                        case 12:
                            message.gift_mu_overall_mult = reader.readDouble();
                            break;
                        case 15:
                            reader.readMessage(message.random_gift_mu_config, () => message.random_gift_mu_config = LiveConfig.GiftConfig.GiftMuConfig.deserialize(reader));
                            break;
                        case 16:
                            reader.readMessage(message.video_gift_mu_config, () => message.video_gift_mu_config = LiveConfig.GiftConfig.GiftMuConfig.deserialize(reader));
                            break;
                        case 1:
                            message.package_interval = reader.readDouble();
                            break;
                        case 2:
                            message.video_offer_interval = reader.readDouble();
                            break;
                        case 3:
                            message.video_offer_interval_contract = reader.readDouble();
                            break;
                        case 4:
                            message.video_offer_interval_piggy_full = reader.readDouble();
                            break;
                        case 5:
                            message.video_offer_interval_piggy_extra_full = reader.readDouble();
                            break;
                        case 14:
                            message.video_reset_on_idle = reader.readBool();
                            break;
                        case 6:
                            message.package_interval_contract = reader.readDouble();
                            break;
                        case 7:
                            message.package_interval_piggy_full = reader.readDouble();
                            break;
                        case 8:
                            message.package_interval_piggy_extra_full = reader.readDouble();
                            break;
                        case 13:
                            message.package_reset_on_idle = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): GiftConfig {
                return GiftConfig.deserialize(bytes);
            }
        }
        export namespace GiftConfig {
            export class GiftValueConfig extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    gift_id?: string;
                    amount?: number;
                    rand_min?: number;
                    rand_max?: number;
                    video_min?: number;
                    video_max?: number;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("gift_id" in data && data.gift_id != undefined) {
                            this.gift_id = data.gift_id;
                        }
                        if ("amount" in data && data.amount != undefined) {
                            this.amount = data.amount;
                        }
                        if ("rand_min" in data && data.rand_min != undefined) {
                            this.rand_min = data.rand_min;
                        }
                        if ("rand_max" in data && data.rand_max != undefined) {
                            this.rand_max = data.rand_max;
                        }
                        if ("video_min" in data && data.video_min != undefined) {
                            this.video_min = data.video_min;
                        }
                        if ("video_max" in data && data.video_max != undefined) {
                            this.video_max = data.video_max;
                        }
                    }
                }
                get gift_id() {
                    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
                }
                set gift_id(value: string) {
                    pb_1.Message.setField(this, 1, value);
                }
                get has_gift_id() {
                    return pb_1.Message.getField(this, 1) != null;
                }
                get amount() {
                    return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
                }
                set amount(value: number) {
                    pb_1.Message.setField(this, 4, value);
                }
                get has_amount() {
                    return pb_1.Message.getField(this, 4) != null;
                }
                get rand_min() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set rand_min(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                get has_rand_min() {
                    return pb_1.Message.getField(this, 2) != null;
                }
                get rand_max() {
                    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
                }
                set rand_max(value: number) {
                    pb_1.Message.setField(this, 3, value);
                }
                get has_rand_max() {
                    return pb_1.Message.getField(this, 3) != null;
                }
                get video_min() {
                    return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
                }
                set video_min(value: number) {
                    pb_1.Message.setField(this, 5, value);
                }
                get has_video_min() {
                    return pb_1.Message.getField(this, 5) != null;
                }
                get video_max() {
                    return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
                }
                set video_max(value: number) {
                    pb_1.Message.setField(this, 6, value);
                }
                get has_video_max() {
                    return pb_1.Message.getField(this, 6) != null;
                }
                static fromObject(data: {
                    gift_id?: string;
                    amount?: number;
                    rand_min?: number;
                    rand_max?: number;
                    video_min?: number;
                    video_max?: number;
                }): GiftValueConfig {
                    const message = new GiftValueConfig({});
                    if (data.gift_id != null) {
                        message.gift_id = data.gift_id;
                    }
                    if (data.amount != null) {
                        message.amount = data.amount;
                    }
                    if (data.rand_min != null) {
                        message.rand_min = data.rand_min;
                    }
                    if (data.rand_max != null) {
                        message.rand_max = data.rand_max;
                    }
                    if (data.video_min != null) {
                        message.video_min = data.video_min;
                    }
                    if (data.video_max != null) {
                        message.video_max = data.video_max;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        gift_id?: string;
                        amount?: number;
                        rand_min?: number;
                        rand_max?: number;
                        video_min?: number;
                        video_max?: number;
                    } = {};
                    if (this.gift_id != null) {
                        data.gift_id = this.gift_id;
                    }
                    if (this.amount != null) {
                        data.amount = this.amount;
                    }
                    if (this.rand_min != null) {
                        data.rand_min = this.rand_min;
                    }
                    if (this.rand_max != null) {
                        data.rand_max = this.rand_max;
                    }
                    if (this.video_min != null) {
                        data.video_min = this.video_min;
                    }
                    if (this.video_max != null) {
                        data.video_max = this.video_max;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.has_gift_id && this.gift_id.length)
                        writer.writeString(1, this.gift_id);
                    if (this.has_amount)
                        writer.writeDouble(4, this.amount);
                    if (this.has_rand_min)
                        writer.writeDouble(2, this.rand_min);
                    if (this.has_rand_max)
                        writer.writeDouble(3, this.rand_max);
                    if (this.has_video_min)
                        writer.writeDouble(5, this.video_min);
                    if (this.has_video_max)
                        writer.writeDouble(6, this.video_max);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GiftValueConfig {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GiftValueConfig();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.gift_id = reader.readString();
                                break;
                            case 4:
                                message.amount = reader.readDouble();
                                break;
                            case 2:
                                message.rand_min = reader.readDouble();
                                break;
                            case 3:
                                message.rand_max = reader.readDouble();
                                break;
                            case 5:
                                message.video_min = reader.readDouble();
                                break;
                            case 6:
                                message.video_max = reader.readDouble();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): GiftValueConfig {
                    return GiftValueConfig.deserialize(bytes);
                }
            }
            export class GiftMuConfig extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    min_spent?: number;
                    max_spent?: number;
                    overall_mult?: number;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("min_spent" in data && data.min_spent != undefined) {
                            this.min_spent = data.min_spent;
                        }
                        if ("max_spent" in data && data.max_spent != undefined) {
                            this.max_spent = data.max_spent;
                        }
                        if ("overall_mult" in data && data.overall_mult != undefined) {
                            this.overall_mult = data.overall_mult;
                        }
                    }
                }
                get min_spent() {
                    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
                }
                set min_spent(value: number) {
                    pb_1.Message.setField(this, 1, value);
                }
                get has_min_spent() {
                    return pb_1.Message.getField(this, 1) != null;
                }
                get max_spent() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set max_spent(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                get has_max_spent() {
                    return pb_1.Message.getField(this, 2) != null;
                }
                get overall_mult() {
                    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
                }
                set overall_mult(value: number) {
                    pb_1.Message.setField(this, 3, value);
                }
                get has_overall_mult() {
                    return pb_1.Message.getField(this, 3) != null;
                }
                static fromObject(data: {
                    min_spent?: number;
                    max_spent?: number;
                    overall_mult?: number;
                }): GiftMuConfig {
                    const message = new GiftMuConfig({});
                    if (data.min_spent != null) {
                        message.min_spent = data.min_spent;
                    }
                    if (data.max_spent != null) {
                        message.max_spent = data.max_spent;
                    }
                    if (data.overall_mult != null) {
                        message.overall_mult = data.overall_mult;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        min_spent?: number;
                        max_spent?: number;
                        overall_mult?: number;
                    } = {};
                    if (this.min_spent != null) {
                        data.min_spent = this.min_spent;
                    }
                    if (this.max_spent != null) {
                        data.max_spent = this.max_spent;
                    }
                    if (this.overall_mult != null) {
                        data.overall_mult = this.overall_mult;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.has_min_spent)
                        writer.writeDouble(1, this.min_spent);
                    if (this.has_max_spent)
                        writer.writeDouble(2, this.max_spent);
                    if (this.has_overall_mult)
                        writer.writeDouble(3, this.overall_mult);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GiftMuConfig {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GiftMuConfig();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.min_spent = reader.readDouble();
                                break;
                            case 2:
                                message.max_spent = reader.readDouble();
                                break;
                            case 3:
                                message.overall_mult = reader.readDouble();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): GiftMuConfig {
                    return GiftMuConfig.deserialize(bytes);
                }
            }
        }
        export class MiscConfig extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                ask_to_track?: boolean;
                ask_to_track_min_soul_eggs?: number;
                ask_to_track_message?: string;
                ask_to_track_show_pre_dialog?: boolean;
                ask_to_track_after_privacy?: boolean;
                chicken_run_boost_percentage?: number;
                shells_intro_tickets?: number;
                shells_max_free_chicken_configs?: number;
                shells_intro_alert_threshold?: number;
                shells_lighting_controls_price?: number;
                contracts_expert_league_min_soul_power?: number;
                new_player_event_duration?: number;
                contracts_club_available?: boolean;
                contracts_beta?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("ask_to_track" in data && data.ask_to_track != undefined) {
                        this.ask_to_track = data.ask_to_track;
                    }
                    if ("ask_to_track_min_soul_eggs" in data && data.ask_to_track_min_soul_eggs != undefined) {
                        this.ask_to_track_min_soul_eggs = data.ask_to_track_min_soul_eggs;
                    }
                    if ("ask_to_track_message" in data && data.ask_to_track_message != undefined) {
                        this.ask_to_track_message = data.ask_to_track_message;
                    }
                    if ("ask_to_track_show_pre_dialog" in data && data.ask_to_track_show_pre_dialog != undefined) {
                        this.ask_to_track_show_pre_dialog = data.ask_to_track_show_pre_dialog;
                    }
                    if ("ask_to_track_after_privacy" in data && data.ask_to_track_after_privacy != undefined) {
                        this.ask_to_track_after_privacy = data.ask_to_track_after_privacy;
                    }
                    if ("chicken_run_boost_percentage" in data && data.chicken_run_boost_percentage != undefined) {
                        this.chicken_run_boost_percentage = data.chicken_run_boost_percentage;
                    }
                    if ("shells_intro_tickets" in data && data.shells_intro_tickets != undefined) {
                        this.shells_intro_tickets = data.shells_intro_tickets;
                    }
                    if ("shells_max_free_chicken_configs" in data && data.shells_max_free_chicken_configs != undefined) {
                        this.shells_max_free_chicken_configs = data.shells_max_free_chicken_configs;
                    }
                    if ("shells_intro_alert_threshold" in data && data.shells_intro_alert_threshold != undefined) {
                        this.shells_intro_alert_threshold = data.shells_intro_alert_threshold;
                    }
                    if ("shells_lighting_controls_price" in data && data.shells_lighting_controls_price != undefined) {
                        this.shells_lighting_controls_price = data.shells_lighting_controls_price;
                    }
                    if ("contracts_expert_league_min_soul_power" in data && data.contracts_expert_league_min_soul_power != undefined) {
                        this.contracts_expert_league_min_soul_power = data.contracts_expert_league_min_soul_power;
                    }
                    if ("new_player_event_duration" in data && data.new_player_event_duration != undefined) {
                        this.new_player_event_duration = data.new_player_event_duration;
                    }
                    if ("contracts_club_available" in data && data.contracts_club_available != undefined) {
                        this.contracts_club_available = data.contracts_club_available;
                    }
                    if ("contracts_beta" in data && data.contracts_beta != undefined) {
                        this.contracts_beta = data.contracts_beta;
                    }
                }
            }
            get ask_to_track() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }
            set ask_to_track(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_ask_to_track() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get ask_to_track_min_soul_eggs() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set ask_to_track_min_soul_eggs(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_ask_to_track_min_soul_eggs() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get ask_to_track_message() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set ask_to_track_message(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_ask_to_track_message() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get ask_to_track_show_pre_dialog() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set ask_to_track_show_pre_dialog(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_ask_to_track_show_pre_dialog() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get ask_to_track_after_privacy() {
                return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
            }
            set ask_to_track_after_privacy(value: boolean) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_ask_to_track_after_privacy() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get chicken_run_boost_percentage() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set chicken_run_boost_percentage(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_chicken_run_boost_percentage() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get shells_intro_tickets() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set shells_intro_tickets(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get has_shells_intro_tickets() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get shells_max_free_chicken_configs() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set shells_max_free_chicken_configs(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get has_shells_max_free_chicken_configs() {
                return pb_1.Message.getField(this, 8) != null;
            }
            get shells_intro_alert_threshold() {
                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
            }
            set shells_intro_alert_threshold(value: number) {
                pb_1.Message.setField(this, 9, value);
            }
            get has_shells_intro_alert_threshold() {
                return pb_1.Message.getField(this, 9) != null;
            }
            get shells_lighting_controls_price() {
                return pb_1.Message.getFieldWithDefault(this, 14, 175) as number;
            }
            set shells_lighting_controls_price(value: number) {
                pb_1.Message.setField(this, 14, value);
            }
            get has_shells_lighting_controls_price() {
                return pb_1.Message.getField(this, 14) != null;
            }
            get contracts_expert_league_min_soul_power() {
                return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
            }
            set contracts_expert_league_min_soul_power(value: number) {
                pb_1.Message.setField(this, 10, value);
            }
            get has_contracts_expert_league_min_soul_power() {
                return pb_1.Message.getField(this, 10) != null;
            }
            get new_player_event_duration() {
                return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
            }
            set new_player_event_duration(value: number) {
                pb_1.Message.setField(this, 11, value);
            }
            get has_new_player_event_duration() {
                return pb_1.Message.getField(this, 11) != null;
            }
            get contracts_club_available() {
                return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
            }
            set contracts_club_available(value: boolean) {
                pb_1.Message.setField(this, 12, value);
            }
            get has_contracts_club_available() {
                return pb_1.Message.getField(this, 12) != null;
            }
            get contracts_beta() {
                return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
            }
            set contracts_beta(value: boolean) {
                pb_1.Message.setField(this, 13, value);
            }
            get has_contracts_beta() {
                return pb_1.Message.getField(this, 13) != null;
            }
            static fromObject(data: {
                ask_to_track?: boolean;
                ask_to_track_min_soul_eggs?: number;
                ask_to_track_message?: string;
                ask_to_track_show_pre_dialog?: boolean;
                ask_to_track_after_privacy?: boolean;
                chicken_run_boost_percentage?: number;
                shells_intro_tickets?: number;
                shells_max_free_chicken_configs?: number;
                shells_intro_alert_threshold?: number;
                shells_lighting_controls_price?: number;
                contracts_expert_league_min_soul_power?: number;
                new_player_event_duration?: number;
                contracts_club_available?: boolean;
                contracts_beta?: boolean;
            }): MiscConfig {
                const message = new MiscConfig({});
                if (data.ask_to_track != null) {
                    message.ask_to_track = data.ask_to_track;
                }
                if (data.ask_to_track_min_soul_eggs != null) {
                    message.ask_to_track_min_soul_eggs = data.ask_to_track_min_soul_eggs;
                }
                if (data.ask_to_track_message != null) {
                    message.ask_to_track_message = data.ask_to_track_message;
                }
                if (data.ask_to_track_show_pre_dialog != null) {
                    message.ask_to_track_show_pre_dialog = data.ask_to_track_show_pre_dialog;
                }
                if (data.ask_to_track_after_privacy != null) {
                    message.ask_to_track_after_privacy = data.ask_to_track_after_privacy;
                }
                if (data.chicken_run_boost_percentage != null) {
                    message.chicken_run_boost_percentage = data.chicken_run_boost_percentage;
                }
                if (data.shells_intro_tickets != null) {
                    message.shells_intro_tickets = data.shells_intro_tickets;
                }
                if (data.shells_max_free_chicken_configs != null) {
                    message.shells_max_free_chicken_configs = data.shells_max_free_chicken_configs;
                }
                if (data.shells_intro_alert_threshold != null) {
                    message.shells_intro_alert_threshold = data.shells_intro_alert_threshold;
                }
                if (data.shells_lighting_controls_price != null) {
                    message.shells_lighting_controls_price = data.shells_lighting_controls_price;
                }
                if (data.contracts_expert_league_min_soul_power != null) {
                    message.contracts_expert_league_min_soul_power = data.contracts_expert_league_min_soul_power;
                }
                if (data.new_player_event_duration != null) {
                    message.new_player_event_duration = data.new_player_event_duration;
                }
                if (data.contracts_club_available != null) {
                    message.contracts_club_available = data.contracts_club_available;
                }
                if (data.contracts_beta != null) {
                    message.contracts_beta = data.contracts_beta;
                }
                return message;
            }
            toObject() {
                const data: {
                    ask_to_track?: boolean;
                    ask_to_track_min_soul_eggs?: number;
                    ask_to_track_message?: string;
                    ask_to_track_show_pre_dialog?: boolean;
                    ask_to_track_after_privacy?: boolean;
                    chicken_run_boost_percentage?: number;
                    shells_intro_tickets?: number;
                    shells_max_free_chicken_configs?: number;
                    shells_intro_alert_threshold?: number;
                    shells_lighting_controls_price?: number;
                    contracts_expert_league_min_soul_power?: number;
                    new_player_event_duration?: number;
                    contracts_club_available?: boolean;
                    contracts_beta?: boolean;
                } = {};
                if (this.ask_to_track != null) {
                    data.ask_to_track = this.ask_to_track;
                }
                if (this.ask_to_track_min_soul_eggs != null) {
                    data.ask_to_track_min_soul_eggs = this.ask_to_track_min_soul_eggs;
                }
                if (this.ask_to_track_message != null) {
                    data.ask_to_track_message = this.ask_to_track_message;
                }
                if (this.ask_to_track_show_pre_dialog != null) {
                    data.ask_to_track_show_pre_dialog = this.ask_to_track_show_pre_dialog;
                }
                if (this.ask_to_track_after_privacy != null) {
                    data.ask_to_track_after_privacy = this.ask_to_track_after_privacy;
                }
                if (this.chicken_run_boost_percentage != null) {
                    data.chicken_run_boost_percentage = this.chicken_run_boost_percentage;
                }
                if (this.shells_intro_tickets != null) {
                    data.shells_intro_tickets = this.shells_intro_tickets;
                }
                if (this.shells_max_free_chicken_configs != null) {
                    data.shells_max_free_chicken_configs = this.shells_max_free_chicken_configs;
                }
                if (this.shells_intro_alert_threshold != null) {
                    data.shells_intro_alert_threshold = this.shells_intro_alert_threshold;
                }
                if (this.shells_lighting_controls_price != null) {
                    data.shells_lighting_controls_price = this.shells_lighting_controls_price;
                }
                if (this.contracts_expert_league_min_soul_power != null) {
                    data.contracts_expert_league_min_soul_power = this.contracts_expert_league_min_soul_power;
                }
                if (this.new_player_event_duration != null) {
                    data.new_player_event_duration = this.new_player_event_duration;
                }
                if (this.contracts_club_available != null) {
                    data.contracts_club_available = this.contracts_club_available;
                }
                if (this.contracts_beta != null) {
                    data.contracts_beta = this.contracts_beta;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_ask_to_track)
                    writer.writeBool(1, this.ask_to_track);
                if (this.has_ask_to_track_min_soul_eggs)
                    writer.writeDouble(2, this.ask_to_track_min_soul_eggs);
                if (this.has_ask_to_track_message && this.ask_to_track_message.length)
                    writer.writeString(3, this.ask_to_track_message);
                if (this.has_ask_to_track_show_pre_dialog)
                    writer.writeBool(4, this.ask_to_track_show_pre_dialog);
                if (this.has_ask_to_track_after_privacy)
                    writer.writeBool(5, this.ask_to_track_after_privacy);
                if (this.has_chicken_run_boost_percentage)
                    writer.writeDouble(6, this.chicken_run_boost_percentage);
                if (this.has_shells_intro_tickets)
                    writer.writeUint32(7, this.shells_intro_tickets);
                if (this.has_shells_max_free_chicken_configs)
                    writer.writeUint32(8, this.shells_max_free_chicken_configs);
                if (this.has_shells_intro_alert_threshold)
                    writer.writeUint32(9, this.shells_intro_alert_threshold);
                if (this.has_shells_lighting_controls_price)
                    writer.writeUint32(14, this.shells_lighting_controls_price);
                if (this.has_contracts_expert_league_min_soul_power)
                    writer.writeDouble(10, this.contracts_expert_league_min_soul_power);
                if (this.has_new_player_event_duration)
                    writer.writeDouble(11, this.new_player_event_duration);
                if (this.has_contracts_club_available)
                    writer.writeBool(12, this.contracts_club_available);
                if (this.has_contracts_beta)
                    writer.writeBool(13, this.contracts_beta);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MiscConfig {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MiscConfig();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.ask_to_track = reader.readBool();
                            break;
                        case 2:
                            message.ask_to_track_min_soul_eggs = reader.readDouble();
                            break;
                        case 3:
                            message.ask_to_track_message = reader.readString();
                            break;
                        case 4:
                            message.ask_to_track_show_pre_dialog = reader.readBool();
                            break;
                        case 5:
                            message.ask_to_track_after_privacy = reader.readBool();
                            break;
                        case 6:
                            message.chicken_run_boost_percentage = reader.readDouble();
                            break;
                        case 7:
                            message.shells_intro_tickets = reader.readUint32();
                            break;
                        case 8:
                            message.shells_max_free_chicken_configs = reader.readUint32();
                            break;
                        case 9:
                            message.shells_intro_alert_threshold = reader.readUint32();
                            break;
                        case 14:
                            message.shells_lighting_controls_price = reader.readUint32();
                            break;
                        case 10:
                            message.contracts_expert_league_min_soul_power = reader.readDouble();
                            break;
                        case 11:
                            message.new_player_event_duration = reader.readDouble();
                            break;
                        case 12:
                            message.contracts_club_available = reader.readBool();
                            break;
                        case 13:
                            message.contracts_beta = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): MiscConfig {
                return MiscConfig.deserialize(bytes);
            }
        }
        export class HelpConfig extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                video_infos: LiveConfig.HelpConfig.HowToVideoInfo[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    this.video_infos = data.video_infos;
                }
            }
            get video_infos() {
                return pb_1.Message.getRepeatedWrapperField(this, LiveConfig.HelpConfig.HowToVideoInfo, 1) as LiveConfig.HelpConfig.HowToVideoInfo[];
            }
            set video_infos(value: LiveConfig.HelpConfig.HowToVideoInfo[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            static fromObject(data: {
                video_infos?: ReturnType<typeof LiveConfig.HelpConfig.HowToVideoInfo.prototype.toObject>[];
            }): HelpConfig {
                const message = new HelpConfig({
                    video_infos: data.video_infos.map(item => LiveConfig.HelpConfig.HowToVideoInfo.fromObject(item))
                });
                return message;
            }
            toObject() {
                const data: {
                    video_infos?: ReturnType<typeof LiveConfig.HelpConfig.HowToVideoInfo.prototype.toObject>[];
                } = {};
                if (this.video_infos != null) {
                    data.video_infos = this.video_infos.map((item: LiveConfig.HelpConfig.HowToVideoInfo) => item.toObject());
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.video_infos.length)
                    writer.writeRepeatedMessage(1, this.video_infos, (item: LiveConfig.HelpConfig.HowToVideoInfo) => item.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HelpConfig {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HelpConfig();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.video_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 1, LiveConfig.HelpConfig.HowToVideoInfo.deserialize(reader), LiveConfig.HelpConfig.HowToVideoInfo));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): HelpConfig {
                return HelpConfig.deserialize(bytes);
            }
        }
        export namespace HelpConfig {
            export class HowToVideoInfo extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    type?: LiveConfig.HelpConfig.HowToVideoInfo.Type;
                    name?: string;
                    description?: string;
                    duration?: string;
                    url?: string;
                    soul_eggs?: number;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("type" in data && data.type != undefined) {
                            this.type = data.type;
                        }
                        if ("name" in data && data.name != undefined) {
                            this.name = data.name;
                        }
                        if ("description" in data && data.description != undefined) {
                            this.description = data.description;
                        }
                        if ("duration" in data && data.duration != undefined) {
                            this.duration = data.duration;
                        }
                        if ("url" in data && data.url != undefined) {
                            this.url = data.url;
                        }
                        if ("soul_eggs" in data && data.soul_eggs != undefined) {
                            this.soul_eggs = data.soul_eggs;
                        }
                    }
                }
                get type() {
                    return pb_1.Message.getFieldWithDefault(this, 6, LiveConfig.HelpConfig.HowToVideoInfo.Type.VIDEO) as LiveConfig.HelpConfig.HowToVideoInfo.Type;
                }
                set type(value: LiveConfig.HelpConfig.HowToVideoInfo.Type) {
                    pb_1.Message.setField(this, 6, value);
                }
                get has_type() {
                    return pb_1.Message.getField(this, 6) != null;
                }
                get name() {
                    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
                }
                set name(value: string) {
                    pb_1.Message.setField(this, 1, value);
                }
                get has_name() {
                    return pb_1.Message.getField(this, 1) != null;
                }
                get description() {
                    return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
                }
                set description(value: string) {
                    pb_1.Message.setField(this, 2, value);
                }
                get has_description() {
                    return pb_1.Message.getField(this, 2) != null;
                }
                get duration() {
                    return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
                }
                set duration(value: string) {
                    pb_1.Message.setField(this, 5, value);
                }
                get has_duration() {
                    return pb_1.Message.getField(this, 5) != null;
                }
                get url() {
                    return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
                }
                set url(value: string) {
                    pb_1.Message.setField(this, 3, value);
                }
                get has_url() {
                    return pb_1.Message.getField(this, 3) != null;
                }
                get soul_eggs() {
                    return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
                }
                set soul_eggs(value: number) {
                    pb_1.Message.setField(this, 4, value);
                }
                get has_soul_eggs() {
                    return pb_1.Message.getField(this, 4) != null;
                }
                static fromObject(data: {
                    type?: LiveConfig.HelpConfig.HowToVideoInfo.Type;
                    name?: string;
                    description?: string;
                    duration?: string;
                    url?: string;
                    soul_eggs?: number;
                }): HowToVideoInfo {
                    const message = new HowToVideoInfo({});
                    if (data.type != null) {
                        message.type = data.type;
                    }
                    if (data.name != null) {
                        message.name = data.name;
                    }
                    if (data.description != null) {
                        message.description = data.description;
                    }
                    if (data.duration != null) {
                        message.duration = data.duration;
                    }
                    if (data.url != null) {
                        message.url = data.url;
                    }
                    if (data.soul_eggs != null) {
                        message.soul_eggs = data.soul_eggs;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        type?: LiveConfig.HelpConfig.HowToVideoInfo.Type;
                        name?: string;
                        description?: string;
                        duration?: string;
                        url?: string;
                        soul_eggs?: number;
                    } = {};
                    if (this.type != null) {
                        data.type = this.type;
                    }
                    if (this.name != null) {
                        data.name = this.name;
                    }
                    if (this.description != null) {
                        data.description = this.description;
                    }
                    if (this.duration != null) {
                        data.duration = this.duration;
                    }
                    if (this.url != null) {
                        data.url = this.url;
                    }
                    if (this.soul_eggs != null) {
                        data.soul_eggs = this.soul_eggs;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.has_type)
                        writer.writeEnum(6, this.type);
                    if (this.has_name && this.name.length)
                        writer.writeString(1, this.name);
                    if (this.has_description && this.description.length)
                        writer.writeString(2, this.description);
                    if (this.has_duration && this.duration.length)
                        writer.writeString(5, this.duration);
                    if (this.has_url && this.url.length)
                        writer.writeString(3, this.url);
                    if (this.has_soul_eggs)
                        writer.writeDouble(4, this.soul_eggs);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HowToVideoInfo {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HowToVideoInfo();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 6:
                                message.type = reader.readEnum();
                                break;
                            case 1:
                                message.name = reader.readString();
                                break;
                            case 2:
                                message.description = reader.readString();
                                break;
                            case 5:
                                message.duration = reader.readString();
                                break;
                            case 3:
                                message.url = reader.readString();
                                break;
                            case 4:
                                message.soul_eggs = reader.readDouble();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): HowToVideoInfo {
                    return HowToVideoInfo.deserialize(bytes);
                }
            }
            export namespace HowToVideoInfo {
                export enum Type {
                    VIDEO = 0,
                    ARTICLE = 1
                }
            }
        }
    }
    export class InGameMail extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            title?: string;
            date?: string;
            message?: string;
            action?: string;
            url?: string;
            app_link?: UILocation;
            app_link_extra?: string;
            image?: DLCItem;
            image_width?: number;
            image_height?: number;
            platform?: number;
            builds: string[];
            min_client_version?: number;
            max_client_version?: number;
            min_soul_eggs?: number;
            max_soul_eggs?: number;
            min_mystical_bonus?: number;
            user_type?: UserType;
            min_piggy_breaks?: number;
            gold_tip?: number;
            tip?: boolean;
            priority?: number;
            min_days_since_last_tip?: number;
            max_retries?: number;
            days_until_retry?: number;
            category?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("date" in data && data.date != undefined) {
                    this.date = data.date;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("app_link" in data && data.app_link != undefined) {
                    this.app_link = data.app_link;
                }
                if ("app_link_extra" in data && data.app_link_extra != undefined) {
                    this.app_link_extra = data.app_link_extra;
                }
                if ("image" in data && data.image != undefined) {
                    this.image = data.image;
                }
                if ("image_width" in data && data.image_width != undefined) {
                    this.image_width = data.image_width;
                }
                if ("image_height" in data && data.image_height != undefined) {
                    this.image_height = data.image_height;
                }
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
                this.builds = data.builds;
                if ("min_client_version" in data && data.min_client_version != undefined) {
                    this.min_client_version = data.min_client_version;
                }
                if ("max_client_version" in data && data.max_client_version != undefined) {
                    this.max_client_version = data.max_client_version;
                }
                if ("min_soul_eggs" in data && data.min_soul_eggs != undefined) {
                    this.min_soul_eggs = data.min_soul_eggs;
                }
                if ("max_soul_eggs" in data && data.max_soul_eggs != undefined) {
                    this.max_soul_eggs = data.max_soul_eggs;
                }
                if ("min_mystical_bonus" in data && data.min_mystical_bonus != undefined) {
                    this.min_mystical_bonus = data.min_mystical_bonus;
                }
                if ("user_type" in data && data.user_type != undefined) {
                    this.user_type = data.user_type;
                }
                if ("min_piggy_breaks" in data && data.min_piggy_breaks != undefined) {
                    this.min_piggy_breaks = data.min_piggy_breaks;
                }
                if ("gold_tip" in data && data.gold_tip != undefined) {
                    this.gold_tip = data.gold_tip;
                }
                if ("tip" in data && data.tip != undefined) {
                    this.tip = data.tip;
                }
                if ("priority" in data && data.priority != undefined) {
                    this.priority = data.priority;
                }
                if ("min_days_since_last_tip" in data && data.min_days_since_last_tip != undefined) {
                    this.min_days_since_last_tip = data.min_days_since_last_tip;
                }
                if ("max_retries" in data && data.max_retries != undefined) {
                    this.max_retries = data.max_retries;
                }
                if ("days_until_retry" in data && data.days_until_retry != undefined) {
                    this.days_until_retry = data.days_until_retry;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get title() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_title() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get date() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set date(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_date() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get action() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set action(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_action() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_url() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get app_link() {
            return pb_1.Message.getFieldWithDefault(this, 14, UILocation.NONE) as UILocation;
        }
        set app_link(value: UILocation) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_app_link() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get app_link_extra() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set app_link_extra(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_app_link_extra() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get image() {
            return pb_1.Message.getWrapperField(this, DLCItem, 16) as DLCItem;
        }
        set image(value: DLCItem) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_image() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get image_width() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set image_width(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get has_image_width() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get image_height() {
            return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
        }
        set image_height(value: number) {
            pb_1.Message.setField(this, 22, value);
        }
        get has_image_height() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set platform(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_platform() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get builds() {
            return pb_1.Message.getFieldWithDefault(this, 9, []) as string[];
        }
        set builds(value: string[]) {
            pb_1.Message.setField(this, 9, value);
        }
        get min_client_version() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set min_client_version(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_min_client_version() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get max_client_version() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set max_client_version(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_max_client_version() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get min_soul_eggs() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set min_soul_eggs(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_min_soul_eggs() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get max_soul_eggs() {
            return pb_1.Message.getFieldWithDefault(this, 29, 0) as number;
        }
        set max_soul_eggs(value: number) {
            pb_1.Message.setField(this, 29, value);
        }
        get has_max_soul_eggs() {
            return pb_1.Message.getField(this, 29) != null;
        }
        get min_mystical_bonus() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set min_mystical_bonus(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_min_mystical_bonus() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get user_type() {
            return pb_1.Message.getFieldWithDefault(this, 17, UserType.ALL_USERS) as UserType;
        }
        set user_type(value: UserType) {
            pb_1.Message.setField(this, 17, value);
        }
        get has_user_type() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get min_piggy_breaks() {
            return pb_1.Message.getFieldWithDefault(this, 20, 0) as number;
        }
        set min_piggy_breaks(value: number) {
            pb_1.Message.setField(this, 20, value);
        }
        get has_min_piggy_breaks() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get gold_tip() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set gold_tip(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_gold_tip() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get tip() {
            return pb_1.Message.getFieldWithDefault(this, 23, false) as boolean;
        }
        set tip(value: boolean) {
            pb_1.Message.setField(this, 23, value);
        }
        get has_tip() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get priority() {
            return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
        }
        set priority(value: number) {
            pb_1.Message.setField(this, 27, value);
        }
        get has_priority() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get min_days_since_last_tip() {
            return pb_1.Message.getFieldWithDefault(this, 24, 0) as number;
        }
        set min_days_since_last_tip(value: number) {
            pb_1.Message.setField(this, 24, value);
        }
        get has_min_days_since_last_tip() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get max_retries() {
            return pb_1.Message.getFieldWithDefault(this, 25, 0) as number;
        }
        set max_retries(value: number) {
            pb_1.Message.setField(this, 25, value);
        }
        get has_max_retries() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get days_until_retry() {
            return pb_1.Message.getFieldWithDefault(this, 26, 0) as number;
        }
        set days_until_retry(value: number) {
            pb_1.Message.setField(this, 26, value);
        }
        get has_days_until_retry() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 28, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setField(this, 28, value);
        }
        get has_category() {
            return pb_1.Message.getField(this, 28) != null;
        }
        static fromObject(data: {
            id?: string;
            title?: string;
            date?: string;
            message?: string;
            action?: string;
            url?: string;
            app_link?: UILocation;
            app_link_extra?: string;
            image?: ReturnType<typeof DLCItem.prototype.toObject>;
            image_width?: number;
            image_height?: number;
            platform?: number;
            builds: string[];
            min_client_version?: number;
            max_client_version?: number;
            min_soul_eggs?: number;
            max_soul_eggs?: number;
            min_mystical_bonus?: number;
            user_type?: UserType;
            min_piggy_breaks?: number;
            gold_tip?: number;
            tip?: boolean;
            priority?: number;
            min_days_since_last_tip?: number;
            max_retries?: number;
            days_until_retry?: number;
            category?: string;
        }): InGameMail {
            const message = new InGameMail({
                builds: data.builds
            });
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.date != null) {
                message.date = data.date;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.action != null) {
                message.action = data.action;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.app_link != null) {
                message.app_link = data.app_link;
            }
            if (data.app_link_extra != null) {
                message.app_link_extra = data.app_link_extra;
            }
            if (data.image != null) {
                message.image = DLCItem.fromObject(data.image);
            }
            if (data.image_width != null) {
                message.image_width = data.image_width;
            }
            if (data.image_height != null) {
                message.image_height = data.image_height;
            }
            if (data.platform != null) {
                message.platform = data.platform;
            }
            if (data.min_client_version != null) {
                message.min_client_version = data.min_client_version;
            }
            if (data.max_client_version != null) {
                message.max_client_version = data.max_client_version;
            }
            if (data.min_soul_eggs != null) {
                message.min_soul_eggs = data.min_soul_eggs;
            }
            if (data.max_soul_eggs != null) {
                message.max_soul_eggs = data.max_soul_eggs;
            }
            if (data.min_mystical_bonus != null) {
                message.min_mystical_bonus = data.min_mystical_bonus;
            }
            if (data.user_type != null) {
                message.user_type = data.user_type;
            }
            if (data.min_piggy_breaks != null) {
                message.min_piggy_breaks = data.min_piggy_breaks;
            }
            if (data.gold_tip != null) {
                message.gold_tip = data.gold_tip;
            }
            if (data.tip != null) {
                message.tip = data.tip;
            }
            if (data.priority != null) {
                message.priority = data.priority;
            }
            if (data.min_days_since_last_tip != null) {
                message.min_days_since_last_tip = data.min_days_since_last_tip;
            }
            if (data.max_retries != null) {
                message.max_retries = data.max_retries;
            }
            if (data.days_until_retry != null) {
                message.days_until_retry = data.days_until_retry;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
                date?: string;
                message?: string;
                action?: string;
                url?: string;
                app_link?: UILocation;
                app_link_extra?: string;
                image?: ReturnType<typeof DLCItem.prototype.toObject>;
                image_width?: number;
                image_height?: number;
                platform?: number;
                builds: string[];
                min_client_version?: number;
                max_client_version?: number;
                min_soul_eggs?: number;
                max_soul_eggs?: number;
                min_mystical_bonus?: number;
                user_type?: UserType;
                min_piggy_breaks?: number;
                gold_tip?: number;
                tip?: boolean;
                priority?: number;
                min_days_since_last_tip?: number;
                max_retries?: number;
                days_until_retry?: number;
                category?: string;
            } = {
                builds: this.builds
            };
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.date != null) {
                data.date = this.date;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.action != null) {
                data.action = this.action;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.app_link != null) {
                data.app_link = this.app_link;
            }
            if (this.app_link_extra != null) {
                data.app_link_extra = this.app_link_extra;
            }
            if (this.image != null) {
                data.image = this.image.toObject();
            }
            if (this.image_width != null) {
                data.image_width = this.image_width;
            }
            if (this.image_height != null) {
                data.image_height = this.image_height;
            }
            if (this.platform != null) {
                data.platform = this.platform;
            }
            if (this.min_client_version != null) {
                data.min_client_version = this.min_client_version;
            }
            if (this.max_client_version != null) {
                data.max_client_version = this.max_client_version;
            }
            if (this.min_soul_eggs != null) {
                data.min_soul_eggs = this.min_soul_eggs;
            }
            if (this.max_soul_eggs != null) {
                data.max_soul_eggs = this.max_soul_eggs;
            }
            if (this.min_mystical_bonus != null) {
                data.min_mystical_bonus = this.min_mystical_bonus;
            }
            if (this.user_type != null) {
                data.user_type = this.user_type;
            }
            if (this.min_piggy_breaks != null) {
                data.min_piggy_breaks = this.min_piggy_breaks;
            }
            if (this.gold_tip != null) {
                data.gold_tip = this.gold_tip;
            }
            if (this.tip != null) {
                data.tip = this.tip;
            }
            if (this.priority != null) {
                data.priority = this.priority;
            }
            if (this.min_days_since_last_tip != null) {
                data.min_days_since_last_tip = this.min_days_since_last_tip;
            }
            if (this.max_retries != null) {
                data.max_retries = this.max_retries;
            }
            if (this.days_until_retry != null) {
                data.days_until_retry = this.days_until_retry;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_id && this.id.length)
                writer.writeString(1, this.id);
            if (this.has_title && this.title.length)
                writer.writeString(2, this.title);
            if (this.has_date && this.date.length)
                writer.writeString(8, this.date);
            if (this.has_message && this.message.length)
                writer.writeString(3, this.message);
            if (this.has_action && this.action.length)
                writer.writeString(4, this.action);
            if (this.has_url && this.url.length)
                writer.writeString(5, this.url);
            if (this.has_app_link)
                writer.writeEnum(14, this.app_link);
            if (this.has_app_link_extra && this.app_link_extra.length)
                writer.writeString(15, this.app_link_extra);
            if (this.has_image)
                writer.writeMessage(16, this.image, () => this.image.serialize(writer));
            if (this.has_image_width)
                writer.writeDouble(21, this.image_width);
            if (this.has_image_height)
                writer.writeDouble(22, this.image_height);
            if (this.has_platform)
                writer.writeUint32(7, this.platform);
            if (this.builds.length)
                writer.writeRepeatedString(9, this.builds);
            if (this.has_min_client_version)
                writer.writeUint32(10, this.min_client_version);
            if (this.has_max_client_version)
                writer.writeUint32(12, this.max_client_version);
            if (this.has_min_soul_eggs)
                writer.writeDouble(11, this.min_soul_eggs);
            if (this.has_max_soul_eggs)
                writer.writeDouble(29, this.max_soul_eggs);
            if (this.has_min_mystical_bonus)
                writer.writeDouble(13, this.min_mystical_bonus);
            if (this.has_user_type)
                writer.writeEnum(17, this.user_type);
            if (this.has_min_piggy_breaks)
                writer.writeUint32(20, this.min_piggy_breaks);
            if (this.has_gold_tip)
                writer.writeDouble(6, this.gold_tip);
            if (this.has_tip)
                writer.writeBool(23, this.tip);
            if (this.has_priority)
                writer.writeUint32(27, this.priority);
            if (this.has_min_days_since_last_tip)
                writer.writeDouble(24, this.min_days_since_last_tip);
            if (this.has_max_retries)
                writer.writeUint32(25, this.max_retries);
            if (this.has_days_until_retry)
                writer.writeDouble(26, this.days_until_retry);
            if (this.has_category && this.category.length)
                writer.writeString(28, this.category);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InGameMail {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InGameMail();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 8:
                        message.date = reader.readString();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        message.action = reader.readString();
                        break;
                    case 5:
                        message.url = reader.readString();
                        break;
                    case 14:
                        message.app_link = reader.readEnum();
                        break;
                    case 15:
                        message.app_link_extra = reader.readString();
                        break;
                    case 16:
                        reader.readMessage(message.image, () => message.image = DLCItem.deserialize(reader));
                        break;
                    case 21:
                        message.image_width = reader.readDouble();
                        break;
                    case 22:
                        message.image_height = reader.readDouble();
                        break;
                    case 7:
                        message.platform = reader.readUint32();
                        break;
                    case 9:
                        pb_1.Message.addToRepeatedField(message, 9, reader.readString());
                        break;
                    case 10:
                        message.min_client_version = reader.readUint32();
                        break;
                    case 12:
                        message.max_client_version = reader.readUint32();
                        break;
                    case 11:
                        message.min_soul_eggs = reader.readDouble();
                        break;
                    case 29:
                        message.max_soul_eggs = reader.readDouble();
                        break;
                    case 13:
                        message.min_mystical_bonus = reader.readDouble();
                        break;
                    case 17:
                        message.user_type = reader.readEnum();
                        break;
                    case 20:
                        message.min_piggy_breaks = reader.readUint32();
                        break;
                    case 6:
                        message.gold_tip = reader.readDouble();
                        break;
                    case 23:
                        message.tip = reader.readBool();
                        break;
                    case 27:
                        message.priority = reader.readUint32();
                        break;
                    case 24:
                        message.min_days_since_last_tip = reader.readDouble();
                        break;
                    case 25:
                        message.max_retries = reader.readUint32();
                        break;
                    case 26:
                        message.days_until_retry = reader.readDouble();
                        break;
                    case 28:
                        message.category = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InGameMail {
            return InGameMail.deserialize(bytes);
        }
    }
    export class MailDB extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            mail: InGameMail[];
            tips_db_data?: Uint8Array;
            tips_checksum?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.mail = data.mail;
                if ("tips_db_data" in data && data.tips_db_data != undefined) {
                    this.tips_db_data = data.tips_db_data;
                }
                if ("tips_checksum" in data && data.tips_checksum != undefined) {
                    this.tips_checksum = data.tips_checksum;
                }
            }
        }
        get mail() {
            return pb_1.Message.getRepeatedWrapperField(this, InGameMail, 1) as InGameMail[];
        }
        set mail(value: InGameMail[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get tips_db_data() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set tips_db_data(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_tips_db_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get tips_checksum() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set tips_checksum(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_tips_checksum() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            mail?: ReturnType<typeof InGameMail.prototype.toObject>[];
            tips_db_data?: Uint8Array;
            tips_checksum?: string;
        }): MailDB {
            const message = new MailDB({
                mail: data.mail.map(item => InGameMail.fromObject(item))
            });
            if (data.tips_db_data != null) {
                message.tips_db_data = data.tips_db_data;
            }
            if (data.tips_checksum != null) {
                message.tips_checksum = data.tips_checksum;
            }
            return message;
        }
        toObject() {
            const data: {
                mail?: ReturnType<typeof InGameMail.prototype.toObject>[];
                tips_db_data?: Uint8Array;
                tips_checksum?: string;
            } = {};
            if (this.mail != null) {
                data.mail = this.mail.map((item: InGameMail) => item.toObject());
            }
            if (this.tips_db_data != null) {
                data.tips_db_data = this.tips_db_data;
            }
            if (this.tips_checksum != null) {
                data.tips_checksum = this.tips_checksum;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.mail.length)
                writer.writeRepeatedMessage(1, this.mail, (item: InGameMail) => item.serialize(writer));
            if (this.has_tips_db_data && this.tips_db_data.length)
                writer.writeBytes(2, this.tips_db_data);
            if (this.has_tips_checksum && this.tips_checksum.length)
                writer.writeString(3, this.tips_checksum);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailDB {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MailDB();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.mail, () => pb_1.Message.addToRepeatedWrapperField(message, 1, InGameMail.deserialize(reader), InGameMail));
                        break;
                    case 2:
                        message.tips_db_data = reader.readBytes();
                        break;
                    case 3:
                        message.tips_checksum = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MailDB {
            return MailDB.deserialize(bytes);
        }
    }
    export class TipsDB extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tips: InGameMail[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.tips = data.tips;
            }
        }
        get tips() {
            return pb_1.Message.getRepeatedWrapperField(this, InGameMail, 1) as InGameMail[];
        }
        set tips(value: InGameMail[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            tips?: ReturnType<typeof InGameMail.prototype.toObject>[];
        }): TipsDB {
            const message = new TipsDB({
                tips: data.tips.map(item => InGameMail.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                tips?: ReturnType<typeof InGameMail.prototype.toObject>[];
            } = {};
            if (this.tips != null) {
                data.tips = this.tips.map((item: InGameMail) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tips.length)
                writer.writeRepeatedMessage(1, this.tips, (item: InGameMail) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TipsDB {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TipsDB();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.tips, () => pb_1.Message.addToRepeatedWrapperField(message, 1, InGameMail.deserialize(reader), InGameMail));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TipsDB {
            return TipsDB.deserialize(bytes);
        }
    }
    export class MailState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            read_mail_ids: string[];
            tips_states: MailState.TipState[];
            tips_checksum?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.read_mail_ids = data.read_mail_ids;
                this.tips_states = data.tips_states;
                if ("tips_checksum" in data && data.tips_checksum != undefined) {
                    this.tips_checksum = data.tips_checksum;
                }
            }
        }
        get read_mail_ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set read_mail_ids(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get tips_states() {
            return pb_1.Message.getRepeatedWrapperField(this, MailState.TipState, 2) as MailState.TipState[];
        }
        set tips_states(value: MailState.TipState[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get tips_checksum() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set tips_checksum(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_tips_checksum() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            read_mail_ids: string[];
            tips_states?: ReturnType<typeof MailState.TipState.prototype.toObject>[];
            tips_checksum?: string;
        }): MailState {
            const message = new MailState({
                read_mail_ids: data.read_mail_ids,
                tips_states: data.tips_states.map(item => MailState.TipState.fromObject(item))
            });
            if (data.tips_checksum != null) {
                message.tips_checksum = data.tips_checksum;
            }
            return message;
        }
        toObject() {
            const data: {
                read_mail_ids: string[];
                tips_states?: ReturnType<typeof MailState.TipState.prototype.toObject>[];
                tips_checksum?: string;
            } = {
                read_mail_ids: this.read_mail_ids
            };
            if (this.tips_states != null) {
                data.tips_states = this.tips_states.map((item: MailState.TipState) => item.toObject());
            }
            if (this.tips_checksum != null) {
                data.tips_checksum = this.tips_checksum;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.read_mail_ids.length)
                writer.writeRepeatedString(1, this.read_mail_ids);
            if (this.tips_states.length)
                writer.writeRepeatedMessage(2, this.tips_states, (item: MailState.TipState) => item.serialize(writer));
            if (this.has_tips_checksum && this.tips_checksum.length)
                writer.writeString(3, this.tips_checksum);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MailState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        reader.readMessage(message.tips_states, () => pb_1.Message.addToRepeatedWrapperField(message, 2, MailState.TipState.deserialize(reader), MailState.TipState));
                        break;
                    case 3:
                        message.tips_checksum = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MailState {
            return MailState.deserialize(bytes);
        }
    }
    export namespace MailState {
        export class TipState extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
                reads?: number;
                time_read?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("reads" in data && data.reads != undefined) {
                        this.reads = data.reads;
                    }
                    if ("time_read" in data && data.time_read != undefined) {
                        this.time_read = data.time_read;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_id() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get reads() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set reads(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_reads() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get time_read() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set time_read(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_time_read() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                id?: string;
                reads?: number;
                time_read?: number;
            }): TipState {
                const message = new TipState({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.reads != null) {
                    message.reads = data.reads;
                }
                if (data.time_read != null) {
                    message.time_read = data.time_read;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    reads?: number;
                    time_read?: number;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.reads != null) {
                    data.reads = this.reads;
                }
                if (this.time_read != null) {
                    data.time_read = this.time_read;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_id && this.id.length)
                    writer.writeString(1, this.id);
                if (this.has_reads)
                    writer.writeUint32(2, this.reads);
                if (this.has_time_read)
                    writer.writeDouble(3, this.time_read);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TipState {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TipState();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.reads = reader.readUint32();
                            break;
                        case 3:
                            message.time_read = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): TipState {
                return TipState.deserialize(bytes);
            }
        }
    }
    export class PeriodicalsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sales?: SalesInfo;
            events?: EggIncCurrentEvents;
            contracts?: ContractsResponse;
            evaluations: ContractEvaluation[];
            gifts: ServerGift[];
            artifact_cases: CompleteMissionResponse[];
            live_config?: LiveConfig;
            mail_bag?: MailDB;
            contract_player_info?: ContractPlayerInfo;
            showcase_royalties: PeriodicalsResponse.RoyaltyInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8, 4, 9, 10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sales" in data && data.sales != undefined) {
                    this.sales = data.sales;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
                if ("contracts" in data && data.contracts != undefined) {
                    this.contracts = data.contracts;
                }
                this.evaluations = data.evaluations;
                this.gifts = data.gifts;
                this.artifact_cases = data.artifact_cases;
                if ("live_config" in data && data.live_config != undefined) {
                    this.live_config = data.live_config;
                }
                if ("mail_bag" in data && data.mail_bag != undefined) {
                    this.mail_bag = data.mail_bag;
                }
                if ("contract_player_info" in data && data.contract_player_info != undefined) {
                    this.contract_player_info = data.contract_player_info;
                }
                this.showcase_royalties = data.showcase_royalties;
            }
        }
        get sales() {
            return pb_1.Message.getWrapperField(this, SalesInfo, 1) as SalesInfo;
        }
        set sales(value: SalesInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_sales() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get events() {
            return pb_1.Message.getWrapperField(this, EggIncCurrentEvents, 2) as EggIncCurrentEvents;
        }
        set events(value: EggIncCurrentEvents) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_events() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get contracts() {
            return pb_1.Message.getWrapperField(this, ContractsResponse, 3) as ContractsResponse;
        }
        set contracts(value: ContractsResponse) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_contracts() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get evaluations() {
            return pb_1.Message.getRepeatedWrapperField(this, ContractEvaluation, 8) as ContractEvaluation[];
        }
        set evaluations(value: ContractEvaluation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get gifts() {
            return pb_1.Message.getRepeatedWrapperField(this, ServerGift, 4) as ServerGift[];
        }
        set gifts(value: ServerGift[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get artifact_cases() {
            return pb_1.Message.getRepeatedWrapperField(this, CompleteMissionResponse, 9) as CompleteMissionResponse[];
        }
        set artifact_cases(value: CompleteMissionResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get live_config() {
            return pb_1.Message.getWrapperField(this, LiveConfig, 5) as LiveConfig;
        }
        set live_config(value: LiveConfig) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_live_config() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get mail_bag() {
            return pb_1.Message.getWrapperField(this, MailDB, 6) as MailDB;
        }
        set mail_bag(value: MailDB) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_mail_bag() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get contract_player_info() {
            return pb_1.Message.getWrapperField(this, ContractPlayerInfo, 7) as ContractPlayerInfo;
        }
        set contract_player_info(value: ContractPlayerInfo) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_contract_player_info() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get showcase_royalties() {
            return pb_1.Message.getRepeatedWrapperField(this, PeriodicalsResponse.RoyaltyInfo, 10) as PeriodicalsResponse.RoyaltyInfo[];
        }
        set showcase_royalties(value: PeriodicalsResponse.RoyaltyInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        static fromObject(data: {
            sales?: ReturnType<typeof SalesInfo.prototype.toObject>;
            events?: ReturnType<typeof EggIncCurrentEvents.prototype.toObject>;
            contracts?: ReturnType<typeof ContractsResponse.prototype.toObject>;
            evaluations?: ReturnType<typeof ContractEvaluation.prototype.toObject>[];
            gifts?: ReturnType<typeof ServerGift.prototype.toObject>[];
            artifact_cases?: ReturnType<typeof CompleteMissionResponse.prototype.toObject>[];
            live_config?: ReturnType<typeof LiveConfig.prototype.toObject>;
            mail_bag?: ReturnType<typeof MailDB.prototype.toObject>;
            contract_player_info?: ReturnType<typeof ContractPlayerInfo.prototype.toObject>;
            showcase_royalties?: ReturnType<typeof PeriodicalsResponse.RoyaltyInfo.prototype.toObject>[];
        }): PeriodicalsResponse {
            const message = new PeriodicalsResponse({
                evaluations: data.evaluations.map(item => ContractEvaluation.fromObject(item)),
                gifts: data.gifts.map(item => ServerGift.fromObject(item)),
                artifact_cases: data.artifact_cases.map(item => CompleteMissionResponse.fromObject(item)),
                showcase_royalties: data.showcase_royalties.map(item => PeriodicalsResponse.RoyaltyInfo.fromObject(item))
            });
            if (data.sales != null) {
                message.sales = SalesInfo.fromObject(data.sales);
            }
            if (data.events != null) {
                message.events = EggIncCurrentEvents.fromObject(data.events);
            }
            if (data.contracts != null) {
                message.contracts = ContractsResponse.fromObject(data.contracts);
            }
            if (data.live_config != null) {
                message.live_config = LiveConfig.fromObject(data.live_config);
            }
            if (data.mail_bag != null) {
                message.mail_bag = MailDB.fromObject(data.mail_bag);
            }
            if (data.contract_player_info != null) {
                message.contract_player_info = ContractPlayerInfo.fromObject(data.contract_player_info);
            }
            return message;
        }
        toObject() {
            const data: {
                sales?: ReturnType<typeof SalesInfo.prototype.toObject>;
                events?: ReturnType<typeof EggIncCurrentEvents.prototype.toObject>;
                contracts?: ReturnType<typeof ContractsResponse.prototype.toObject>;
                evaluations?: ReturnType<typeof ContractEvaluation.prototype.toObject>[];
                gifts?: ReturnType<typeof ServerGift.prototype.toObject>[];
                artifact_cases?: ReturnType<typeof CompleteMissionResponse.prototype.toObject>[];
                live_config?: ReturnType<typeof LiveConfig.prototype.toObject>;
                mail_bag?: ReturnType<typeof MailDB.prototype.toObject>;
                contract_player_info?: ReturnType<typeof ContractPlayerInfo.prototype.toObject>;
                showcase_royalties?: ReturnType<typeof PeriodicalsResponse.RoyaltyInfo.prototype.toObject>[];
            } = {};
            if (this.sales != null) {
                data.sales = this.sales.toObject();
            }
            if (this.events != null) {
                data.events = this.events.toObject();
            }
            if (this.contracts != null) {
                data.contracts = this.contracts.toObject();
            }
            if (this.evaluations != null) {
                data.evaluations = this.evaluations.map((item: ContractEvaluation) => item.toObject());
            }
            if (this.gifts != null) {
                data.gifts = this.gifts.map((item: ServerGift) => item.toObject());
            }
            if (this.artifact_cases != null) {
                data.artifact_cases = this.artifact_cases.map((item: CompleteMissionResponse) => item.toObject());
            }
            if (this.live_config != null) {
                data.live_config = this.live_config.toObject();
            }
            if (this.mail_bag != null) {
                data.mail_bag = this.mail_bag.toObject();
            }
            if (this.contract_player_info != null) {
                data.contract_player_info = this.contract_player_info.toObject();
            }
            if (this.showcase_royalties != null) {
                data.showcase_royalties = this.showcase_royalties.map((item: PeriodicalsResponse.RoyaltyInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_sales)
                writer.writeMessage(1, this.sales, () => this.sales.serialize(writer));
            if (this.has_events)
                writer.writeMessage(2, this.events, () => this.events.serialize(writer));
            if (this.has_contracts)
                writer.writeMessage(3, this.contracts, () => this.contracts.serialize(writer));
            if (this.evaluations.length)
                writer.writeRepeatedMessage(8, this.evaluations, (item: ContractEvaluation) => item.serialize(writer));
            if (this.gifts.length)
                writer.writeRepeatedMessage(4, this.gifts, (item: ServerGift) => item.serialize(writer));
            if (this.artifact_cases.length)
                writer.writeRepeatedMessage(9, this.artifact_cases, (item: CompleteMissionResponse) => item.serialize(writer));
            if (this.has_live_config)
                writer.writeMessage(5, this.live_config, () => this.live_config.serialize(writer));
            if (this.has_mail_bag)
                writer.writeMessage(6, this.mail_bag, () => this.mail_bag.serialize(writer));
            if (this.has_contract_player_info)
                writer.writeMessage(7, this.contract_player_info, () => this.contract_player_info.serialize(writer));
            if (this.showcase_royalties.length)
                writer.writeRepeatedMessage(10, this.showcase_royalties, (item: PeriodicalsResponse.RoyaltyInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PeriodicalsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PeriodicalsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.sales, () => message.sales = SalesInfo.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.events, () => message.events = EggIncCurrentEvents.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.contracts, () => message.contracts = ContractsResponse.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.evaluations, () => pb_1.Message.addToRepeatedWrapperField(message, 8, ContractEvaluation.deserialize(reader), ContractEvaluation));
                        break;
                    case 4:
                        reader.readMessage(message.gifts, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ServerGift.deserialize(reader), ServerGift));
                        break;
                    case 9:
                        reader.readMessage(message.artifact_cases, () => pb_1.Message.addToRepeatedWrapperField(message, 9, CompleteMissionResponse.deserialize(reader), CompleteMissionResponse));
                        break;
                    case 5:
                        reader.readMessage(message.live_config, () => message.live_config = LiveConfig.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.mail_bag, () => message.mail_bag = MailDB.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.contract_player_info, () => message.contract_player_info = ContractPlayerInfo.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.showcase_royalties, () => pb_1.Message.addToRepeatedWrapperField(message, 10, PeriodicalsResponse.RoyaltyInfo.deserialize(reader), PeriodicalsResponse.RoyaltyInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): PeriodicalsResponse {
            return PeriodicalsResponse.deserialize(bytes);
        }
    }
    export namespace PeriodicalsResponse {
        export class RoyaltyInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
                amount?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_id() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_amount() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                id?: string;
                amount?: number;
            }): RoyaltyInfo {
                const message = new RoyaltyInfo({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    amount?: number;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_id && this.id.length)
                    writer.writeString(1, this.id);
                if (this.has_amount)
                    writer.writeUint32(2, this.amount);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoyaltyInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoyaltyInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.amount = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): RoyaltyInfo {
                return RoyaltyInfo.deserialize(bytes);
            }
        }
    }
    export class GetPeriodicalsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            user_id?: string;
            piggy_full?: boolean;
            piggy_found_full?: boolean;
            seconds_full_realtime?: number;
            seconds_full_gametime?: number;
            lost_increments?: number;
            soul_eggs?: number;
            mystical_earnings_mult?: number;
            eop?: number;
            contracts_unlocked?: boolean;
            artifacts_unlocked?: boolean;
            current_client_version?: number;
            debug?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("piggy_full" in data && data.piggy_full != undefined) {
                    this.piggy_full = data.piggy_full;
                }
                if ("piggy_found_full" in data && data.piggy_found_full != undefined) {
                    this.piggy_found_full = data.piggy_found_full;
                }
                if ("seconds_full_realtime" in data && data.seconds_full_realtime != undefined) {
                    this.seconds_full_realtime = data.seconds_full_realtime;
                }
                if ("seconds_full_gametime" in data && data.seconds_full_gametime != undefined) {
                    this.seconds_full_gametime = data.seconds_full_gametime;
                }
                if ("lost_increments" in data && data.lost_increments != undefined) {
                    this.lost_increments = data.lost_increments;
                }
                if ("soul_eggs" in data && data.soul_eggs != undefined) {
                    this.soul_eggs = data.soul_eggs;
                }
                if ("mystical_earnings_mult" in data && data.mystical_earnings_mult != undefined) {
                    this.mystical_earnings_mult = data.mystical_earnings_mult;
                }
                if ("eop" in data && data.eop != undefined) {
                    this.eop = data.eop;
                }
                if ("contracts_unlocked" in data && data.contracts_unlocked != undefined) {
                    this.contracts_unlocked = data.contracts_unlocked;
                }
                if ("artifacts_unlocked" in data && data.artifacts_unlocked != undefined) {
                    this.artifacts_unlocked = data.artifacts_unlocked;
                }
                if ("current_client_version" in data && data.current_client_version != undefined) {
                    this.current_client_version = data.current_client_version;
                }
                if ("debug" in data && data.debug != undefined) {
                    this.debug = data.debug;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 12) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get piggy_full() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set piggy_full(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_piggy_full() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get piggy_found_full() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set piggy_found_full(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_piggy_found_full() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get seconds_full_realtime() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set seconds_full_realtime(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_seconds_full_realtime() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get seconds_full_gametime() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set seconds_full_gametime(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_seconds_full_gametime() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get lost_increments() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set lost_increments(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_lost_increments() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get soul_eggs() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set soul_eggs(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_soul_eggs() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get mystical_earnings_mult() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set mystical_earnings_mult(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_mystical_earnings_mult() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get eop() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set eop(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_eop() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get contracts_unlocked() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set contracts_unlocked(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_contracts_unlocked() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get artifacts_unlocked() {
            return pb_1.Message.getFieldWithDefault(this, 16, false) as boolean;
        }
        set artifacts_unlocked(value: boolean) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_artifacts_unlocked() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get current_client_version() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set current_client_version(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_current_client_version() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get debug() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set debug(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_debug() {
            return pb_1.Message.getField(this, 11) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            user_id?: string;
            piggy_full?: boolean;
            piggy_found_full?: boolean;
            seconds_full_realtime?: number;
            seconds_full_gametime?: number;
            lost_increments?: number;
            soul_eggs?: number;
            mystical_earnings_mult?: number;
            eop?: number;
            contracts_unlocked?: boolean;
            artifacts_unlocked?: boolean;
            current_client_version?: number;
            debug?: boolean;
        }): GetPeriodicalsRequest {
            const message = new GetPeriodicalsRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.piggy_full != null) {
                message.piggy_full = data.piggy_full;
            }
            if (data.piggy_found_full != null) {
                message.piggy_found_full = data.piggy_found_full;
            }
            if (data.seconds_full_realtime != null) {
                message.seconds_full_realtime = data.seconds_full_realtime;
            }
            if (data.seconds_full_gametime != null) {
                message.seconds_full_gametime = data.seconds_full_gametime;
            }
            if (data.lost_increments != null) {
                message.lost_increments = data.lost_increments;
            }
            if (data.soul_eggs != null) {
                message.soul_eggs = data.soul_eggs;
            }
            if (data.mystical_earnings_mult != null) {
                message.mystical_earnings_mult = data.mystical_earnings_mult;
            }
            if (data.eop != null) {
                message.eop = data.eop;
            }
            if (data.contracts_unlocked != null) {
                message.contracts_unlocked = data.contracts_unlocked;
            }
            if (data.artifacts_unlocked != null) {
                message.artifacts_unlocked = data.artifacts_unlocked;
            }
            if (data.current_client_version != null) {
                message.current_client_version = data.current_client_version;
            }
            if (data.debug != null) {
                message.debug = data.debug;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                user_id?: string;
                piggy_full?: boolean;
                piggy_found_full?: boolean;
                seconds_full_realtime?: number;
                seconds_full_gametime?: number;
                lost_increments?: number;
                soul_eggs?: number;
                mystical_earnings_mult?: number;
                eop?: number;
                contracts_unlocked?: boolean;
                artifacts_unlocked?: boolean;
                current_client_version?: number;
                debug?: boolean;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.piggy_full != null) {
                data.piggy_full = this.piggy_full;
            }
            if (this.piggy_found_full != null) {
                data.piggy_found_full = this.piggy_found_full;
            }
            if (this.seconds_full_realtime != null) {
                data.seconds_full_realtime = this.seconds_full_realtime;
            }
            if (this.seconds_full_gametime != null) {
                data.seconds_full_gametime = this.seconds_full_gametime;
            }
            if (this.lost_increments != null) {
                data.lost_increments = this.lost_increments;
            }
            if (this.soul_eggs != null) {
                data.soul_eggs = this.soul_eggs;
            }
            if (this.mystical_earnings_mult != null) {
                data.mystical_earnings_mult = this.mystical_earnings_mult;
            }
            if (this.eop != null) {
                data.eop = this.eop;
            }
            if (this.contracts_unlocked != null) {
                data.contracts_unlocked = this.contracts_unlocked;
            }
            if (this.artifacts_unlocked != null) {
                data.artifacts_unlocked = this.artifacts_unlocked;
            }
            if (this.current_client_version != null) {
                data.current_client_version = this.current_client_version;
            }
            if (this.debug != null) {
                data.debug = this.debug;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(12, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_user_id && this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_piggy_full)
                writer.writeBool(2, this.piggy_full);
            if (this.has_piggy_found_full)
                writer.writeBool(3, this.piggy_found_full);
            if (this.has_seconds_full_realtime)
                writer.writeDouble(4, this.seconds_full_realtime);
            if (this.has_seconds_full_gametime)
                writer.writeDouble(5, this.seconds_full_gametime);
            if (this.has_lost_increments)
                writer.writeUint32(7, this.lost_increments);
            if (this.has_soul_eggs)
                writer.writeDouble(8, this.soul_eggs);
            if (this.has_mystical_earnings_mult)
                writer.writeDouble(13, this.mystical_earnings_mult);
            if (this.has_eop)
                writer.writeUint32(14, this.eop);
            if (this.has_contracts_unlocked)
                writer.writeBool(15, this.contracts_unlocked);
            if (this.has_artifacts_unlocked)
                writer.writeBool(16, this.artifacts_unlocked);
            if (this.has_current_client_version)
                writer.writeUint32(10, this.current_client_version);
            if (this.has_debug)
                writer.writeBool(11, this.debug);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPeriodicalsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPeriodicalsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 12:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.piggy_full = reader.readBool();
                        break;
                    case 3:
                        message.piggy_found_full = reader.readBool();
                        break;
                    case 4:
                        message.seconds_full_realtime = reader.readDouble();
                        break;
                    case 5:
                        message.seconds_full_gametime = reader.readDouble();
                        break;
                    case 7:
                        message.lost_increments = reader.readUint32();
                        break;
                    case 8:
                        message.soul_eggs = reader.readDouble();
                        break;
                    case 13:
                        message.mystical_earnings_mult = reader.readDouble();
                        break;
                    case 14:
                        message.eop = reader.readUint32();
                        break;
                    case 15:
                        message.contracts_unlocked = reader.readBool();
                        break;
                    case 16:
                        message.artifacts_unlocked = reader.readBool();
                        break;
                    case 10:
                        message.current_client_version = reader.readUint32();
                        break;
                    case 11:
                        message.debug = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetPeriodicalsRequest {
            return GetPeriodicalsRequest.deserialize(bytes);
        }
    }
    export class ConfigRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            soul_eggs?: number;
            contracts_unlocked?: boolean;
            artifacts_unlocked?: boolean;
            fuel_tank_unlocked?: boolean;
            pro_permit?: boolean;
            ultra?: boolean;
            tips_checksum?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("soul_eggs" in data && data.soul_eggs != undefined) {
                    this.soul_eggs = data.soul_eggs;
                }
                if ("contracts_unlocked" in data && data.contracts_unlocked != undefined) {
                    this.contracts_unlocked = data.contracts_unlocked;
                }
                if ("artifacts_unlocked" in data && data.artifacts_unlocked != undefined) {
                    this.artifacts_unlocked = data.artifacts_unlocked;
                }
                if ("fuel_tank_unlocked" in data && data.fuel_tank_unlocked != undefined) {
                    this.fuel_tank_unlocked = data.fuel_tank_unlocked;
                }
                if ("pro_permit" in data && data.pro_permit != undefined) {
                    this.pro_permit = data.pro_permit;
                }
                if ("ultra" in data && data.ultra != undefined) {
                    this.ultra = data.ultra;
                }
                if ("tips_checksum" in data && data.tips_checksum != undefined) {
                    this.tips_checksum = data.tips_checksum;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 1) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get soul_eggs() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set soul_eggs(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_soul_eggs() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get contracts_unlocked() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set contracts_unlocked(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_contracts_unlocked() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get artifacts_unlocked() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set artifacts_unlocked(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_artifacts_unlocked() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get fuel_tank_unlocked() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set fuel_tank_unlocked(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_fuel_tank_unlocked() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get pro_permit() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set pro_permit(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_pro_permit() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get ultra() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set ultra(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_ultra() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get tips_checksum() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set tips_checksum(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_tips_checksum() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            soul_eggs?: number;
            contracts_unlocked?: boolean;
            artifacts_unlocked?: boolean;
            fuel_tank_unlocked?: boolean;
            pro_permit?: boolean;
            ultra?: boolean;
            tips_checksum?: string;
        }): ConfigRequest {
            const message = new ConfigRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.soul_eggs != null) {
                message.soul_eggs = data.soul_eggs;
            }
            if (data.contracts_unlocked != null) {
                message.contracts_unlocked = data.contracts_unlocked;
            }
            if (data.artifacts_unlocked != null) {
                message.artifacts_unlocked = data.artifacts_unlocked;
            }
            if (data.fuel_tank_unlocked != null) {
                message.fuel_tank_unlocked = data.fuel_tank_unlocked;
            }
            if (data.pro_permit != null) {
                message.pro_permit = data.pro_permit;
            }
            if (data.ultra != null) {
                message.ultra = data.ultra;
            }
            if (data.tips_checksum != null) {
                message.tips_checksum = data.tips_checksum;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                soul_eggs?: number;
                contracts_unlocked?: boolean;
                artifacts_unlocked?: boolean;
                fuel_tank_unlocked?: boolean;
                pro_permit?: boolean;
                ultra?: boolean;
                tips_checksum?: string;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.soul_eggs != null) {
                data.soul_eggs = this.soul_eggs;
            }
            if (this.contracts_unlocked != null) {
                data.contracts_unlocked = this.contracts_unlocked;
            }
            if (this.artifacts_unlocked != null) {
                data.artifacts_unlocked = this.artifacts_unlocked;
            }
            if (this.fuel_tank_unlocked != null) {
                data.fuel_tank_unlocked = this.fuel_tank_unlocked;
            }
            if (this.pro_permit != null) {
                data.pro_permit = this.pro_permit;
            }
            if (this.ultra != null) {
                data.ultra = this.ultra;
            }
            if (this.tips_checksum != null) {
                data.tips_checksum = this.tips_checksum;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(1, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_soul_eggs)
                writer.writeDouble(2, this.soul_eggs);
            if (this.has_contracts_unlocked)
                writer.writeBool(5, this.contracts_unlocked);
            if (this.has_artifacts_unlocked)
                writer.writeBool(3, this.artifacts_unlocked);
            if (this.has_fuel_tank_unlocked)
                writer.writeBool(4, this.fuel_tank_unlocked);
            if (this.has_pro_permit)
                writer.writeBool(6, this.pro_permit);
            if (this.has_ultra)
                writer.writeBool(7, this.ultra);
            if (this.has_tips_checksum && this.tips_checksum.length)
                writer.writeString(8, this.tips_checksum);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 2:
                        message.soul_eggs = reader.readDouble();
                        break;
                    case 5:
                        message.contracts_unlocked = reader.readBool();
                        break;
                    case 3:
                        message.artifacts_unlocked = reader.readBool();
                        break;
                    case 4:
                        message.fuel_tank_unlocked = reader.readBool();
                        break;
                    case 6:
                        message.pro_permit = reader.readBool();
                        break;
                    case 7:
                        message.ultra = reader.readBool();
                        break;
                    case 8:
                        message.tips_checksum = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigRequest {
            return ConfigRequest.deserialize(bytes);
        }
    }
    export class ConfigResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            live_config?: LiveConfig;
            mail_bag?: MailDB;
            dlc_catalog?: DLCCatalog;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("live_config" in data && data.live_config != undefined) {
                    this.live_config = data.live_config;
                }
                if ("mail_bag" in data && data.mail_bag != undefined) {
                    this.mail_bag = data.mail_bag;
                }
                if ("dlc_catalog" in data && data.dlc_catalog != undefined) {
                    this.dlc_catalog = data.dlc_catalog;
                }
            }
        }
        get live_config() {
            return pb_1.Message.getWrapperField(this, LiveConfig, 1) as LiveConfig;
        }
        set live_config(value: LiveConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_live_config() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get mail_bag() {
            return pb_1.Message.getWrapperField(this, MailDB, 2) as MailDB;
        }
        set mail_bag(value: MailDB) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_mail_bag() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dlc_catalog() {
            return pb_1.Message.getWrapperField(this, DLCCatalog, 3) as DLCCatalog;
        }
        set dlc_catalog(value: DLCCatalog) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_dlc_catalog() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            live_config?: ReturnType<typeof LiveConfig.prototype.toObject>;
            mail_bag?: ReturnType<typeof MailDB.prototype.toObject>;
            dlc_catalog?: ReturnType<typeof DLCCatalog.prototype.toObject>;
        }): ConfigResponse {
            const message = new ConfigResponse({});
            if (data.live_config != null) {
                message.live_config = LiveConfig.fromObject(data.live_config);
            }
            if (data.mail_bag != null) {
                message.mail_bag = MailDB.fromObject(data.mail_bag);
            }
            if (data.dlc_catalog != null) {
                message.dlc_catalog = DLCCatalog.fromObject(data.dlc_catalog);
            }
            return message;
        }
        toObject() {
            const data: {
                live_config?: ReturnType<typeof LiveConfig.prototype.toObject>;
                mail_bag?: ReturnType<typeof MailDB.prototype.toObject>;
                dlc_catalog?: ReturnType<typeof DLCCatalog.prototype.toObject>;
            } = {};
            if (this.live_config != null) {
                data.live_config = this.live_config.toObject();
            }
            if (this.mail_bag != null) {
                data.mail_bag = this.mail_bag.toObject();
            }
            if (this.dlc_catalog != null) {
                data.dlc_catalog = this.dlc_catalog.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_live_config)
                writer.writeMessage(1, this.live_config, () => this.live_config.serialize(writer));
            if (this.has_mail_bag)
                writer.writeMessage(2, this.mail_bag, () => this.mail_bag.serialize(writer));
            if (this.has_dlc_catalog)
                writer.writeMessage(3, this.dlc_catalog, () => this.dlc_catalog.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.live_config, () => message.live_config = LiveConfig.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.mail_bag, () => message.mail_bag = MailDB.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dlc_catalog, () => message.dlc_catalog = DLCCatalog.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConfigResponse {
            return ConfigResponse.deserialize(bytes);
        }
    }
    export class AdAttributionRawData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_ad_id?: string;
            user_id?: string;
            ad_network?: string;
            json_data?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_ad_id" in data && data.device_ad_id != undefined) {
                    this.device_ad_id = data.device_ad_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("ad_network" in data && data.ad_network != undefined) {
                    this.ad_network = data.ad_network;
                }
                if ("json_data" in data && data.json_data != undefined) {
                    this.json_data = data.json_data;
                }
            }
        }
        get device_ad_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_ad_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_device_ad_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ad_network() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ad_network(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_ad_network() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get json_data() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set json_data(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_json_data() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            device_ad_id?: string;
            user_id?: string;
            ad_network?: string;
            json_data?: string;
        }): AdAttributionRawData {
            const message = new AdAttributionRawData({});
            if (data.device_ad_id != null) {
                message.device_ad_id = data.device_ad_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.ad_network != null) {
                message.ad_network = data.ad_network;
            }
            if (data.json_data != null) {
                message.json_data = data.json_data;
            }
            return message;
        }
        toObject() {
            const data: {
                device_ad_id?: string;
                user_id?: string;
                ad_network?: string;
                json_data?: string;
            } = {};
            if (this.device_ad_id != null) {
                data.device_ad_id = this.device_ad_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.ad_network != null) {
                data.ad_network = this.ad_network;
            }
            if (this.json_data != null) {
                data.json_data = this.json_data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_device_ad_id && this.device_ad_id.length)
                writer.writeString(1, this.device_ad_id);
            if (this.has_user_id && this.user_id.length)
                writer.writeString(4, this.user_id);
            if (this.has_ad_network && this.ad_network.length)
                writer.writeString(2, this.ad_network);
            if (this.has_json_data && this.json_data.length)
                writer.writeString(3, this.json_data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdAttributionRawData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdAttributionRawData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_ad_id = reader.readString();
                        break;
                    case 4:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.ad_network = reader.readString();
                        break;
                    case 3:
                        message.json_data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AdAttributionRawData {
            return AdAttributionRawData.deserialize(bytes);
        }
    }
    export class AdAttributionRow extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            ad_id?: string;
            ad_network?: string;
            campaign?: string;
            keyword?: string;
            extra?: string;
            click_date?: number;
            download_date?: number;
            approx_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("ad_id" in data && data.ad_id != undefined) {
                    this.ad_id = data.ad_id;
                }
                if ("ad_network" in data && data.ad_network != undefined) {
                    this.ad_network = data.ad_network;
                }
                if ("campaign" in data && data.campaign != undefined) {
                    this.campaign = data.campaign;
                }
                if ("keyword" in data && data.keyword != undefined) {
                    this.keyword = data.keyword;
                }
                if ("extra" in data && data.extra != undefined) {
                    this.extra = data.extra;
                }
                if ("click_date" in data && data.click_date != undefined) {
                    this.click_date = data.click_date;
                }
                if ("download_date" in data && data.download_date != undefined) {
                    this.download_date = data.download_date;
                }
                if ("approx_time" in data && data.approx_time != undefined) {
                    this.approx_time = data.approx_time;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ad_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set ad_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_ad_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get ad_network() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ad_network(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_ad_network() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get campaign() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set campaign(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_campaign() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get keyword() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set keyword(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_keyword() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get extra() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set extra(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_extra() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get click_date() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set click_date(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_click_date() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get download_date() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set download_date(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_download_date() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get approx_time() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set approx_time(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_approx_time() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            user_id?: string;
            ad_id?: string;
            ad_network?: string;
            campaign?: string;
            keyword?: string;
            extra?: string;
            click_date?: number;
            download_date?: number;
            approx_time?: number;
        }): AdAttributionRow {
            const message = new AdAttributionRow({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.ad_id != null) {
                message.ad_id = data.ad_id;
            }
            if (data.ad_network != null) {
                message.ad_network = data.ad_network;
            }
            if (data.campaign != null) {
                message.campaign = data.campaign;
            }
            if (data.keyword != null) {
                message.keyword = data.keyword;
            }
            if (data.extra != null) {
                message.extra = data.extra;
            }
            if (data.click_date != null) {
                message.click_date = data.click_date;
            }
            if (data.download_date != null) {
                message.download_date = data.download_date;
            }
            if (data.approx_time != null) {
                message.approx_time = data.approx_time;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                ad_id?: string;
                ad_network?: string;
                campaign?: string;
                keyword?: string;
                extra?: string;
                click_date?: number;
                download_date?: number;
                approx_time?: number;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.ad_id != null) {
                data.ad_id = this.ad_id;
            }
            if (this.ad_network != null) {
                data.ad_network = this.ad_network;
            }
            if (this.campaign != null) {
                data.campaign = this.campaign;
            }
            if (this.keyword != null) {
                data.keyword = this.keyword;
            }
            if (this.extra != null) {
                data.extra = this.extra;
            }
            if (this.click_date != null) {
                data.click_date = this.click_date;
            }
            if (this.download_date != null) {
                data.download_date = this.download_date;
            }
            if (this.approx_time != null) {
                data.approx_time = this.approx_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user_id && this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_ad_id && this.ad_id.length)
                writer.writeString(2, this.ad_id);
            if (this.has_ad_network && this.ad_network.length)
                writer.writeString(3, this.ad_network);
            if (this.has_campaign && this.campaign.length)
                writer.writeString(4, this.campaign);
            if (this.has_keyword && this.keyword.length)
                writer.writeString(5, this.keyword);
            if (this.has_extra && this.extra.length)
                writer.writeString(6, this.extra);
            if (this.has_click_date)
                writer.writeFloat(7, this.click_date);
            if (this.has_download_date)
                writer.writeFloat(8, this.download_date);
            if (this.has_approx_time)
                writer.writeFloat(9, this.approx_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdAttributionRow {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdAttributionRow();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.ad_id = reader.readString();
                        break;
                    case 3:
                        message.ad_network = reader.readString();
                        break;
                    case 4:
                        message.campaign = reader.readString();
                        break;
                    case 5:
                        message.keyword = reader.readString();
                        break;
                    case 6:
                        message.extra = reader.readString();
                        break;
                    case 7:
                        message.click_date = reader.readFloat();
                        break;
                    case 8:
                        message.download_date = reader.readFloat();
                        break;
                    case 9:
                        message.approx_time = reader.readFloat();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AdAttributionRow {
            return AdAttributionRow.deserialize(bytes);
        }
    }
    export class AdAttributionInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            device_ad_id?: string;
            network_name?: string;
            attribution?: boolean;
            org_name?: string;
            org_id?: string;
            campaign_name?: string;
            campaign_id?: string;
            click_date?: string;
            conversion_date?: string;
            conversion_type?: string;
            geo?: string;
            adgroup_name?: string;
            adgroup_id?: string;
            keyword?: string;
            keyword_id?: string;
            keyword_extra?: string;
            creativeset_name?: string;
            creativeset_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("device_ad_id" in data && data.device_ad_id != undefined) {
                    this.device_ad_id = data.device_ad_id;
                }
                if ("network_name" in data && data.network_name != undefined) {
                    this.network_name = data.network_name;
                }
                if ("attribution" in data && data.attribution != undefined) {
                    this.attribution = data.attribution;
                }
                if ("org_name" in data && data.org_name != undefined) {
                    this.org_name = data.org_name;
                }
                if ("org_id" in data && data.org_id != undefined) {
                    this.org_id = data.org_id;
                }
                if ("campaign_name" in data && data.campaign_name != undefined) {
                    this.campaign_name = data.campaign_name;
                }
                if ("campaign_id" in data && data.campaign_id != undefined) {
                    this.campaign_id = data.campaign_id;
                }
                if ("click_date" in data && data.click_date != undefined) {
                    this.click_date = data.click_date;
                }
                if ("conversion_date" in data && data.conversion_date != undefined) {
                    this.conversion_date = data.conversion_date;
                }
                if ("conversion_type" in data && data.conversion_type != undefined) {
                    this.conversion_type = data.conversion_type;
                }
                if ("geo" in data && data.geo != undefined) {
                    this.geo = data.geo;
                }
                if ("adgroup_name" in data && data.adgroup_name != undefined) {
                    this.adgroup_name = data.adgroup_name;
                }
                if ("adgroup_id" in data && data.adgroup_id != undefined) {
                    this.adgroup_id = data.adgroup_id;
                }
                if ("keyword" in data && data.keyword != undefined) {
                    this.keyword = data.keyword;
                }
                if ("keyword_id" in data && data.keyword_id != undefined) {
                    this.keyword_id = data.keyword_id;
                }
                if ("keyword_extra" in data && data.keyword_extra != undefined) {
                    this.keyword_extra = data.keyword_extra;
                }
                if ("creativeset_name" in data && data.creativeset_name != undefined) {
                    this.creativeset_name = data.creativeset_name;
                }
                if ("creativeset_id" in data && data.creativeset_id != undefined) {
                    this.creativeset_id = data.creativeset_id;
                }
            }
        }
        get device_ad_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set device_ad_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_device_ad_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get network_name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set network_name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_network_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get attribution() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set attribution(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_attribution() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get org_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set org_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_org_name() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get org_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set org_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_org_id() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get campaign_name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set campaign_name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_campaign_name() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get campaign_id() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set campaign_id(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_campaign_id() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get click_date() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set click_date(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_click_date() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get conversion_date() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set conversion_date(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_conversion_date() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get conversion_type() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set conversion_type(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_conversion_type() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get geo() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set geo(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_geo() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get adgroup_name() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set adgroup_name(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_adgroup_name() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get adgroup_id() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set adgroup_id(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_adgroup_id() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get keyword() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set keyword(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_keyword() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get keyword_id() {
            return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
        }
        set keyword_id(value: string) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_keyword_id() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get keyword_extra() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set keyword_extra(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_keyword_extra() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get creativeset_name() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set creativeset_name(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        get has_creativeset_name() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get creativeset_id() {
            return pb_1.Message.getFieldWithDefault(this, 18, "") as string;
        }
        set creativeset_id(value: string) {
            pb_1.Message.setField(this, 18, value);
        }
        get has_creativeset_id() {
            return pb_1.Message.getField(this, 18) != null;
        }
        static fromObject(data: {
            device_ad_id?: string;
            network_name?: string;
            attribution?: boolean;
            org_name?: string;
            org_id?: string;
            campaign_name?: string;
            campaign_id?: string;
            click_date?: string;
            conversion_date?: string;
            conversion_type?: string;
            geo?: string;
            adgroup_name?: string;
            adgroup_id?: string;
            keyword?: string;
            keyword_id?: string;
            keyword_extra?: string;
            creativeset_name?: string;
            creativeset_id?: string;
        }): AdAttributionInfo {
            const message = new AdAttributionInfo({});
            if (data.device_ad_id != null) {
                message.device_ad_id = data.device_ad_id;
            }
            if (data.network_name != null) {
                message.network_name = data.network_name;
            }
            if (data.attribution != null) {
                message.attribution = data.attribution;
            }
            if (data.org_name != null) {
                message.org_name = data.org_name;
            }
            if (data.org_id != null) {
                message.org_id = data.org_id;
            }
            if (data.campaign_name != null) {
                message.campaign_name = data.campaign_name;
            }
            if (data.campaign_id != null) {
                message.campaign_id = data.campaign_id;
            }
            if (data.click_date != null) {
                message.click_date = data.click_date;
            }
            if (data.conversion_date != null) {
                message.conversion_date = data.conversion_date;
            }
            if (data.conversion_type != null) {
                message.conversion_type = data.conversion_type;
            }
            if (data.geo != null) {
                message.geo = data.geo;
            }
            if (data.adgroup_name != null) {
                message.adgroup_name = data.adgroup_name;
            }
            if (data.adgroup_id != null) {
                message.adgroup_id = data.adgroup_id;
            }
            if (data.keyword != null) {
                message.keyword = data.keyword;
            }
            if (data.keyword_id != null) {
                message.keyword_id = data.keyword_id;
            }
            if (data.keyword_extra != null) {
                message.keyword_extra = data.keyword_extra;
            }
            if (data.creativeset_name != null) {
                message.creativeset_name = data.creativeset_name;
            }
            if (data.creativeset_id != null) {
                message.creativeset_id = data.creativeset_id;
            }
            return message;
        }
        toObject() {
            const data: {
                device_ad_id?: string;
                network_name?: string;
                attribution?: boolean;
                org_name?: string;
                org_id?: string;
                campaign_name?: string;
                campaign_id?: string;
                click_date?: string;
                conversion_date?: string;
                conversion_type?: string;
                geo?: string;
                adgroup_name?: string;
                adgroup_id?: string;
                keyword?: string;
                keyword_id?: string;
                keyword_extra?: string;
                creativeset_name?: string;
                creativeset_id?: string;
            } = {};
            if (this.device_ad_id != null) {
                data.device_ad_id = this.device_ad_id;
            }
            if (this.network_name != null) {
                data.network_name = this.network_name;
            }
            if (this.attribution != null) {
                data.attribution = this.attribution;
            }
            if (this.org_name != null) {
                data.org_name = this.org_name;
            }
            if (this.org_id != null) {
                data.org_id = this.org_id;
            }
            if (this.campaign_name != null) {
                data.campaign_name = this.campaign_name;
            }
            if (this.campaign_id != null) {
                data.campaign_id = this.campaign_id;
            }
            if (this.click_date != null) {
                data.click_date = this.click_date;
            }
            if (this.conversion_date != null) {
                data.conversion_date = this.conversion_date;
            }
            if (this.conversion_type != null) {
                data.conversion_type = this.conversion_type;
            }
            if (this.geo != null) {
                data.geo = this.geo;
            }
            if (this.adgroup_name != null) {
                data.adgroup_name = this.adgroup_name;
            }
            if (this.adgroup_id != null) {
                data.adgroup_id = this.adgroup_id;
            }
            if (this.keyword != null) {
                data.keyword = this.keyword;
            }
            if (this.keyword_id != null) {
                data.keyword_id = this.keyword_id;
            }
            if (this.keyword_extra != null) {
                data.keyword_extra = this.keyword_extra;
            }
            if (this.creativeset_name != null) {
                data.creativeset_name = this.creativeset_name;
            }
            if (this.creativeset_id != null) {
                data.creativeset_id = this.creativeset_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_device_ad_id && this.device_ad_id.length)
                writer.writeString(1, this.device_ad_id);
            if (this.has_network_name && this.network_name.length)
                writer.writeString(2, this.network_name);
            if (this.has_attribution)
                writer.writeBool(3, this.attribution);
            if (this.has_org_name && this.org_name.length)
                writer.writeString(4, this.org_name);
            if (this.has_org_id && this.org_id.length)
                writer.writeString(5, this.org_id);
            if (this.has_campaign_name && this.campaign_name.length)
                writer.writeString(6, this.campaign_name);
            if (this.has_campaign_id && this.campaign_id.length)
                writer.writeString(7, this.campaign_id);
            if (this.has_click_date && this.click_date.length)
                writer.writeString(8, this.click_date);
            if (this.has_conversion_date && this.conversion_date.length)
                writer.writeString(9, this.conversion_date);
            if (this.has_conversion_type && this.conversion_type.length)
                writer.writeString(10, this.conversion_type);
            if (this.has_geo && this.geo.length)
                writer.writeString(11, this.geo);
            if (this.has_adgroup_name && this.adgroup_name.length)
                writer.writeString(12, this.adgroup_name);
            if (this.has_adgroup_id && this.adgroup_id.length)
                writer.writeString(13, this.adgroup_id);
            if (this.has_keyword && this.keyword.length)
                writer.writeString(14, this.keyword);
            if (this.has_keyword_id && this.keyword_id.length)
                writer.writeString(15, this.keyword_id);
            if (this.has_keyword_extra && this.keyword_extra.length)
                writer.writeString(16, this.keyword_extra);
            if (this.has_creativeset_name && this.creativeset_name.length)
                writer.writeString(17, this.creativeset_name);
            if (this.has_creativeset_id && this.creativeset_id.length)
                writer.writeString(18, this.creativeset_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AdAttributionInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AdAttributionInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.device_ad_id = reader.readString();
                        break;
                    case 2:
                        message.network_name = reader.readString();
                        break;
                    case 3:
                        message.attribution = reader.readBool();
                        break;
                    case 4:
                        message.org_name = reader.readString();
                        break;
                    case 5:
                        message.org_id = reader.readString();
                        break;
                    case 6:
                        message.campaign_name = reader.readString();
                        break;
                    case 7:
                        message.campaign_id = reader.readString();
                        break;
                    case 8:
                        message.click_date = reader.readString();
                        break;
                    case 9:
                        message.conversion_date = reader.readString();
                        break;
                    case 10:
                        message.conversion_type = reader.readString();
                        break;
                    case 11:
                        message.geo = reader.readString();
                        break;
                    case 12:
                        message.adgroup_name = reader.readString();
                        break;
                    case 13:
                        message.adgroup_id = reader.readString();
                        break;
                    case 14:
                        message.keyword = reader.readString();
                        break;
                    case 15:
                        message.keyword_id = reader.readString();
                        break;
                    case 16:
                        message.keyword_extra = reader.readString();
                        break;
                    case 17:
                        message.creativeset_name = reader.readString();
                        break;
                    case 18:
                        message.creativeset_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AdAttributionInfo {
            return AdAttributionInfo.deserialize(bytes);
        }
    }
    export class ArtifactsClientInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            mission_capacity_mult?: number;
            mission_duration_mult?: number;
            mission_ftl_duration_research_mult?: number;
            mission_capacity_research_mult?: number;
            launch_counts: ArtifactsClientInfo.LaunchCount[];
            last_server_launch_count_sum_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mission_capacity_mult" in data && data.mission_capacity_mult != undefined) {
                    this.mission_capacity_mult = data.mission_capacity_mult;
                }
                if ("mission_duration_mult" in data && data.mission_duration_mult != undefined) {
                    this.mission_duration_mult = data.mission_duration_mult;
                }
                if ("mission_ftl_duration_research_mult" in data && data.mission_ftl_duration_research_mult != undefined) {
                    this.mission_ftl_duration_research_mult = data.mission_ftl_duration_research_mult;
                }
                if ("mission_capacity_research_mult" in data && data.mission_capacity_research_mult != undefined) {
                    this.mission_capacity_research_mult = data.mission_capacity_research_mult;
                }
                this.launch_counts = data.launch_counts;
                if ("last_server_launch_count_sum_time" in data && data.last_server_launch_count_sum_time != undefined) {
                    this.last_server_launch_count_sum_time = data.last_server_launch_count_sum_time;
                }
            }
        }
        get mission_capacity_mult() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set mission_capacity_mult(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_mission_capacity_mult() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get mission_duration_mult() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set mission_duration_mult(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_mission_duration_mult() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get mission_ftl_duration_research_mult() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set mission_ftl_duration_research_mult(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_mission_ftl_duration_research_mult() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get mission_capacity_research_mult() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set mission_capacity_research_mult(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_mission_capacity_research_mult() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get launch_counts() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactsClientInfo.LaunchCount, 3) as ArtifactsClientInfo.LaunchCount[];
        }
        set launch_counts(value: ArtifactsClientInfo.LaunchCount[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get last_server_launch_count_sum_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set last_server_launch_count_sum_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_last_server_launch_count_sum_time() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            mission_capacity_mult?: number;
            mission_duration_mult?: number;
            mission_ftl_duration_research_mult?: number;
            mission_capacity_research_mult?: number;
            launch_counts?: ReturnType<typeof ArtifactsClientInfo.LaunchCount.prototype.toObject>[];
            last_server_launch_count_sum_time?: number;
        }): ArtifactsClientInfo {
            const message = new ArtifactsClientInfo({
                launch_counts: data.launch_counts.map(item => ArtifactsClientInfo.LaunchCount.fromObject(item))
            });
            if (data.mission_capacity_mult != null) {
                message.mission_capacity_mult = data.mission_capacity_mult;
            }
            if (data.mission_duration_mult != null) {
                message.mission_duration_mult = data.mission_duration_mult;
            }
            if (data.mission_ftl_duration_research_mult != null) {
                message.mission_ftl_duration_research_mult = data.mission_ftl_duration_research_mult;
            }
            if (data.mission_capacity_research_mult != null) {
                message.mission_capacity_research_mult = data.mission_capacity_research_mult;
            }
            if (data.last_server_launch_count_sum_time != null) {
                message.last_server_launch_count_sum_time = data.last_server_launch_count_sum_time;
            }
            return message;
        }
        toObject() {
            const data: {
                mission_capacity_mult?: number;
                mission_duration_mult?: number;
                mission_ftl_duration_research_mult?: number;
                mission_capacity_research_mult?: number;
                launch_counts?: ReturnType<typeof ArtifactsClientInfo.LaunchCount.prototype.toObject>[];
                last_server_launch_count_sum_time?: number;
            } = {};
            if (this.mission_capacity_mult != null) {
                data.mission_capacity_mult = this.mission_capacity_mult;
            }
            if (this.mission_duration_mult != null) {
                data.mission_duration_mult = this.mission_duration_mult;
            }
            if (this.mission_ftl_duration_research_mult != null) {
                data.mission_ftl_duration_research_mult = this.mission_ftl_duration_research_mult;
            }
            if (this.mission_capacity_research_mult != null) {
                data.mission_capacity_research_mult = this.mission_capacity_research_mult;
            }
            if (this.launch_counts != null) {
                data.launch_counts = this.launch_counts.map((item: ArtifactsClientInfo.LaunchCount) => item.toObject());
            }
            if (this.last_server_launch_count_sum_time != null) {
                data.last_server_launch_count_sum_time = this.last_server_launch_count_sum_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_mission_capacity_mult)
                writer.writeDouble(1, this.mission_capacity_mult);
            if (this.has_mission_duration_mult)
                writer.writeDouble(2, this.mission_duration_mult);
            if (this.has_mission_ftl_duration_research_mult)
                writer.writeDouble(4, this.mission_ftl_duration_research_mult);
            if (this.has_mission_capacity_research_mult)
                writer.writeDouble(6, this.mission_capacity_research_mult);
            if (this.launch_counts.length)
                writer.writeRepeatedMessage(3, this.launch_counts, (item: ArtifactsClientInfo.LaunchCount) => item.serialize(writer));
            if (this.has_last_server_launch_count_sum_time)
                writer.writeDouble(5, this.last_server_launch_count_sum_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArtifactsClientInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArtifactsClientInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mission_capacity_mult = reader.readDouble();
                        break;
                    case 2:
                        message.mission_duration_mult = reader.readDouble();
                        break;
                    case 4:
                        message.mission_ftl_duration_research_mult = reader.readDouble();
                        break;
                    case 6:
                        message.mission_capacity_research_mult = reader.readDouble();
                        break;
                    case 3:
                        reader.readMessage(message.launch_counts, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ArtifactsClientInfo.LaunchCount.deserialize(reader), ArtifactsClientInfo.LaunchCount));
                        break;
                    case 5:
                        message.last_server_launch_count_sum_time = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArtifactsClientInfo {
            return ArtifactsClientInfo.deserialize(bytes);
        }
    }
    export namespace ArtifactsClientInfo {
        export class LaunchCount extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                ship?: MissionInfo.Spaceship;
                num_launches?: number;
                launch_points?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("ship" in data && data.ship != undefined) {
                        this.ship = data.ship;
                    }
                    if ("num_launches" in data && data.num_launches != undefined) {
                        this.num_launches = data.num_launches;
                    }
                    if ("launch_points" in data && data.launch_points != undefined) {
                        this.launch_points = data.launch_points;
                    }
                }
            }
            get ship() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as MissionInfo.Spaceship;
            }
            set ship(value: MissionInfo.Spaceship) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_ship() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get num_launches() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set num_launches(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_num_launches() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get launch_points() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set launch_points(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_launch_points() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                ship?: MissionInfo.Spaceship;
                num_launches?: number;
                launch_points?: number;
            }): LaunchCount {
                const message = new LaunchCount({});
                if (data.ship != null) {
                    message.ship = data.ship;
                }
                if (data.num_launches != null) {
                    message.num_launches = data.num_launches;
                }
                if (data.launch_points != null) {
                    message.launch_points = data.launch_points;
                }
                return message;
            }
            toObject() {
                const data: {
                    ship?: MissionInfo.Spaceship;
                    num_launches?: number;
                    launch_points?: number;
                } = {};
                if (this.ship != null) {
                    data.ship = this.ship;
                }
                if (this.num_launches != null) {
                    data.num_launches = this.num_launches;
                }
                if (this.launch_points != null) {
                    data.launch_points = this.launch_points;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_ship)
                    writer.writeEnum(1, this.ship);
                if (this.has_num_launches)
                    writer.writeUint32(2, this.num_launches);
                if (this.has_launch_points)
                    writer.writeDouble(3, this.launch_points);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LaunchCount {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LaunchCount();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.ship = reader.readEnum();
                            break;
                        case 2:
                            message.num_launches = reader.readUint32();
                            break;
                        case 3:
                            message.launch_points = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): LaunchCount {
                return LaunchCount.deserialize(bytes);
            }
        }
    }
    export class MissionInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ship?: MissionInfo.Spaceship;
            status?: MissionInfo.Status;
            duration_type?: MissionInfo.DurationType;
            fuel: MissionInfo.Fuel[];
            level?: number;
            duration_seconds?: number;
            capacity?: number;
            quality_bump?: number;
            target_artifact?: ArtifactSpec.Name;
            seconds_remaining?: number;
            start_time_derived?: number;
            mission_log?: string;
            identifier?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ship" in data && data.ship != undefined) {
                    this.ship = data.ship;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("duration_type" in data && data.duration_type != undefined) {
                    this.duration_type = data.duration_type;
                }
                this.fuel = data.fuel;
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
                if ("duration_seconds" in data && data.duration_seconds != undefined) {
                    this.duration_seconds = data.duration_seconds;
                }
                if ("capacity" in data && data.capacity != undefined) {
                    this.capacity = data.capacity;
                }
                if ("quality_bump" in data && data.quality_bump != undefined) {
                    this.quality_bump = data.quality_bump;
                }
                if ("target_artifact" in data && data.target_artifact != undefined) {
                    this.target_artifact = data.target_artifact;
                }
                if ("seconds_remaining" in data && data.seconds_remaining != undefined) {
                    this.seconds_remaining = data.seconds_remaining;
                }
                if ("start_time_derived" in data && data.start_time_derived != undefined) {
                    this.start_time_derived = data.start_time_derived;
                }
                if ("mission_log" in data && data.mission_log != undefined) {
                    this.mission_log = data.mission_log;
                }
                if ("identifier" in data && data.identifier != undefined) {
                    this.identifier = data.identifier;
                }
            }
        }
        get ship() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as MissionInfo.Spaceship;
        }
        set ship(value: MissionInfo.Spaceship) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_ship() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 2, MissionInfo.Status.FUELING) as MissionInfo.Status;
        }
        set status(value: MissionInfo.Status) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get duration_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, MissionInfo.DurationType.SHORT) as MissionInfo.DurationType;
        }
        set duration_type(value: MissionInfo.DurationType) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_duration_type() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get fuel() {
            return pb_1.Message.getRepeatedWrapperField(this, MissionInfo.Fuel, 4) as MissionInfo.Fuel[];
        }
        set fuel(value: MissionInfo.Fuel[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set level(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_level() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get duration_seconds() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set duration_seconds(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_duration_seconds() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get capacity() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set capacity(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_capacity() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get quality_bump() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set quality_bump(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_quality_bump() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get target_artifact() {
            return pb_1.Message.getFieldWithDefault(this, 13, ArtifactSpec.Name.LUNAR_TOTEM) as ArtifactSpec.Name;
        }
        set target_artifact(value: ArtifactSpec.Name) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_target_artifact() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get seconds_remaining() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set seconds_remaining(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_seconds_remaining() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get start_time_derived() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set start_time_derived(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_start_time_derived() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get mission_log() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set mission_log(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_mission_log() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get identifier() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set identifier(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_identifier() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            ship?: MissionInfo.Spaceship;
            status?: MissionInfo.Status;
            duration_type?: MissionInfo.DurationType;
            fuel?: ReturnType<typeof MissionInfo.Fuel.prototype.toObject>[];
            level?: number;
            duration_seconds?: number;
            capacity?: number;
            quality_bump?: number;
            target_artifact?: ArtifactSpec.Name;
            seconds_remaining?: number;
            start_time_derived?: number;
            mission_log?: string;
            identifier?: string;
        }): MissionInfo {
            const message = new MissionInfo({
                fuel: data.fuel.map(item => MissionInfo.Fuel.fromObject(item))
            });
            if (data.ship != null) {
                message.ship = data.ship;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.duration_type != null) {
                message.duration_type = data.duration_type;
            }
            if (data.level != null) {
                message.level = data.level;
            }
            if (data.duration_seconds != null) {
                message.duration_seconds = data.duration_seconds;
            }
            if (data.capacity != null) {
                message.capacity = data.capacity;
            }
            if (data.quality_bump != null) {
                message.quality_bump = data.quality_bump;
            }
            if (data.target_artifact != null) {
                message.target_artifact = data.target_artifact;
            }
            if (data.seconds_remaining != null) {
                message.seconds_remaining = data.seconds_remaining;
            }
            if (data.start_time_derived != null) {
                message.start_time_derived = data.start_time_derived;
            }
            if (data.mission_log != null) {
                message.mission_log = data.mission_log;
            }
            if (data.identifier != null) {
                message.identifier = data.identifier;
            }
            return message;
        }
        toObject() {
            const data: {
                ship?: MissionInfo.Spaceship;
                status?: MissionInfo.Status;
                duration_type?: MissionInfo.DurationType;
                fuel?: ReturnType<typeof MissionInfo.Fuel.prototype.toObject>[];
                level?: number;
                duration_seconds?: number;
                capacity?: number;
                quality_bump?: number;
                target_artifact?: ArtifactSpec.Name;
                seconds_remaining?: number;
                start_time_derived?: number;
                mission_log?: string;
                identifier?: string;
            } = {};
            if (this.ship != null) {
                data.ship = this.ship;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.duration_type != null) {
                data.duration_type = this.duration_type;
            }
            if (this.fuel != null) {
                data.fuel = this.fuel.map((item: MissionInfo.Fuel) => item.toObject());
            }
            if (this.level != null) {
                data.level = this.level;
            }
            if (this.duration_seconds != null) {
                data.duration_seconds = this.duration_seconds;
            }
            if (this.capacity != null) {
                data.capacity = this.capacity;
            }
            if (this.quality_bump != null) {
                data.quality_bump = this.quality_bump;
            }
            if (this.target_artifact != null) {
                data.target_artifact = this.target_artifact;
            }
            if (this.seconds_remaining != null) {
                data.seconds_remaining = this.seconds_remaining;
            }
            if (this.start_time_derived != null) {
                data.start_time_derived = this.start_time_derived;
            }
            if (this.mission_log != null) {
                data.mission_log = this.mission_log;
            }
            if (this.identifier != null) {
                data.identifier = this.identifier;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ship)
                writer.writeEnum(1, this.ship);
            if (this.has_status)
                writer.writeEnum(2, this.status);
            if (this.has_duration_type)
                writer.writeEnum(3, this.duration_type);
            if (this.fuel.length)
                writer.writeRepeatedMessage(4, this.fuel, (item: MissionInfo.Fuel) => item.serialize(writer));
            if (this.has_level)
                writer.writeUint32(12, this.level);
            if (this.has_duration_seconds)
                writer.writeDouble(5, this.duration_seconds);
            if (this.has_capacity)
                writer.writeUint32(9, this.capacity);
            if (this.has_quality_bump)
                writer.writeDouble(11, this.quality_bump);
            if (this.has_target_artifact)
                writer.writeEnum(13, this.target_artifact);
            if (this.has_seconds_remaining)
                writer.writeDouble(6, this.seconds_remaining);
            if (this.has_start_time_derived)
                writer.writeDouble(8, this.start_time_derived);
            if (this.has_mission_log && this.mission_log.length)
                writer.writeString(10, this.mission_log);
            if (this.has_identifier && this.identifier.length)
                writer.writeString(7, this.identifier);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MissionInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MissionInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ship = reader.readEnum();
                        break;
                    case 2:
                        message.status = reader.readEnum();
                        break;
                    case 3:
                        message.duration_type = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.fuel, () => pb_1.Message.addToRepeatedWrapperField(message, 4, MissionInfo.Fuel.deserialize(reader), MissionInfo.Fuel));
                        break;
                    case 12:
                        message.level = reader.readUint32();
                        break;
                    case 5:
                        message.duration_seconds = reader.readDouble();
                        break;
                    case 9:
                        message.capacity = reader.readUint32();
                        break;
                    case 11:
                        message.quality_bump = reader.readDouble();
                        break;
                    case 13:
                        message.target_artifact = reader.readEnum();
                        break;
                    case 6:
                        message.seconds_remaining = reader.readDouble();
                        break;
                    case 8:
                        message.start_time_derived = reader.readDouble();
                        break;
                    case 10:
                        message.mission_log = reader.readString();
                        break;
                    case 7:
                        message.identifier = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MissionInfo {
            return MissionInfo.deserialize(bytes);
        }
    }
    export namespace MissionInfo {
        export enum Spaceship {
            CHICKEN_ONE = 0,
            CHICKEN_NINE = 1,
            CHICKEN_HEAVY = 2,
            BCR = 3,
            MILLENIUM_CHICKEN = 4,
            CORELLIHEN_CORVETTE = 5,
            GALEGGTICA = 6,
            CHICKFIANT = 7,
            VOYEGGER = 8,
            HENERPRISE = 9,
            ATREGGIES = 10
        }
        export enum Status {
            FUELING = 0,
            PREPARE_TO_LAUNCH = 5,
            EXPLORING = 10,
            RETURNED = 15,
            ANALYZING = 16,
            COMPLETE = 20,
            ARCHIVED = 25
        }
        export enum DurationType {
            SHORT = 0,
            LONG = 1,
            EPIC = 2,
            TUTORIAL = 3
        }
        export class Fuel extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                egg?: Egg;
                amount?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("egg" in data && data.egg != undefined) {
                        this.egg = data.egg;
                    }
                    if ("amount" in data && data.amount != undefined) {
                        this.amount = data.amount;
                    }
                }
            }
            get egg() {
                return pb_1.Message.getFieldWithDefault(this, 1, Egg.EDIBLE) as Egg;
            }
            set egg(value: Egg) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_egg() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get amount() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set amount(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_amount() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                egg?: Egg;
                amount?: number;
            }): Fuel {
                const message = new Fuel({});
                if (data.egg != null) {
                    message.egg = data.egg;
                }
                if (data.amount != null) {
                    message.amount = data.amount;
                }
                return message;
            }
            toObject() {
                const data: {
                    egg?: Egg;
                    amount?: number;
                } = {};
                if (this.egg != null) {
                    data.egg = this.egg;
                }
                if (this.amount != null) {
                    data.amount = this.amount;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_egg)
                    writer.writeEnum(1, this.egg);
                if (this.has_amount)
                    writer.writeDouble(2, this.amount);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Fuel {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Fuel();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.egg = reader.readEnum();
                            break;
                        case 2:
                            message.amount = reader.readDouble();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Fuel {
                return Fuel.deserialize(bytes);
            }
        }
    }
    export class ArtifactSpec extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: ArtifactSpec.Name;
            level?: ArtifactSpec.Level;
            rarity?: ArtifactSpec.Rarity;
            egg?: Egg;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("level" in data && data.level != undefined) {
                    this.level = data.level;
                }
                if ("rarity" in data && data.rarity != undefined) {
                    this.rarity = data.rarity;
                }
                if ("egg" in data && data.egg != undefined) {
                    this.egg = data.egg;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, ArtifactSpec.Name.LUNAR_TOTEM) as ArtifactSpec.Name;
        }
        set name(value: ArtifactSpec.Name) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get level() {
            return pb_1.Message.getFieldWithDefault(this, 2, ArtifactSpec.Level.INFERIOR) as ArtifactSpec.Level;
        }
        set level(value: ArtifactSpec.Level) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_level() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get rarity() {
            return pb_1.Message.getFieldWithDefault(this, 3, ArtifactSpec.Rarity.COMMON) as ArtifactSpec.Rarity;
        }
        set rarity(value: ArtifactSpec.Rarity) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_rarity() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get egg() {
            return pb_1.Message.getFieldWithDefault(this, 4, Egg.EDIBLE) as Egg;
        }
        set egg(value: Egg) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_egg() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            name?: ArtifactSpec.Name;
            level?: ArtifactSpec.Level;
            rarity?: ArtifactSpec.Rarity;
            egg?: Egg;
        }): ArtifactSpec {
            const message = new ArtifactSpec({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.level != null) {
                message.level = data.level;
            }
            if (data.rarity != null) {
                message.rarity = data.rarity;
            }
            if (data.egg != null) {
                message.egg = data.egg;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: ArtifactSpec.Name;
                level?: ArtifactSpec.Level;
                rarity?: ArtifactSpec.Rarity;
                egg?: Egg;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.level != null) {
                data.level = this.level;
            }
            if (this.rarity != null) {
                data.rarity = this.rarity;
            }
            if (this.egg != null) {
                data.egg = this.egg;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_name)
                writer.writeEnum(1, this.name);
            if (this.has_level)
                writer.writeEnum(2, this.level);
            if (this.has_rarity)
                writer.writeEnum(3, this.rarity);
            if (this.has_egg)
                writer.writeEnum(4, this.egg);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArtifactSpec {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArtifactSpec();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readEnum();
                        break;
                    case 2:
                        message.level = reader.readEnum();
                        break;
                    case 3:
                        message.rarity = reader.readEnum();
                        break;
                    case 4:
                        message.egg = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArtifactSpec {
            return ArtifactSpec.deserialize(bytes);
        }
    }
    export namespace ArtifactSpec {
        export enum Name {
            LUNAR_TOTEM = 0,
            NEODYMIUM_MEDALLION = 3,
            BEAK_OF_MIDAS = 4,
            LIGHT_OF_EGGENDIL = 5,
            DEMETERS_NECKLACE = 6,
            VIAL_MARTIAN_DUST = 7,
            ORNATE_GUSSET = 8,
            THE_CHALICE = 9,
            BOOK_OF_BASAN = 10,
            PHOENIX_FEATHER = 11,
            TUNGSTEN_ANKH = 12,
            AURELIAN_BROOCH = 21,
            CARVED_RAINSTICK = 22,
            PUZZLE_CUBE = 23,
            QUANTUM_METRONOME = 24,
            SHIP_IN_A_BOTTLE = 25,
            TACHYON_DEFLECTOR = 26,
            INTERSTELLAR_COMPASS = 27,
            DILITHIUM_MONOCLE = 28,
            TITANIUM_ACTUATOR = 29,
            MERCURYS_LENS = 30,
            TACHYON_STONE = 1,
            DILITHIUM_STONE = 31,
            SHELL_STONE = 32,
            LUNAR_STONE = 33,
            SOUL_STONE = 34,
            PROPHECY_STONE = 39,
            QUANTUM_STONE = 36,
            TERRA_STONE = 37,
            LIFE_STONE = 38,
            CLARITY_STONE = 40,
            EXTRATERRESTRIAL_ALUMINUM = 13,
            ANCIENT_TUNGSTEN = 14,
            SPACE_ROCKS = 15,
            ALIEN_WOOD = 16,
            GOLD_METEORITE = 17,
            TAU_CETI_GEODE = 18,
            CENTAURIAN_STEEL = 19,
            ERIDANI_FEATHER = 20,
            DRONE_PARTS = 35,
            CELESTIAL_BRONZE = 41,
            LALANDE_HIDE = 42,
            SOLAR_TITANIUM = 43,
            TACHYON_STONE_FRAGMENT = 2,
            DILITHIUM_STONE_FRAGMENT = 44,
            SHELL_STONE_FRAGMENT = 45,
            LUNAR_STONE_FRAGMENT = 46,
            SOUL_STONE_FRAGMENT = 47,
            PROPHECY_STONE_FRAGMENT = 48,
            QUANTUM_STONE_FRAGMENT = 49,
            TERRA_STONE_FRAGMENT = 50,
            LIFE_STONE_FRAGMENT = 51,
            CLARITY_STONE_FRAGMENT = 52,
            UNKNOWN = 10000
        }
        export enum Level {
            INFERIOR = 0,
            LESSER = 1,
            NORMAL = 2,
            GREATER = 3,
            SUPERIOR = 4
        }
        export enum Rarity {
            COMMON = 0,
            RARE = 1,
            EPIC = 2,
            LEGENDARY = 3
        }
        export enum Type {
            ARTIFACT = 0,
            STONE = 1,
            INGREDIENT = 2,
            STONE_INGREDIENT = 3
        }
    }
    export class CompleteArtifact extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            spec?: ArtifactSpec;
            stones: ArtifactSpec[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("spec" in data && data.spec != undefined) {
                    this.spec = data.spec;
                }
                this.stones = data.stones;
            }
        }
        get spec() {
            return pb_1.Message.getWrapperField(this, ArtifactSpec, 1) as ArtifactSpec;
        }
        set spec(value: ArtifactSpec) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_spec() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get stones() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactSpec, 2) as ArtifactSpec[];
        }
        set stones(value: ArtifactSpec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            spec?: ReturnType<typeof ArtifactSpec.prototype.toObject>;
            stones?: ReturnType<typeof ArtifactSpec.prototype.toObject>[];
        }): CompleteArtifact {
            const message = new CompleteArtifact({
                stones: data.stones.map(item => ArtifactSpec.fromObject(item))
            });
            if (data.spec != null) {
                message.spec = ArtifactSpec.fromObject(data.spec);
            }
            return message;
        }
        toObject() {
            const data: {
                spec?: ReturnType<typeof ArtifactSpec.prototype.toObject>;
                stones?: ReturnType<typeof ArtifactSpec.prototype.toObject>[];
            } = {};
            if (this.spec != null) {
                data.spec = this.spec.toObject();
            }
            if (this.stones != null) {
                data.stones = this.stones.map((item: ArtifactSpec) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_spec)
                writer.writeMessage(1, this.spec, () => this.spec.serialize(writer));
            if (this.stones.length)
                writer.writeRepeatedMessage(2, this.stones, (item: ArtifactSpec) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompleteArtifact {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompleteArtifact();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.spec, () => message.spec = ArtifactSpec.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.stones, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ArtifactSpec.deserialize(reader), ArtifactSpec));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompleteArtifact {
            return CompleteArtifact.deserialize(bytes);
        }
    }
    export class ArtifactInventoryItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            item_id?: number;
            artifact?: CompleteArtifact;
            quantity?: number;
            server_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("item_id" in data && data.item_id != undefined) {
                    this.item_id = data.item_id;
                }
                if ("artifact" in data && data.artifact != undefined) {
                    this.artifact = data.artifact;
                }
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
                if ("server_id" in data && data.server_id != undefined) {
                    this.server_id = data.server_id;
                }
            }
        }
        get item_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set item_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_item_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get artifact() {
            return pb_1.Message.getWrapperField(this, CompleteArtifact, 2) as CompleteArtifact;
        }
        set artifact(value: CompleteArtifact) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_artifact() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set quantity(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_quantity() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get server_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set server_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_server_id() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            item_id?: number;
            artifact?: ReturnType<typeof CompleteArtifact.prototype.toObject>;
            quantity?: number;
            server_id?: string;
        }): ArtifactInventoryItem {
            const message = new ArtifactInventoryItem({});
            if (data.item_id != null) {
                message.item_id = data.item_id;
            }
            if (data.artifact != null) {
                message.artifact = CompleteArtifact.fromObject(data.artifact);
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            if (data.server_id != null) {
                message.server_id = data.server_id;
            }
            return message;
        }
        toObject() {
            const data: {
                item_id?: number;
                artifact?: ReturnType<typeof CompleteArtifact.prototype.toObject>;
                quantity?: number;
                server_id?: string;
            } = {};
            if (this.item_id != null) {
                data.item_id = this.item_id;
            }
            if (this.artifact != null) {
                data.artifact = this.artifact.toObject();
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            if (this.server_id != null) {
                data.server_id = this.server_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_item_id)
                writer.writeUint64(1, this.item_id);
            if (this.has_artifact)
                writer.writeMessage(2, this.artifact, () => this.artifact.serialize(writer));
            if (this.has_quantity)
                writer.writeDouble(3, this.quantity);
            if (this.has_server_id && this.server_id.length)
                writer.writeString(4, this.server_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArtifactInventoryItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArtifactInventoryItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.item_id = reader.readUint64();
                        break;
                    case 2:
                        reader.readMessage(message.artifact, () => message.artifact = CompleteArtifact.deserialize(reader));
                        break;
                    case 3:
                        message.quantity = reader.readDouble();
                        break;
                    case 4:
                        message.server_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArtifactInventoryItem {
            return ArtifactInventoryItem.deserialize(bytes);
        }
    }
    export class InventorySlot extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            occupied?: boolean;
            item_id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("occupied" in data && data.occupied != undefined) {
                    this.occupied = data.occupied;
                }
                if ("item_id" in data && data.item_id != undefined) {
                    this.item_id = data.item_id;
                }
            }
        }
        get occupied() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set occupied(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_occupied() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get item_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set item_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_item_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            occupied?: boolean;
            item_id?: number;
        }): InventorySlot {
            const message = new InventorySlot({});
            if (data.occupied != null) {
                message.occupied = data.occupied;
            }
            if (data.item_id != null) {
                message.item_id = data.item_id;
            }
            return message;
        }
        toObject() {
            const data: {
                occupied?: boolean;
                item_id?: number;
            } = {};
            if (this.occupied != null) {
                data.occupied = this.occupied;
            }
            if (this.item_id != null) {
                data.item_id = this.item_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_occupied)
                writer.writeBool(1, this.occupied);
            if (this.has_item_id)
                writer.writeUint32(2, this.item_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InventorySlot {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InventorySlot();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.occupied = reader.readBool();
                        break;
                    case 2:
                        message.item_id = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InventorySlot {
            return InventorySlot.deserialize(bytes);
        }
    }
    export class ArtifactsConfigurationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            client_version?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 2) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            client_version?: number;
        }): ArtifactsConfigurationRequest {
            const message = new ArtifactsConfigurationRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                client_version?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(2, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_client_version)
                writer.writeUint32(1, this.client_version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArtifactsConfigurationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArtifactsConfigurationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.client_version = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArtifactsConfigurationRequest {
            return ArtifactsConfigurationRequest.deserialize(bytes);
        }
    }
    export class ArtifactsConfigurationResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            mission_parameters: ArtifactsConfigurationResponse.MissionParameters[];
            artifact_parameters: ArtifactsConfigurationResponse.ArtifactParameters[];
            crafting_level_infos: ArtifactsConfigurationResponse.CraftingLevelInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.mission_parameters = data.mission_parameters;
                this.artifact_parameters = data.artifact_parameters;
                this.crafting_level_infos = data.crafting_level_infos;
            }
        }
        get mission_parameters() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactsConfigurationResponse.MissionParameters, 1) as ArtifactsConfigurationResponse.MissionParameters[];
        }
        set mission_parameters(value: ArtifactsConfigurationResponse.MissionParameters[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get artifact_parameters() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactsConfigurationResponse.ArtifactParameters, 2) as ArtifactsConfigurationResponse.ArtifactParameters[];
        }
        set artifact_parameters(value: ArtifactsConfigurationResponse.ArtifactParameters[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get crafting_level_infos() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactsConfigurationResponse.CraftingLevelInfo, 3) as ArtifactsConfigurationResponse.CraftingLevelInfo[];
        }
        set crafting_level_infos(value: ArtifactsConfigurationResponse.CraftingLevelInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            mission_parameters?: ReturnType<typeof ArtifactsConfigurationResponse.MissionParameters.prototype.toObject>[];
            artifact_parameters?: ReturnType<typeof ArtifactsConfigurationResponse.ArtifactParameters.prototype.toObject>[];
            crafting_level_infos?: ReturnType<typeof ArtifactsConfigurationResponse.CraftingLevelInfo.prototype.toObject>[];
        }): ArtifactsConfigurationResponse {
            const message = new ArtifactsConfigurationResponse({
                mission_parameters: data.mission_parameters.map(item => ArtifactsConfigurationResponse.MissionParameters.fromObject(item)),
                artifact_parameters: data.artifact_parameters.map(item => ArtifactsConfigurationResponse.ArtifactParameters.fromObject(item)),
                crafting_level_infos: data.crafting_level_infos.map(item => ArtifactsConfigurationResponse.CraftingLevelInfo.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                mission_parameters?: ReturnType<typeof ArtifactsConfigurationResponse.MissionParameters.prototype.toObject>[];
                artifact_parameters?: ReturnType<typeof ArtifactsConfigurationResponse.ArtifactParameters.prototype.toObject>[];
                crafting_level_infos?: ReturnType<typeof ArtifactsConfigurationResponse.CraftingLevelInfo.prototype.toObject>[];
            } = {};
            if (this.mission_parameters != null) {
                data.mission_parameters = this.mission_parameters.map((item: ArtifactsConfigurationResponse.MissionParameters) => item.toObject());
            }
            if (this.artifact_parameters != null) {
                data.artifact_parameters = this.artifact_parameters.map((item: ArtifactsConfigurationResponse.ArtifactParameters) => item.toObject());
            }
            if (this.crafting_level_infos != null) {
                data.crafting_level_infos = this.crafting_level_infos.map((item: ArtifactsConfigurationResponse.CraftingLevelInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.mission_parameters.length)
                writer.writeRepeatedMessage(1, this.mission_parameters, (item: ArtifactsConfigurationResponse.MissionParameters) => item.serialize(writer));
            if (this.artifact_parameters.length)
                writer.writeRepeatedMessage(2, this.artifact_parameters, (item: ArtifactsConfigurationResponse.ArtifactParameters) => item.serialize(writer));
            if (this.crafting_level_infos.length)
                writer.writeRepeatedMessage(3, this.crafting_level_infos, (item: ArtifactsConfigurationResponse.CraftingLevelInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArtifactsConfigurationResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArtifactsConfigurationResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.mission_parameters, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ArtifactsConfigurationResponse.MissionParameters.deserialize(reader), ArtifactsConfigurationResponse.MissionParameters));
                        break;
                    case 2:
                        reader.readMessage(message.artifact_parameters, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ArtifactsConfigurationResponse.ArtifactParameters.deserialize(reader), ArtifactsConfigurationResponse.ArtifactParameters));
                        break;
                    case 3:
                        reader.readMessage(message.crafting_level_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ArtifactsConfigurationResponse.CraftingLevelInfo.deserialize(reader), ArtifactsConfigurationResponse.CraftingLevelInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArtifactsConfigurationResponse {
            return ArtifactsConfigurationResponse.deserialize(bytes);
        }
    }
    export namespace ArtifactsConfigurationResponse {
        export class MissionParameters extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                ship?: MissionInfo.Spaceship;
                durations: ArtifactsConfigurationResponse.MissionParameters.Duration[];
                level_mission_requirements: number[];
                capacity_DEPRECATED?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("ship" in data && data.ship != undefined) {
                        this.ship = data.ship;
                    }
                    this.durations = data.durations;
                    this.level_mission_requirements = data.level_mission_requirements;
                    if ("capacity_DEPRECATED" in data && data.capacity_DEPRECATED != undefined) {
                        this.capacity_DEPRECATED = data.capacity_DEPRECATED;
                    }
                }
            }
            get ship() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as MissionInfo.Spaceship;
            }
            set ship(value: MissionInfo.Spaceship) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_ship() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get durations() {
                return pb_1.Message.getRepeatedWrapperField(this, ArtifactsConfigurationResponse.MissionParameters.Duration, 3) as ArtifactsConfigurationResponse.MissionParameters.Duration[];
            }
            set durations(value: ArtifactsConfigurationResponse.MissionParameters.Duration[]) {
                pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            get level_mission_requirements() {
                return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
            }
            set level_mission_requirements(value: number[]) {
                pb_1.Message.setField(this, 4, value);
            }
            get capacity_DEPRECATED() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set capacity_DEPRECATED(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_capacity_DEPRECATED() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                ship?: MissionInfo.Spaceship;
                durations?: ReturnType<typeof ArtifactsConfigurationResponse.MissionParameters.Duration.prototype.toObject>[];
                level_mission_requirements: number[];
                capacity_DEPRECATED?: number;
            }): MissionParameters {
                const message = new MissionParameters({
                    durations: data.durations.map(item => ArtifactsConfigurationResponse.MissionParameters.Duration.fromObject(item)),
                    level_mission_requirements: data.level_mission_requirements
                });
                if (data.ship != null) {
                    message.ship = data.ship;
                }
                if (data.capacity_DEPRECATED != null) {
                    message.capacity_DEPRECATED = data.capacity_DEPRECATED;
                }
                return message;
            }
            toObject() {
                const data: {
                    ship?: MissionInfo.Spaceship;
                    durations?: ReturnType<typeof ArtifactsConfigurationResponse.MissionParameters.Duration.prototype.toObject>[];
                    level_mission_requirements: number[];
                    capacity_DEPRECATED?: number;
                } = {
                    level_mission_requirements: this.level_mission_requirements
                };
                if (this.ship != null) {
                    data.ship = this.ship;
                }
                if (this.durations != null) {
                    data.durations = this.durations.map((item: ArtifactsConfigurationResponse.MissionParameters.Duration) => item.toObject());
                }
                if (this.capacity_DEPRECATED != null) {
                    data.capacity_DEPRECATED = this.capacity_DEPRECATED;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_ship)
                    writer.writeEnum(1, this.ship);
                if (this.durations.length)
                    writer.writeRepeatedMessage(3, this.durations, (item: ArtifactsConfigurationResponse.MissionParameters.Duration) => item.serialize(writer));
                if (this.level_mission_requirements.length)
                    writer.writeRepeatedUint32(4, this.level_mission_requirements);
                if (this.has_capacity_DEPRECATED)
                    writer.writeUint32(2, this.capacity_DEPRECATED);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MissionParameters {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MissionParameters();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.ship = reader.readEnum();
                            break;
                        case 3:
                            reader.readMessage(message.durations, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ArtifactsConfigurationResponse.MissionParameters.Duration.deserialize(reader), ArtifactsConfigurationResponse.MissionParameters.Duration));
                            break;
                        case 4:
                            pb_1.Message.addToRepeatedField(message, 4, reader.readUint32());
                            break;
                        case 2:
                            message.capacity_DEPRECATED = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): MissionParameters {
                return MissionParameters.deserialize(bytes);
            }
        }
        export namespace MissionParameters {
            export class Duration extends pb_1.Message {
                #one_of_decls: number[][] = [];
                constructor(data?: any[] | {
                    duration_type?: MissionInfo.DurationType;
                    seconds?: number;
                    quality?: number;
                    min_quality?: number;
                    max_quality?: number;
                    capacity?: number;
                    level_capacity_bump?: number;
                    level_quality_bump?: number;
                }) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                    if (!Array.isArray(data) && typeof data == "object") {
                        if ("duration_type" in data && data.duration_type != undefined) {
                            this.duration_type = data.duration_type;
                        }
                        if ("seconds" in data && data.seconds != undefined) {
                            this.seconds = data.seconds;
                        }
                        if ("quality" in data && data.quality != undefined) {
                            this.quality = data.quality;
                        }
                        if ("min_quality" in data && data.min_quality != undefined) {
                            this.min_quality = data.min_quality;
                        }
                        if ("max_quality" in data && data.max_quality != undefined) {
                            this.max_quality = data.max_quality;
                        }
                        if ("capacity" in data && data.capacity != undefined) {
                            this.capacity = data.capacity;
                        }
                        if ("level_capacity_bump" in data && data.level_capacity_bump != undefined) {
                            this.level_capacity_bump = data.level_capacity_bump;
                        }
                        if ("level_quality_bump" in data && data.level_quality_bump != undefined) {
                            this.level_quality_bump = data.level_quality_bump;
                        }
                    }
                }
                get duration_type() {
                    return pb_1.Message.getFieldWithDefault(this, 1, MissionInfo.DurationType.SHORT) as MissionInfo.DurationType;
                }
                set duration_type(value: MissionInfo.DurationType) {
                    pb_1.Message.setField(this, 1, value);
                }
                get has_duration_type() {
                    return pb_1.Message.getField(this, 1) != null;
                }
                get seconds() {
                    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
                }
                set seconds(value: number) {
                    pb_1.Message.setField(this, 2, value);
                }
                get has_seconds() {
                    return pb_1.Message.getField(this, 2) != null;
                }
                get quality() {
                    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
                }
                set quality(value: number) {
                    pb_1.Message.setField(this, 3, value);
                }
                get has_quality() {
                    return pb_1.Message.getField(this, 3) != null;
                }
                get min_quality() {
                    return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
                }
                set min_quality(value: number) {
                    pb_1.Message.setField(this, 4, value);
                }
                get has_min_quality() {
                    return pb_1.Message.getField(this, 4) != null;
                }
                get max_quality() {
                    return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
                }
                set max_quality(value: number) {
                    pb_1.Message.setField(this, 5, value);
                }
                get has_max_quality() {
                    return pb_1.Message.getField(this, 5) != null;
                }
                get capacity() {
                    return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
                }
                set capacity(value: number) {
                    pb_1.Message.setField(this, 6, value);
                }
                get has_capacity() {
                    return pb_1.Message.getField(this, 6) != null;
                }
                get level_capacity_bump() {
                    return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
                }
                set level_capacity_bump(value: number) {
                    pb_1.Message.setField(this, 7, value);
                }
                get has_level_capacity_bump() {
                    return pb_1.Message.getField(this, 7) != null;
                }
                get level_quality_bump() {
                    return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
                }
                set level_quality_bump(value: number) {
                    pb_1.Message.setField(this, 8, value);
                }
                get has_level_quality_bump() {
                    return pb_1.Message.getField(this, 8) != null;
                }
                static fromObject(data: {
                    duration_type?: MissionInfo.DurationType;
                    seconds?: number;
                    quality?: number;
                    min_quality?: number;
                    max_quality?: number;
                    capacity?: number;
                    level_capacity_bump?: number;
                    level_quality_bump?: number;
                }): Duration {
                    const message = new Duration({});
                    if (data.duration_type != null) {
                        message.duration_type = data.duration_type;
                    }
                    if (data.seconds != null) {
                        message.seconds = data.seconds;
                    }
                    if (data.quality != null) {
                        message.quality = data.quality;
                    }
                    if (data.min_quality != null) {
                        message.min_quality = data.min_quality;
                    }
                    if (data.max_quality != null) {
                        message.max_quality = data.max_quality;
                    }
                    if (data.capacity != null) {
                        message.capacity = data.capacity;
                    }
                    if (data.level_capacity_bump != null) {
                        message.level_capacity_bump = data.level_capacity_bump;
                    }
                    if (data.level_quality_bump != null) {
                        message.level_quality_bump = data.level_quality_bump;
                    }
                    return message;
                }
                toObject() {
                    const data: {
                        duration_type?: MissionInfo.DurationType;
                        seconds?: number;
                        quality?: number;
                        min_quality?: number;
                        max_quality?: number;
                        capacity?: number;
                        level_capacity_bump?: number;
                        level_quality_bump?: number;
                    } = {};
                    if (this.duration_type != null) {
                        data.duration_type = this.duration_type;
                    }
                    if (this.seconds != null) {
                        data.seconds = this.seconds;
                    }
                    if (this.quality != null) {
                        data.quality = this.quality;
                    }
                    if (this.min_quality != null) {
                        data.min_quality = this.min_quality;
                    }
                    if (this.max_quality != null) {
                        data.max_quality = this.max_quality;
                    }
                    if (this.capacity != null) {
                        data.capacity = this.capacity;
                    }
                    if (this.level_capacity_bump != null) {
                        data.level_capacity_bump = this.level_capacity_bump;
                    }
                    if (this.level_quality_bump != null) {
                        data.level_quality_bump = this.level_quality_bump;
                    }
                    return data;
                }
                serialize(): Uint8Array;
                serialize(w: pb_1.BinaryWriter): void;
                serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.has_duration_type)
                        writer.writeEnum(1, this.duration_type);
                    if (this.has_seconds)
                        writer.writeDouble(2, this.seconds);
                    if (this.has_quality)
                        writer.writeFloat(3, this.quality);
                    if (this.has_min_quality)
                        writer.writeFloat(4, this.min_quality);
                    if (this.has_max_quality)
                        writer.writeFloat(5, this.max_quality);
                    if (this.has_capacity)
                        writer.writeUint32(6, this.capacity);
                    if (this.has_level_capacity_bump)
                        writer.writeUint32(7, this.level_capacity_bump);
                    if (this.has_level_quality_bump)
                        writer.writeFloat(8, this.level_quality_bump);
                    if (!w)
                        return writer.getResultBuffer();
                }
                static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Duration {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Duration();
                    while (reader.nextField()) {
                        if (reader.isEndGroup())
                            break;
                        switch (reader.getFieldNumber()) {
                            case 1:
                                message.duration_type = reader.readEnum();
                                break;
                            case 2:
                                message.seconds = reader.readDouble();
                                break;
                            case 3:
                                message.quality = reader.readFloat();
                                break;
                            case 4:
                                message.min_quality = reader.readFloat();
                                break;
                            case 5:
                                message.max_quality = reader.readFloat();
                                break;
                            case 6:
                                message.capacity = reader.readUint32();
                                break;
                            case 7:
                                message.level_capacity_bump = reader.readUint32();
                                break;
                            case 8:
                                message.level_quality_bump = reader.readFloat();
                                break;
                            default: reader.skipField();
                        }
                    }
                    return message;
                }
                serializeBinary(): Uint8Array {
                    return this.serialize();
                }
                static deserializeBinary(bytes: Uint8Array): Duration {
                    return Duration.deserialize(bytes);
                }
            }
        }
        export class ArtifactParameters extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                spec?: ArtifactSpec;
                base_quality?: number;
                odds_multiplier?: number;
                value?: number;
                crafting_price?: number;
                crafting_price_low?: number;
                crafting_price_domain?: number;
                crafting_price_curve?: number;
                crafting_xp?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("spec" in data && data.spec != undefined) {
                        this.spec = data.spec;
                    }
                    if ("base_quality" in data && data.base_quality != undefined) {
                        this.base_quality = data.base_quality;
                    }
                    if ("odds_multiplier" in data && data.odds_multiplier != undefined) {
                        this.odds_multiplier = data.odds_multiplier;
                    }
                    if ("value" in data && data.value != undefined) {
                        this.value = data.value;
                    }
                    if ("crafting_price" in data && data.crafting_price != undefined) {
                        this.crafting_price = data.crafting_price;
                    }
                    if ("crafting_price_low" in data && data.crafting_price_low != undefined) {
                        this.crafting_price_low = data.crafting_price_low;
                    }
                    if ("crafting_price_domain" in data && data.crafting_price_domain != undefined) {
                        this.crafting_price_domain = data.crafting_price_domain;
                    }
                    if ("crafting_price_curve" in data && data.crafting_price_curve != undefined) {
                        this.crafting_price_curve = data.crafting_price_curve;
                    }
                    if ("crafting_xp" in data && data.crafting_xp != undefined) {
                        this.crafting_xp = data.crafting_xp;
                    }
                }
            }
            get spec() {
                return pb_1.Message.getWrapperField(this, ArtifactSpec, 1) as ArtifactSpec;
            }
            set spec(value: ArtifactSpec) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_spec() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get base_quality() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set base_quality(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_base_quality() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get odds_multiplier() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set odds_multiplier(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_odds_multiplier() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get value() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set value(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_value() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get crafting_price() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set crafting_price(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_crafting_price() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get crafting_price_low() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set crafting_price_low(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_crafting_price_low() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get crafting_price_domain() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set crafting_price_domain(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get has_crafting_price_domain() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get crafting_price_curve() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set crafting_price_curve(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get has_crafting_price_curve() {
                return pb_1.Message.getField(this, 8) != null;
            }
            get crafting_xp() {
                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
            }
            set crafting_xp(value: number) {
                pb_1.Message.setField(this, 9, value);
            }
            get has_crafting_xp() {
                return pb_1.Message.getField(this, 9) != null;
            }
            static fromObject(data: {
                spec?: ReturnType<typeof ArtifactSpec.prototype.toObject>;
                base_quality?: number;
                odds_multiplier?: number;
                value?: number;
                crafting_price?: number;
                crafting_price_low?: number;
                crafting_price_domain?: number;
                crafting_price_curve?: number;
                crafting_xp?: number;
            }): ArtifactParameters {
                const message = new ArtifactParameters({});
                if (data.spec != null) {
                    message.spec = ArtifactSpec.fromObject(data.spec);
                }
                if (data.base_quality != null) {
                    message.base_quality = data.base_quality;
                }
                if (data.odds_multiplier != null) {
                    message.odds_multiplier = data.odds_multiplier;
                }
                if (data.value != null) {
                    message.value = data.value;
                }
                if (data.crafting_price != null) {
                    message.crafting_price = data.crafting_price;
                }
                if (data.crafting_price_low != null) {
                    message.crafting_price_low = data.crafting_price_low;
                }
                if (data.crafting_price_domain != null) {
                    message.crafting_price_domain = data.crafting_price_domain;
                }
                if (data.crafting_price_curve != null) {
                    message.crafting_price_curve = data.crafting_price_curve;
                }
                if (data.crafting_xp != null) {
                    message.crafting_xp = data.crafting_xp;
                }
                return message;
            }
            toObject() {
                const data: {
                    spec?: ReturnType<typeof ArtifactSpec.prototype.toObject>;
                    base_quality?: number;
                    odds_multiplier?: number;
                    value?: number;
                    crafting_price?: number;
                    crafting_price_low?: number;
                    crafting_price_domain?: number;
                    crafting_price_curve?: number;
                    crafting_xp?: number;
                } = {};
                if (this.spec != null) {
                    data.spec = this.spec.toObject();
                }
                if (this.base_quality != null) {
                    data.base_quality = this.base_quality;
                }
                if (this.odds_multiplier != null) {
                    data.odds_multiplier = this.odds_multiplier;
                }
                if (this.value != null) {
                    data.value = this.value;
                }
                if (this.crafting_price != null) {
                    data.crafting_price = this.crafting_price;
                }
                if (this.crafting_price_low != null) {
                    data.crafting_price_low = this.crafting_price_low;
                }
                if (this.crafting_price_domain != null) {
                    data.crafting_price_domain = this.crafting_price_domain;
                }
                if (this.crafting_price_curve != null) {
                    data.crafting_price_curve = this.crafting_price_curve;
                }
                if (this.crafting_xp != null) {
                    data.crafting_xp = this.crafting_xp;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_spec)
                    writer.writeMessage(1, this.spec, () => this.spec.serialize(writer));
                if (this.has_base_quality)
                    writer.writeDouble(2, this.base_quality);
                if (this.has_odds_multiplier)
                    writer.writeDouble(4, this.odds_multiplier);
                if (this.has_value)
                    writer.writeDouble(3, this.value);
                if (this.has_crafting_price)
                    writer.writeDouble(5, this.crafting_price);
                if (this.has_crafting_price_low)
                    writer.writeDouble(6, this.crafting_price_low);
                if (this.has_crafting_price_domain)
                    writer.writeUint32(7, this.crafting_price_domain);
                if (this.has_crafting_price_curve)
                    writer.writeDouble(8, this.crafting_price_curve);
                if (this.has_crafting_xp)
                    writer.writeUint64(9, this.crafting_xp);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArtifactParameters {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArtifactParameters();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.spec, () => message.spec = ArtifactSpec.deserialize(reader));
                            break;
                        case 2:
                            message.base_quality = reader.readDouble();
                            break;
                        case 4:
                            message.odds_multiplier = reader.readDouble();
                            break;
                        case 3:
                            message.value = reader.readDouble();
                            break;
                        case 5:
                            message.crafting_price = reader.readDouble();
                            break;
                        case 6:
                            message.crafting_price_low = reader.readDouble();
                            break;
                        case 7:
                            message.crafting_price_domain = reader.readUint32();
                            break;
                        case 8:
                            message.crafting_price_curve = reader.readDouble();
                            break;
                        case 9:
                            message.crafting_xp = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ArtifactParameters {
                return ArtifactParameters.deserialize(bytes);
            }
        }
        export class CraftingLevelInfo extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                xp_required?: number;
                rarity_mult?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("xp_required" in data && data.xp_required != undefined) {
                        this.xp_required = data.xp_required;
                    }
                    if ("rarity_mult" in data && data.rarity_mult != undefined) {
                        this.rarity_mult = data.rarity_mult;
                    }
                }
            }
            get xp_required() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set xp_required(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_xp_required() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get rarity_mult() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set rarity_mult(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_rarity_mult() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                xp_required?: number;
                rarity_mult?: number;
            }): CraftingLevelInfo {
                const message = new CraftingLevelInfo({});
                if (data.xp_required != null) {
                    message.xp_required = data.xp_required;
                }
                if (data.rarity_mult != null) {
                    message.rarity_mult = data.rarity_mult;
                }
                return message;
            }
            toObject() {
                const data: {
                    xp_required?: number;
                    rarity_mult?: number;
                } = {};
                if (this.xp_required != null) {
                    data.xp_required = this.xp_required;
                }
                if (this.rarity_mult != null) {
                    data.rarity_mult = this.rarity_mult;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_xp_required)
                    writer.writeDouble(1, this.xp_required);
                if (this.has_rarity_mult)
                    writer.writeFloat(2, this.rarity_mult);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CraftingLevelInfo {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CraftingLevelInfo();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.xp_required = reader.readDouble();
                            break;
                        case 2:
                            message.rarity_mult = reader.readFloat();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CraftingLevelInfo {
                return CraftingLevelInfo.deserialize(bytes);
            }
        }
    }
    export class MissionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            client_version?: number;
            ei_user_id?: string;
            info?: MissionInfo;
            client_info?: ArtifactsClientInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("client_version" in data && data.client_version != undefined) {
                    this.client_version = data.client_version;
                }
                if ("ei_user_id" in data && data.ei_user_id != undefined) {
                    this.ei_user_id = data.ei_user_id;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
                if ("client_info" in data && data.client_info != undefined) {
                    this.client_info = data.client_info;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 4) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get client_version() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set client_version(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_client_version() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ei_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ei_user_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_ei_user_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, MissionInfo, 2) as MissionInfo;
        }
        set info(value: MissionInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get client_info() {
            return pb_1.Message.getWrapperField(this, ArtifactsClientInfo, 5) as ArtifactsClientInfo;
        }
        set client_info(value: ArtifactsClientInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_client_info() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            client_version?: number;
            ei_user_id?: string;
            info?: ReturnType<typeof MissionInfo.prototype.toObject>;
            client_info?: ReturnType<typeof ArtifactsClientInfo.prototype.toObject>;
        }): MissionRequest {
            const message = new MissionRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.client_version != null) {
                message.client_version = data.client_version;
            }
            if (data.ei_user_id != null) {
                message.ei_user_id = data.ei_user_id;
            }
            if (data.info != null) {
                message.info = MissionInfo.fromObject(data.info);
            }
            if (data.client_info != null) {
                message.client_info = ArtifactsClientInfo.fromObject(data.client_info);
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                client_version?: number;
                ei_user_id?: string;
                info?: ReturnType<typeof MissionInfo.prototype.toObject>;
                client_info?: ReturnType<typeof ArtifactsClientInfo.prototype.toObject>;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.client_version != null) {
                data.client_version = this.client_version;
            }
            if (this.ei_user_id != null) {
                data.ei_user_id = this.ei_user_id;
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            if (this.client_info != null) {
                data.client_info = this.client_info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(4, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_client_version)
                writer.writeUint32(1, this.client_version);
            if (this.has_ei_user_id && this.ei_user_id.length)
                writer.writeString(3, this.ei_user_id);
            if (this.has_info)
                writer.writeMessage(2, this.info, () => this.info.serialize(writer));
            if (this.has_client_info)
                writer.writeMessage(5, this.client_info, () => this.client_info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MissionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MissionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 4:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.client_version = reader.readUint32();
                        break;
                    case 3:
                        message.ei_user_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.info, () => message.info = MissionInfo.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.client_info, () => message.client_info = ArtifactsClientInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MissionRequest {
            return MissionRequest.deserialize(bytes);
        }
    }
    export class MissionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            info?: MissionInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_success() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, MissionInfo, 2) as MissionInfo;
        }
        set info(value: MissionInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            success?: boolean;
            info?: ReturnType<typeof MissionInfo.prototype.toObject>;
        }): MissionResponse {
            const message = new MissionResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.info != null) {
                message.info = MissionInfo.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                info?: ReturnType<typeof MissionInfo.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_success)
                writer.writeBool(1, this.success);
            if (this.has_info)
                writer.writeMessage(2, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MissionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MissionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.info, () => message.info = MissionInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MissionResponse {
            return MissionResponse.deserialize(bytes);
        }
    }
    export class GetActiveMissionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            active_missions: MissionInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                this.active_missions = data.active_missions;
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_success() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get active_missions() {
            return pb_1.Message.getRepeatedWrapperField(this, MissionInfo, 2) as MissionInfo[];
        }
        set active_missions(value: MissionInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            success?: boolean;
            active_missions?: ReturnType<typeof MissionInfo.prototype.toObject>[];
        }): GetActiveMissionsResponse {
            const message = new GetActiveMissionsResponse({
                active_missions: data.active_missions.map(item => MissionInfo.fromObject(item))
            });
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                active_missions?: ReturnType<typeof MissionInfo.prototype.toObject>[];
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.active_missions != null) {
                data.active_missions = this.active_missions.map((item: MissionInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_success)
                writer.writeBool(1, this.success);
            if (this.active_missions.length)
                writer.writeRepeatedMessage(2, this.active_missions, (item: MissionInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetActiveMissionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetActiveMissionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.active_missions, () => pb_1.Message.addToRepeatedWrapperField(message, 2, MissionInfo.deserialize(reader), MissionInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetActiveMissionsResponse {
            return GetActiveMissionsResponse.deserialize(bytes);
        }
    }
    export class CompleteMissionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            info?: MissionInfo;
            artifacts: CompleteMissionResponse.SecureArtifactSpec[];
            other_rewards: Reward[];
            ei_user_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
                this.artifacts = data.artifacts;
                this.other_rewards = data.other_rewards;
                if ("ei_user_id" in data && data.ei_user_id != undefined) {
                    this.ei_user_id = data.ei_user_id;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_success() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get info() {
            return pb_1.Message.getWrapperField(this, MissionInfo, 2) as MissionInfo;
        }
        set info(value: MissionInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get artifacts() {
            return pb_1.Message.getRepeatedWrapperField(this, CompleteMissionResponse.SecureArtifactSpec, 3) as CompleteMissionResponse.SecureArtifactSpec[];
        }
        set artifacts(value: CompleteMissionResponse.SecureArtifactSpec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get other_rewards() {
            return pb_1.Message.getRepeatedWrapperField(this, Reward, 4) as Reward[];
        }
        set other_rewards(value: Reward[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get ei_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ei_user_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_ei_user_id() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            success?: boolean;
            info?: ReturnType<typeof MissionInfo.prototype.toObject>;
            artifacts?: ReturnType<typeof CompleteMissionResponse.SecureArtifactSpec.prototype.toObject>[];
            other_rewards?: ReturnType<typeof Reward.prototype.toObject>[];
            ei_user_id?: string;
        }): CompleteMissionResponse {
            const message = new CompleteMissionResponse({
                artifacts: data.artifacts.map(item => CompleteMissionResponse.SecureArtifactSpec.fromObject(item)),
                other_rewards: data.other_rewards.map(item => Reward.fromObject(item))
            });
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.info != null) {
                message.info = MissionInfo.fromObject(data.info);
            }
            if (data.ei_user_id != null) {
                message.ei_user_id = data.ei_user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                info?: ReturnType<typeof MissionInfo.prototype.toObject>;
                artifacts?: ReturnType<typeof CompleteMissionResponse.SecureArtifactSpec.prototype.toObject>[];
                other_rewards?: ReturnType<typeof Reward.prototype.toObject>[];
                ei_user_id?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            if (this.artifacts != null) {
                data.artifacts = this.artifacts.map((item: CompleteMissionResponse.SecureArtifactSpec) => item.toObject());
            }
            if (this.other_rewards != null) {
                data.other_rewards = this.other_rewards.map((item: Reward) => item.toObject());
            }
            if (this.ei_user_id != null) {
                data.ei_user_id = this.ei_user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_success)
                writer.writeBool(1, this.success);
            if (this.has_info)
                writer.writeMessage(2, this.info, () => this.info.serialize(writer));
            if (this.artifacts.length)
                writer.writeRepeatedMessage(3, this.artifacts, (item: CompleteMissionResponse.SecureArtifactSpec) => item.serialize(writer));
            if (this.other_rewards.length)
                writer.writeRepeatedMessage(4, this.other_rewards, (item: Reward) => item.serialize(writer));
            if (this.has_ei_user_id && this.ei_user_id.length)
                writer.writeString(5, this.ei_user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompleteMissionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompleteMissionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.info, () => message.info = MissionInfo.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.artifacts, () => pb_1.Message.addToRepeatedWrapperField(message, 3, CompleteMissionResponse.SecureArtifactSpec.deserialize(reader), CompleteMissionResponse.SecureArtifactSpec));
                        break;
                    case 4:
                        reader.readMessage(message.other_rewards, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Reward.deserialize(reader), Reward));
                        break;
                    case 5:
                        message.ei_user_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompleteMissionResponse {
            return CompleteMissionResponse.deserialize(bytes);
        }
    }
    export namespace CompleteMissionResponse {
        export class SecureArtifactSpec extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                spec?: ArtifactSpec;
                server_id?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("spec" in data && data.spec != undefined) {
                        this.spec = data.spec;
                    }
                    if ("server_id" in data && data.server_id != undefined) {
                        this.server_id = data.server_id;
                    }
                }
            }
            get spec() {
                return pb_1.Message.getWrapperField(this, ArtifactSpec, 1) as ArtifactSpec;
            }
            set spec(value: ArtifactSpec) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_spec() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get server_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set server_id(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_server_id() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                spec?: ReturnType<typeof ArtifactSpec.prototype.toObject>;
                server_id?: string;
            }): SecureArtifactSpec {
                const message = new SecureArtifactSpec({});
                if (data.spec != null) {
                    message.spec = ArtifactSpec.fromObject(data.spec);
                }
                if (data.server_id != null) {
                    message.server_id = data.server_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    spec?: ReturnType<typeof ArtifactSpec.prototype.toObject>;
                    server_id?: string;
                } = {};
                if (this.spec != null) {
                    data.spec = this.spec.toObject();
                }
                if (this.server_id != null) {
                    data.server_id = this.server_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_spec)
                    writer.writeMessage(1, this.spec, () => this.spec.serialize(writer));
                if (this.has_server_id && this.server_id.length)
                    writer.writeString(2, this.server_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SecureArtifactSpec {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SecureArtifactSpec();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.spec, () => message.spec = ArtifactSpec.deserialize(reader));
                            break;
                        case 2:
                            message.server_id = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SecureArtifactSpec {
                return SecureArtifactSpec.deserialize(bytes);
            }
        }
    }
    export class CollectContractArtifactRewardsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            contract_identifier?: string;
            league?: number;
            grade?: Contract.PlayerGrade;
            goal_index?: number;
            best_ship?: MissionInfo.Spaceship;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("contract_identifier" in data && data.contract_identifier != undefined) {
                    this.contract_identifier = data.contract_identifier;
                }
                if ("league" in data && data.league != undefined) {
                    this.league = data.league;
                }
                if ("grade" in data && data.grade != undefined) {
                    this.grade = data.grade;
                }
                if ("goal_index" in data && data.goal_index != undefined) {
                    this.goal_index = data.goal_index;
                }
                if ("best_ship" in data && data.best_ship != undefined) {
                    this.best_ship = data.best_ship;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 1) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get contract_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_identifier(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_contract_identifier() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get league() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set league(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_league() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get grade() {
            return pb_1.Message.getFieldWithDefault(this, 6, Contract.PlayerGrade.GRADE_UNSET) as Contract.PlayerGrade;
        }
        set grade(value: Contract.PlayerGrade) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_grade() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get goal_index() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set goal_index(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_goal_index() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get best_ship() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as MissionInfo.Spaceship;
        }
        set best_ship(value: MissionInfo.Spaceship) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_best_ship() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            contract_identifier?: string;
            league?: number;
            grade?: Contract.PlayerGrade;
            goal_index?: number;
            best_ship?: MissionInfo.Spaceship;
        }): CollectContractArtifactRewardsRequest {
            const message = new CollectContractArtifactRewardsRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.contract_identifier != null) {
                message.contract_identifier = data.contract_identifier;
            }
            if (data.league != null) {
                message.league = data.league;
            }
            if (data.grade != null) {
                message.grade = data.grade;
            }
            if (data.goal_index != null) {
                message.goal_index = data.goal_index;
            }
            if (data.best_ship != null) {
                message.best_ship = data.best_ship;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                contract_identifier?: string;
                league?: number;
                grade?: Contract.PlayerGrade;
                goal_index?: number;
                best_ship?: MissionInfo.Spaceship;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.contract_identifier != null) {
                data.contract_identifier = this.contract_identifier;
            }
            if (this.league != null) {
                data.league = this.league;
            }
            if (this.grade != null) {
                data.grade = this.grade;
            }
            if (this.goal_index != null) {
                data.goal_index = this.goal_index;
            }
            if (this.best_ship != null) {
                data.best_ship = this.best_ship;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(1, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_contract_identifier && this.contract_identifier.length)
                writer.writeString(2, this.contract_identifier);
            if (this.has_league)
                writer.writeUint32(5, this.league);
            if (this.has_grade)
                writer.writeEnum(6, this.grade);
            if (this.has_goal_index)
                writer.writeUint32(3, this.goal_index);
            if (this.has_best_ship)
                writer.writeEnum(4, this.best_ship);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CollectContractArtifactRewardsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CollectContractArtifactRewardsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 2:
                        message.contract_identifier = reader.readString();
                        break;
                    case 5:
                        message.league = reader.readUint32();
                        break;
                    case 6:
                        message.grade = reader.readEnum();
                        break;
                    case 3:
                        message.goal_index = reader.readUint32();
                        break;
                    case 4:
                        message.best_ship = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CollectContractArtifactRewardsRequest {
            return CollectContractArtifactRewardsRequest.deserialize(bytes);
        }
    }
    export class CraftArtifactRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            ei_user_id?: string;
            spec?: ArtifactSpec;
            item_id?: number;
            gold_price_paid?: number;
            crafting_count?: number;
            crafting_xp?: number;
            ingredients: ArtifactInventoryItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("ei_user_id" in data && data.ei_user_id != undefined) {
                    this.ei_user_id = data.ei_user_id;
                }
                if ("spec" in data && data.spec != undefined) {
                    this.spec = data.spec;
                }
                if ("item_id" in data && data.item_id != undefined) {
                    this.item_id = data.item_id;
                }
                if ("gold_price_paid" in data && data.gold_price_paid != undefined) {
                    this.gold_price_paid = data.gold_price_paid;
                }
                if ("crafting_count" in data && data.crafting_count != undefined) {
                    this.crafting_count = data.crafting_count;
                }
                if ("crafting_xp" in data && data.crafting_xp != undefined) {
                    this.crafting_xp = data.crafting_xp;
                }
                this.ingredients = data.ingredients;
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 5) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get ei_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ei_user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_ei_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get spec() {
            return pb_1.Message.getWrapperField(this, ArtifactSpec, 2) as ArtifactSpec;
        }
        set spec(value: ArtifactSpec) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_spec() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get item_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set item_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_item_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get gold_price_paid() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set gold_price_paid(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_gold_price_paid() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get crafting_count() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set crafting_count(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_crafting_count() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get crafting_xp() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set crafting_xp(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_crafting_xp() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get ingredients() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactInventoryItem, 4) as ArtifactInventoryItem[];
        }
        set ingredients(value: ArtifactInventoryItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            ei_user_id?: string;
            spec?: ReturnType<typeof ArtifactSpec.prototype.toObject>;
            item_id?: number;
            gold_price_paid?: number;
            crafting_count?: number;
            crafting_xp?: number;
            ingredients?: ReturnType<typeof ArtifactInventoryItem.prototype.toObject>[];
        }): CraftArtifactRequest {
            const message = new CraftArtifactRequest({
                ingredients: data.ingredients.map(item => ArtifactInventoryItem.fromObject(item))
            });
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.ei_user_id != null) {
                message.ei_user_id = data.ei_user_id;
            }
            if (data.spec != null) {
                message.spec = ArtifactSpec.fromObject(data.spec);
            }
            if (data.item_id != null) {
                message.item_id = data.item_id;
            }
            if (data.gold_price_paid != null) {
                message.gold_price_paid = data.gold_price_paid;
            }
            if (data.crafting_count != null) {
                message.crafting_count = data.crafting_count;
            }
            if (data.crafting_xp != null) {
                message.crafting_xp = data.crafting_xp;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                ei_user_id?: string;
                spec?: ReturnType<typeof ArtifactSpec.prototype.toObject>;
                item_id?: number;
                gold_price_paid?: number;
                crafting_count?: number;
                crafting_xp?: number;
                ingredients?: ReturnType<typeof ArtifactInventoryItem.prototype.toObject>[];
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.ei_user_id != null) {
                data.ei_user_id = this.ei_user_id;
            }
            if (this.spec != null) {
                data.spec = this.spec.toObject();
            }
            if (this.item_id != null) {
                data.item_id = this.item_id;
            }
            if (this.gold_price_paid != null) {
                data.gold_price_paid = this.gold_price_paid;
            }
            if (this.crafting_count != null) {
                data.crafting_count = this.crafting_count;
            }
            if (this.crafting_xp != null) {
                data.crafting_xp = this.crafting_xp;
            }
            if (this.ingredients != null) {
                data.ingredients = this.ingredients.map((item: ArtifactInventoryItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(5, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_ei_user_id && this.ei_user_id.length)
                writer.writeString(1, this.ei_user_id);
            if (this.has_spec)
                writer.writeMessage(2, this.spec, () => this.spec.serialize(writer));
            if (this.has_item_id)
                writer.writeUint64(3, this.item_id);
            if (this.has_gold_price_paid)
                writer.writeDouble(6, this.gold_price_paid);
            if (this.has_crafting_count)
                writer.writeUint32(7, this.crafting_count);
            if (this.has_crafting_xp)
                writer.writeDouble(8, this.crafting_xp);
            if (this.ingredients.length)
                writer.writeRepeatedMessage(4, this.ingredients, (item: ArtifactInventoryItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CraftArtifactRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CraftArtifactRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 5:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.ei_user_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.spec, () => message.spec = ArtifactSpec.deserialize(reader));
                        break;
                    case 3:
                        message.item_id = reader.readUint64();
                        break;
                    case 6:
                        message.gold_price_paid = reader.readDouble();
                        break;
                    case 7:
                        message.crafting_count = reader.readUint32();
                        break;
                    case 8:
                        message.crafting_xp = reader.readDouble();
                        break;
                    case 4:
                        reader.readMessage(message.ingredients, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ArtifactInventoryItem.deserialize(reader), ArtifactInventoryItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CraftArtifactRequest {
            return CraftArtifactRequest.deserialize(bytes);
        }
    }
    export class CraftArtifactResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            item_id?: number;
            ei_user_id?: string;
            rarity_achieved?: ArtifactSpec.Rarity;
            server_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("item_id" in data && data.item_id != undefined) {
                    this.item_id = data.item_id;
                }
                if ("ei_user_id" in data && data.ei_user_id != undefined) {
                    this.ei_user_id = data.ei_user_id;
                }
                if ("rarity_achieved" in data && data.rarity_achieved != undefined) {
                    this.rarity_achieved = data.rarity_achieved;
                }
                if ("server_id" in data && data.server_id != undefined) {
                    this.server_id = data.server_id;
                }
            }
        }
        get item_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set item_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_item_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get ei_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ei_user_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_ei_user_id() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get rarity_achieved() {
            return pb_1.Message.getFieldWithDefault(this, 2, ArtifactSpec.Rarity.COMMON) as ArtifactSpec.Rarity;
        }
        set rarity_achieved(value: ArtifactSpec.Rarity) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_rarity_achieved() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get server_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set server_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_server_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            item_id?: number;
            ei_user_id?: string;
            rarity_achieved?: ArtifactSpec.Rarity;
            server_id?: string;
        }): CraftArtifactResponse {
            const message = new CraftArtifactResponse({});
            if (data.item_id != null) {
                message.item_id = data.item_id;
            }
            if (data.ei_user_id != null) {
                message.ei_user_id = data.ei_user_id;
            }
            if (data.rarity_achieved != null) {
                message.rarity_achieved = data.rarity_achieved;
            }
            if (data.server_id != null) {
                message.server_id = data.server_id;
            }
            return message;
        }
        toObject() {
            const data: {
                item_id?: number;
                ei_user_id?: string;
                rarity_achieved?: ArtifactSpec.Rarity;
                server_id?: string;
            } = {};
            if (this.item_id != null) {
                data.item_id = this.item_id;
            }
            if (this.ei_user_id != null) {
                data.ei_user_id = this.ei_user_id;
            }
            if (this.rarity_achieved != null) {
                data.rarity_achieved = this.rarity_achieved;
            }
            if (this.server_id != null) {
                data.server_id = this.server_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_item_id)
                writer.writeUint64(1, this.item_id);
            if (this.has_ei_user_id && this.ei_user_id.length)
                writer.writeString(5, this.ei_user_id);
            if (this.has_rarity_achieved)
                writer.writeEnum(2, this.rarity_achieved);
            if (this.has_server_id && this.server_id.length)
                writer.writeString(3, this.server_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CraftArtifactResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CraftArtifactResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.item_id = reader.readUint64();
                        break;
                    case 5:
                        message.ei_user_id = reader.readString();
                        break;
                    case 2:
                        message.rarity_achieved = reader.readEnum();
                        break;
                    case 3:
                        message.server_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CraftArtifactResponse {
            return CraftArtifactResponse.deserialize(bytes);
        }
    }
    export class ConsumeArtifactRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            ei_user_id?: string;
            spec?: ArtifactSpec;
            artifact_server_id?: string;
            original_item_id?: number;
            additional_server_ids: string[];
            additional_item_ids: number[];
            quantity?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("ei_user_id" in data && data.ei_user_id != undefined) {
                    this.ei_user_id = data.ei_user_id;
                }
                if ("spec" in data && data.spec != undefined) {
                    this.spec = data.spec;
                }
                if ("artifact_server_id" in data && data.artifact_server_id != undefined) {
                    this.artifact_server_id = data.artifact_server_id;
                }
                if ("original_item_id" in data && data.original_item_id != undefined) {
                    this.original_item_id = data.original_item_id;
                }
                this.additional_server_ids = data.additional_server_ids;
                this.additional_item_ids = data.additional_item_ids;
                if ("quantity" in data && data.quantity != undefined) {
                    this.quantity = data.quantity;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 4) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ei_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ei_user_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_ei_user_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get spec() {
            return pb_1.Message.getWrapperField(this, ArtifactSpec, 1) as ArtifactSpec;
        }
        set spec(value: ArtifactSpec) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_spec() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get artifact_server_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set artifact_server_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_artifact_server_id() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get original_item_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set original_item_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_original_item_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get additional_server_ids() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set additional_server_ids(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get additional_item_ids() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as number[];
        }
        set additional_item_ids(value: number[]) {
            pb_1.Message.setField(this, 8, value);
        }
        get quantity() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set quantity(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_quantity() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            ei_user_id?: string;
            spec?: ReturnType<typeof ArtifactSpec.prototype.toObject>;
            artifact_server_id?: string;
            original_item_id?: number;
            additional_server_ids: string[];
            additional_item_ids: number[];
            quantity?: number;
        }): ConsumeArtifactRequest {
            const message = new ConsumeArtifactRequest({
                additional_server_ids: data.additional_server_ids,
                additional_item_ids: data.additional_item_ids
            });
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.ei_user_id != null) {
                message.ei_user_id = data.ei_user_id;
            }
            if (data.spec != null) {
                message.spec = ArtifactSpec.fromObject(data.spec);
            }
            if (data.artifact_server_id != null) {
                message.artifact_server_id = data.artifact_server_id;
            }
            if (data.original_item_id != null) {
                message.original_item_id = data.original_item_id;
            }
            if (data.quantity != null) {
                message.quantity = data.quantity;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                ei_user_id?: string;
                spec?: ReturnType<typeof ArtifactSpec.prototype.toObject>;
                artifact_server_id?: string;
                original_item_id?: number;
                additional_server_ids: string[];
                additional_item_ids: number[];
                quantity?: number;
            } = {
                additional_server_ids: this.additional_server_ids,
                additional_item_ids: this.additional_item_ids
            };
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.ei_user_id != null) {
                data.ei_user_id = this.ei_user_id;
            }
            if (this.spec != null) {
                data.spec = this.spec.toObject();
            }
            if (this.artifact_server_id != null) {
                data.artifact_server_id = this.artifact_server_id;
            }
            if (this.original_item_id != null) {
                data.original_item_id = this.original_item_id;
            }
            if (this.quantity != null) {
                data.quantity = this.quantity;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(4, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_ei_user_id && this.ei_user_id.length)
                writer.writeString(3, this.ei_user_id);
            if (this.has_spec)
                writer.writeMessage(1, this.spec, () => this.spec.serialize(writer));
            if (this.has_artifact_server_id && this.artifact_server_id.length)
                writer.writeString(5, this.artifact_server_id);
            if (this.has_original_item_id)
                writer.writeUint64(2, this.original_item_id);
            if (this.additional_server_ids.length)
                writer.writeRepeatedString(7, this.additional_server_ids);
            if (this.additional_item_ids.length)
                writer.writeRepeatedUint64(8, this.additional_item_ids);
            if (this.has_quantity)
                writer.writeUint32(6, this.quantity);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsumeArtifactRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsumeArtifactRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 4:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 3:
                        message.ei_user_id = reader.readString();
                        break;
                    case 1:
                        reader.readMessage(message.spec, () => message.spec = ArtifactSpec.deserialize(reader));
                        break;
                    case 5:
                        message.artifact_server_id = reader.readString();
                        break;
                    case 2:
                        message.original_item_id = reader.readUint64();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 8:
                        pb_1.Message.addToRepeatedField(message, 8, reader.readUint64());
                        break;
                    case 6:
                        message.quantity = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsumeArtifactRequest {
            return ConsumeArtifactRequest.deserialize(bytes);
        }
    }
    export class ConsumeArtifactResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            original_item_id?: number;
            additional_item_ids: number[];
            byproducts: ArtifactSpec[];
            other_rewards: Reward[];
            ei_user_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("original_item_id" in data && data.original_item_id != undefined) {
                    this.original_item_id = data.original_item_id;
                }
                this.additional_item_ids = data.additional_item_ids;
                this.byproducts = data.byproducts;
                this.other_rewards = data.other_rewards;
                if ("ei_user_id" in data && data.ei_user_id != undefined) {
                    this.ei_user_id = data.ei_user_id;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_success() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get original_item_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set original_item_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_original_item_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get additional_item_ids() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as number[];
        }
        set additional_item_ids(value: number[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get byproducts() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactSpec, 3) as ArtifactSpec[];
        }
        set byproducts(value: ArtifactSpec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get other_rewards() {
            return pb_1.Message.getRepeatedWrapperField(this, Reward, 4) as Reward[];
        }
        set other_rewards(value: Reward[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get ei_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ei_user_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_ei_user_id() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            success?: boolean;
            original_item_id?: number;
            additional_item_ids: number[];
            byproducts?: ReturnType<typeof ArtifactSpec.prototype.toObject>[];
            other_rewards?: ReturnType<typeof Reward.prototype.toObject>[];
            ei_user_id?: string;
        }): ConsumeArtifactResponse {
            const message = new ConsumeArtifactResponse({
                additional_item_ids: data.additional_item_ids,
                byproducts: data.byproducts.map(item => ArtifactSpec.fromObject(item)),
                other_rewards: data.other_rewards.map(item => Reward.fromObject(item))
            });
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.original_item_id != null) {
                message.original_item_id = data.original_item_id;
            }
            if (data.ei_user_id != null) {
                message.ei_user_id = data.ei_user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                original_item_id?: number;
                additional_item_ids: number[];
                byproducts?: ReturnType<typeof ArtifactSpec.prototype.toObject>[];
                other_rewards?: ReturnType<typeof Reward.prototype.toObject>[];
                ei_user_id?: string;
            } = {
                additional_item_ids: this.additional_item_ids
            };
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.original_item_id != null) {
                data.original_item_id = this.original_item_id;
            }
            if (this.byproducts != null) {
                data.byproducts = this.byproducts.map((item: ArtifactSpec) => item.toObject());
            }
            if (this.other_rewards != null) {
                data.other_rewards = this.other_rewards.map((item: Reward) => item.toObject());
            }
            if (this.ei_user_id != null) {
                data.ei_user_id = this.ei_user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_success)
                writer.writeBool(1, this.success);
            if (this.has_original_item_id)
                writer.writeUint64(2, this.original_item_id);
            if (this.additional_item_ids.length)
                writer.writeRepeatedUint64(6, this.additional_item_ids);
            if (this.byproducts.length)
                writer.writeRepeatedMessage(3, this.byproducts, (item: ArtifactSpec) => item.serialize(writer));
            if (this.other_rewards.length)
                writer.writeRepeatedMessage(4, this.other_rewards, (item: Reward) => item.serialize(writer));
            if (this.has_ei_user_id && this.ei_user_id.length)
                writer.writeString(5, this.ei_user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ConsumeArtifactResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsumeArtifactResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.original_item_id = reader.readUint64();
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readUint64());
                        break;
                    case 3:
                        reader.readMessage(message.byproducts, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ArtifactSpec.deserialize(reader), ArtifactSpec));
                        break;
                    case 4:
                        reader.readMessage(message.other_rewards, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Reward.deserialize(reader), Reward));
                        break;
                    case 5:
                        message.ei_user_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ConsumeArtifactResponse {
            return ConsumeArtifactResponse.deserialize(bytes);
        }
    }
    export class AuthenticateArtifactResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            original_item_id?: number;
            demote?: boolean;
            delete?: boolean;
            ei_user_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("original_item_id" in data && data.original_item_id != undefined) {
                    this.original_item_id = data.original_item_id;
                }
                if ("demote" in data && data.demote != undefined) {
                    this.demote = data.demote;
                }
                if ("delete" in data && data.delete != undefined) {
                    this.delete = data.delete;
                }
                if ("ei_user_id" in data && data.ei_user_id != undefined) {
                    this.ei_user_id = data.ei_user_id;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_success() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get original_item_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set original_item_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_original_item_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get demote() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set demote(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_demote() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get delete() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set delete(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_delete() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get ei_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ei_user_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_ei_user_id() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            success?: boolean;
            original_item_id?: number;
            demote?: boolean;
            delete?: boolean;
            ei_user_id?: string;
        }): AuthenticateArtifactResponse {
            const message = new AuthenticateArtifactResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.original_item_id != null) {
                message.original_item_id = data.original_item_id;
            }
            if (data.demote != null) {
                message.demote = data.demote;
            }
            if (data.delete != null) {
                message.delete = data.delete;
            }
            if (data.ei_user_id != null) {
                message.ei_user_id = data.ei_user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                original_item_id?: number;
                demote?: boolean;
                delete?: boolean;
                ei_user_id?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.original_item_id != null) {
                data.original_item_id = this.original_item_id;
            }
            if (this.demote != null) {
                data.demote = this.demote;
            }
            if (this.delete != null) {
                data.delete = this.delete;
            }
            if (this.ei_user_id != null) {
                data.ei_user_id = this.ei_user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_success)
                writer.writeBool(1, this.success);
            if (this.has_original_item_id)
                writer.writeUint64(2, this.original_item_id);
            if (this.has_demote)
                writer.writeBool(3, this.demote);
            if (this.has_delete)
                writer.writeBool(4, this.delete);
            if (this.has_ei_user_id && this.ei_user_id.length)
                writer.writeString(5, this.ei_user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticateArtifactResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticateArtifactResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.original_item_id = reader.readUint64();
                        break;
                    case 3:
                        message.demote = reader.readBool();
                        break;
                    case 4:
                        message.delete = reader.readBool();
                        break;
                    case 5:
                        message.ei_user_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticateArtifactResponse {
            return AuthenticateArtifactResponse.deserialize(bytes);
        }
    }
    export class SetArtifactRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            artifact?: ArtifactInventoryItem;
            stones: ArtifactSpec[];
            gold_price_paid?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("artifact" in data && data.artifact != undefined) {
                    this.artifact = data.artifact;
                }
                this.stones = data.stones;
                if ("gold_price_paid" in data && data.gold_price_paid != undefined) {
                    this.gold_price_paid = data.gold_price_paid;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 1) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get artifact() {
            return pb_1.Message.getWrapperField(this, ArtifactInventoryItem, 2) as ArtifactInventoryItem;
        }
        set artifact(value: ArtifactInventoryItem) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_artifact() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get stones() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactSpec, 3) as ArtifactSpec[];
        }
        set stones(value: ArtifactSpec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get gold_price_paid() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set gold_price_paid(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_gold_price_paid() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            artifact?: ReturnType<typeof ArtifactInventoryItem.prototype.toObject>;
            stones?: ReturnType<typeof ArtifactSpec.prototype.toObject>[];
            gold_price_paid?: number;
        }): SetArtifactRequest {
            const message = new SetArtifactRequest({
                stones: data.stones.map(item => ArtifactSpec.fromObject(item))
            });
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.artifact != null) {
                message.artifact = ArtifactInventoryItem.fromObject(data.artifact);
            }
            if (data.gold_price_paid != null) {
                message.gold_price_paid = data.gold_price_paid;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                artifact?: ReturnType<typeof ArtifactInventoryItem.prototype.toObject>;
                stones?: ReturnType<typeof ArtifactSpec.prototype.toObject>[];
                gold_price_paid?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.artifact != null) {
                data.artifact = this.artifact.toObject();
            }
            if (this.stones != null) {
                data.stones = this.stones.map((item: ArtifactSpec) => item.toObject());
            }
            if (this.gold_price_paid != null) {
                data.gold_price_paid = this.gold_price_paid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(1, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_artifact)
                writer.writeMessage(2, this.artifact, () => this.artifact.serialize(writer));
            if (this.stones.length)
                writer.writeRepeatedMessage(3, this.stones, (item: ArtifactSpec) => item.serialize(writer));
            if (this.has_gold_price_paid)
                writer.writeDouble(4, this.gold_price_paid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetArtifactRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetArtifactRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.artifact, () => message.artifact = ArtifactInventoryItem.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.stones, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ArtifactSpec.deserialize(reader), ArtifactSpec));
                        break;
                    case 4:
                        message.gold_price_paid = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetArtifactRequest {
            return SetArtifactRequest.deserialize(bytes);
        }
    }
    export class SetArtifactResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            original_item_id?: number;
            ei_user_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("original_item_id" in data && data.original_item_id != undefined) {
                    this.original_item_id = data.original_item_id;
                }
                if ("ei_user_id" in data && data.ei_user_id != undefined) {
                    this.ei_user_id = data.ei_user_id;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_success() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get original_item_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set original_item_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_original_item_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get ei_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set ei_user_id(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_ei_user_id() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            success?: boolean;
            original_item_id?: number;
            ei_user_id?: string;
        }): SetArtifactResponse {
            const message = new SetArtifactResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.original_item_id != null) {
                message.original_item_id = data.original_item_id;
            }
            if (data.ei_user_id != null) {
                message.ei_user_id = data.ei_user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                original_item_id?: number;
                ei_user_id?: string;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.original_item_id != null) {
                data.original_item_id = this.original_item_id;
            }
            if (this.ei_user_id != null) {
                data.ei_user_id = this.ei_user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_success)
                writer.writeBool(1, this.success);
            if (this.has_original_item_id)
                writer.writeUint64(2, this.original_item_id);
            if (this.has_ei_user_id && this.ei_user_id.length)
                writer.writeString(5, this.ei_user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetArtifactResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetArtifactResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.original_item_id = reader.readUint64();
                        break;
                    case 5:
                        message.ei_user_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetArtifactResponse {
            return SetArtifactResponse.deserialize(bytes);
        }
    }
    export class ArtifactsDB extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inventory_items: ArtifactInventoryItem[];
            item_sequence?: number;
            inventory_slots: InventorySlot[];
            active_artifacts_DEPRECATED: ArtifactsDB.ActiveArtifactSlot[];
            active_artifact_sets: ArtifactsDB.ActiveArtifactSet[];
            saved_artifact_sets: ArtifactsDB.ActiveArtifactSet[];
            artifact_status: ArtifactsDB.CraftableArtifact[];
            fueling_mission?: MissionInfo;
            mission_infos: MissionInfo[];
            mission_archive: MissionInfo[];
            discovered_artifacts_DEPRECATED: ArtifactSpec[];
            craftable_artifacts_DEPRECATED: ArtifactsDB.CraftableArtifact[];
            crafting_counts_DEPRECATED: ArtifactsDB.CraftableArtifact[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 3, 7, 11, 13, 12, 4, 5, 8, 9, 10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.inventory_items = data.inventory_items;
                if ("item_sequence" in data && data.item_sequence != undefined) {
                    this.item_sequence = data.item_sequence;
                }
                this.inventory_slots = data.inventory_slots;
                this.active_artifacts_DEPRECATED = data.active_artifacts_DEPRECATED;
                this.active_artifact_sets = data.active_artifact_sets;
                this.saved_artifact_sets = data.saved_artifact_sets;
                this.artifact_status = data.artifact_status;
                if ("fueling_mission" in data && data.fueling_mission != undefined) {
                    this.fueling_mission = data.fueling_mission;
                }
                this.mission_infos = data.mission_infos;
                this.mission_archive = data.mission_archive;
                this.discovered_artifacts_DEPRECATED = data.discovered_artifacts_DEPRECATED;
                this.craftable_artifacts_DEPRECATED = data.craftable_artifacts_DEPRECATED;
                this.crafting_counts_DEPRECATED = data.crafting_counts_DEPRECATED;
            }
        }
        get inventory_items() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactInventoryItem, 1) as ArtifactInventoryItem[];
        }
        set inventory_items(value: ArtifactInventoryItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get item_sequence() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set item_sequence(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_item_sequence() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get inventory_slots() {
            return pb_1.Message.getRepeatedWrapperField(this, InventorySlot, 3) as InventorySlot[];
        }
        set inventory_slots(value: InventorySlot[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get active_artifacts_DEPRECATED() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactsDB.ActiveArtifactSlot, 7) as ArtifactsDB.ActiveArtifactSlot[];
        }
        set active_artifacts_DEPRECATED(value: ArtifactsDB.ActiveArtifactSlot[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get active_artifact_sets() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactsDB.ActiveArtifactSet, 11) as ArtifactsDB.ActiveArtifactSet[];
        }
        set active_artifact_sets(value: ArtifactsDB.ActiveArtifactSet[]) {
            pb_1.Message.setRepeatedWrapperField(this, 11, value);
        }
        get saved_artifact_sets() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactsDB.ActiveArtifactSet, 13) as ArtifactsDB.ActiveArtifactSet[];
        }
        set saved_artifact_sets(value: ArtifactsDB.ActiveArtifactSet[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get artifact_status() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactsDB.CraftableArtifact, 12) as ArtifactsDB.CraftableArtifact[];
        }
        set artifact_status(value: ArtifactsDB.CraftableArtifact[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        get fueling_mission() {
            return pb_1.Message.getWrapperField(this, MissionInfo, 14) as MissionInfo;
        }
        set fueling_mission(value: MissionInfo) {
            pb_1.Message.setWrapperField(this, 14, value);
        }
        get has_fueling_mission() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get mission_infos() {
            return pb_1.Message.getRepeatedWrapperField(this, MissionInfo, 4) as MissionInfo[];
        }
        set mission_infos(value: MissionInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get mission_archive() {
            return pb_1.Message.getRepeatedWrapperField(this, MissionInfo, 5) as MissionInfo[];
        }
        set mission_archive(value: MissionInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get discovered_artifacts_DEPRECATED() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactSpec, 8) as ArtifactSpec[];
        }
        set discovered_artifacts_DEPRECATED(value: ArtifactSpec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get craftable_artifacts_DEPRECATED() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactsDB.CraftableArtifact, 9) as ArtifactsDB.CraftableArtifact[];
        }
        set craftable_artifacts_DEPRECATED(value: ArtifactsDB.CraftableArtifact[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get crafting_counts_DEPRECATED() {
            return pb_1.Message.getRepeatedWrapperField(this, ArtifactsDB.CraftableArtifact, 10) as ArtifactsDB.CraftableArtifact[];
        }
        set crafting_counts_DEPRECATED(value: ArtifactsDB.CraftableArtifact[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        static fromObject(data: {
            inventory_items?: ReturnType<typeof ArtifactInventoryItem.prototype.toObject>[];
            item_sequence?: number;
            inventory_slots?: ReturnType<typeof InventorySlot.prototype.toObject>[];
            active_artifacts_DEPRECATED?: ReturnType<typeof ArtifactsDB.ActiveArtifactSlot.prototype.toObject>[];
            active_artifact_sets?: ReturnType<typeof ArtifactsDB.ActiveArtifactSet.prototype.toObject>[];
            saved_artifact_sets?: ReturnType<typeof ArtifactsDB.ActiveArtifactSet.prototype.toObject>[];
            artifact_status?: ReturnType<typeof ArtifactsDB.CraftableArtifact.prototype.toObject>[];
            fueling_mission?: ReturnType<typeof MissionInfo.prototype.toObject>;
            mission_infos?: ReturnType<typeof MissionInfo.prototype.toObject>[];
            mission_archive?: ReturnType<typeof MissionInfo.prototype.toObject>[];
            discovered_artifacts_DEPRECATED?: ReturnType<typeof ArtifactSpec.prototype.toObject>[];
            craftable_artifacts_DEPRECATED?: ReturnType<typeof ArtifactsDB.CraftableArtifact.prototype.toObject>[];
            crafting_counts_DEPRECATED?: ReturnType<typeof ArtifactsDB.CraftableArtifact.prototype.toObject>[];
        }): ArtifactsDB {
            const message = new ArtifactsDB({
                inventory_items: data.inventory_items.map(item => ArtifactInventoryItem.fromObject(item)),
                inventory_slots: data.inventory_slots.map(item => InventorySlot.fromObject(item)),
                active_artifacts_DEPRECATED: data.active_artifacts_DEPRECATED.map(item => ArtifactsDB.ActiveArtifactSlot.fromObject(item)),
                active_artifact_sets: data.active_artifact_sets.map(item => ArtifactsDB.ActiveArtifactSet.fromObject(item)),
                saved_artifact_sets: data.saved_artifact_sets.map(item => ArtifactsDB.ActiveArtifactSet.fromObject(item)),
                artifact_status: data.artifact_status.map(item => ArtifactsDB.CraftableArtifact.fromObject(item)),
                mission_infos: data.mission_infos.map(item => MissionInfo.fromObject(item)),
                mission_archive: data.mission_archive.map(item => MissionInfo.fromObject(item)),
                discovered_artifacts_DEPRECATED: data.discovered_artifacts_DEPRECATED.map(item => ArtifactSpec.fromObject(item)),
                craftable_artifacts_DEPRECATED: data.craftable_artifacts_DEPRECATED.map(item => ArtifactsDB.CraftableArtifact.fromObject(item)),
                crafting_counts_DEPRECATED: data.crafting_counts_DEPRECATED.map(item => ArtifactsDB.CraftableArtifact.fromObject(item))
            });
            if (data.item_sequence != null) {
                message.item_sequence = data.item_sequence;
            }
            if (data.fueling_mission != null) {
                message.fueling_mission = MissionInfo.fromObject(data.fueling_mission);
            }
            return message;
        }
        toObject() {
            const data: {
                inventory_items?: ReturnType<typeof ArtifactInventoryItem.prototype.toObject>[];
                item_sequence?: number;
                inventory_slots?: ReturnType<typeof InventorySlot.prototype.toObject>[];
                active_artifacts_DEPRECATED?: ReturnType<typeof ArtifactsDB.ActiveArtifactSlot.prototype.toObject>[];
                active_artifact_sets?: ReturnType<typeof ArtifactsDB.ActiveArtifactSet.prototype.toObject>[];
                saved_artifact_sets?: ReturnType<typeof ArtifactsDB.ActiveArtifactSet.prototype.toObject>[];
                artifact_status?: ReturnType<typeof ArtifactsDB.CraftableArtifact.prototype.toObject>[];
                fueling_mission?: ReturnType<typeof MissionInfo.prototype.toObject>;
                mission_infos?: ReturnType<typeof MissionInfo.prototype.toObject>[];
                mission_archive?: ReturnType<typeof MissionInfo.prototype.toObject>[];
                discovered_artifacts_DEPRECATED?: ReturnType<typeof ArtifactSpec.prototype.toObject>[];
                craftable_artifacts_DEPRECATED?: ReturnType<typeof ArtifactsDB.CraftableArtifact.prototype.toObject>[];
                crafting_counts_DEPRECATED?: ReturnType<typeof ArtifactsDB.CraftableArtifact.prototype.toObject>[];
            } = {};
            if (this.inventory_items != null) {
                data.inventory_items = this.inventory_items.map((item: ArtifactInventoryItem) => item.toObject());
            }
            if (this.item_sequence != null) {
                data.item_sequence = this.item_sequence;
            }
            if (this.inventory_slots != null) {
                data.inventory_slots = this.inventory_slots.map((item: InventorySlot) => item.toObject());
            }
            if (this.active_artifacts_DEPRECATED != null) {
                data.active_artifacts_DEPRECATED = this.active_artifacts_DEPRECATED.map((item: ArtifactsDB.ActiveArtifactSlot) => item.toObject());
            }
            if (this.active_artifact_sets != null) {
                data.active_artifact_sets = this.active_artifact_sets.map((item: ArtifactsDB.ActiveArtifactSet) => item.toObject());
            }
            if (this.saved_artifact_sets != null) {
                data.saved_artifact_sets = this.saved_artifact_sets.map((item: ArtifactsDB.ActiveArtifactSet) => item.toObject());
            }
            if (this.artifact_status != null) {
                data.artifact_status = this.artifact_status.map((item: ArtifactsDB.CraftableArtifact) => item.toObject());
            }
            if (this.fueling_mission != null) {
                data.fueling_mission = this.fueling_mission.toObject();
            }
            if (this.mission_infos != null) {
                data.mission_infos = this.mission_infos.map((item: MissionInfo) => item.toObject());
            }
            if (this.mission_archive != null) {
                data.mission_archive = this.mission_archive.map((item: MissionInfo) => item.toObject());
            }
            if (this.discovered_artifacts_DEPRECATED != null) {
                data.discovered_artifacts_DEPRECATED = this.discovered_artifacts_DEPRECATED.map((item: ArtifactSpec) => item.toObject());
            }
            if (this.craftable_artifacts_DEPRECATED != null) {
                data.craftable_artifacts_DEPRECATED = this.craftable_artifacts_DEPRECATED.map((item: ArtifactsDB.CraftableArtifact) => item.toObject());
            }
            if (this.crafting_counts_DEPRECATED != null) {
                data.crafting_counts_DEPRECATED = this.crafting_counts_DEPRECATED.map((item: ArtifactsDB.CraftableArtifact) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.inventory_items.length)
                writer.writeRepeatedMessage(1, this.inventory_items, (item: ArtifactInventoryItem) => item.serialize(writer));
            if (this.has_item_sequence)
                writer.writeUint64(2, this.item_sequence);
            if (this.inventory_slots.length)
                writer.writeRepeatedMessage(3, this.inventory_slots, (item: InventorySlot) => item.serialize(writer));
            if (this.active_artifacts_DEPRECATED.length)
                writer.writeRepeatedMessage(7, this.active_artifacts_DEPRECATED, (item: ArtifactsDB.ActiveArtifactSlot) => item.serialize(writer));
            if (this.active_artifact_sets.length)
                writer.writeRepeatedMessage(11, this.active_artifact_sets, (item: ArtifactsDB.ActiveArtifactSet) => item.serialize(writer));
            if (this.saved_artifact_sets.length)
                writer.writeRepeatedMessage(13, this.saved_artifact_sets, (item: ArtifactsDB.ActiveArtifactSet) => item.serialize(writer));
            if (this.artifact_status.length)
                writer.writeRepeatedMessage(12, this.artifact_status, (item: ArtifactsDB.CraftableArtifact) => item.serialize(writer));
            if (this.has_fueling_mission)
                writer.writeMessage(14, this.fueling_mission, () => this.fueling_mission.serialize(writer));
            if (this.mission_infos.length)
                writer.writeRepeatedMessage(4, this.mission_infos, (item: MissionInfo) => item.serialize(writer));
            if (this.mission_archive.length)
                writer.writeRepeatedMessage(5, this.mission_archive, (item: MissionInfo) => item.serialize(writer));
            if (this.discovered_artifacts_DEPRECATED.length)
                writer.writeRepeatedMessage(8, this.discovered_artifacts_DEPRECATED, (item: ArtifactSpec) => item.serialize(writer));
            if (this.craftable_artifacts_DEPRECATED.length)
                writer.writeRepeatedMessage(9, this.craftable_artifacts_DEPRECATED, (item: ArtifactsDB.CraftableArtifact) => item.serialize(writer));
            if (this.crafting_counts_DEPRECATED.length)
                writer.writeRepeatedMessage(10, this.crafting_counts_DEPRECATED, (item: ArtifactsDB.CraftableArtifact) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ArtifactsDB {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ArtifactsDB();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.inventory_items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ArtifactInventoryItem.deserialize(reader), ArtifactInventoryItem));
                        break;
                    case 2:
                        message.item_sequence = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.inventory_slots, () => pb_1.Message.addToRepeatedWrapperField(message, 3, InventorySlot.deserialize(reader), InventorySlot));
                        break;
                    case 7:
                        reader.readMessage(message.active_artifacts_DEPRECATED, () => pb_1.Message.addToRepeatedWrapperField(message, 7, ArtifactsDB.ActiveArtifactSlot.deserialize(reader), ArtifactsDB.ActiveArtifactSlot));
                        break;
                    case 11:
                        reader.readMessage(message.active_artifact_sets, () => pb_1.Message.addToRepeatedWrapperField(message, 11, ArtifactsDB.ActiveArtifactSet.deserialize(reader), ArtifactsDB.ActiveArtifactSet));
                        break;
                    case 13:
                        reader.readMessage(message.saved_artifact_sets, () => pb_1.Message.addToRepeatedWrapperField(message, 13, ArtifactsDB.ActiveArtifactSet.deserialize(reader), ArtifactsDB.ActiveArtifactSet));
                        break;
                    case 12:
                        reader.readMessage(message.artifact_status, () => pb_1.Message.addToRepeatedWrapperField(message, 12, ArtifactsDB.CraftableArtifact.deserialize(reader), ArtifactsDB.CraftableArtifact));
                        break;
                    case 14:
                        reader.readMessage(message.fueling_mission, () => message.fueling_mission = MissionInfo.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.mission_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 4, MissionInfo.deserialize(reader), MissionInfo));
                        break;
                    case 5:
                        reader.readMessage(message.mission_archive, () => pb_1.Message.addToRepeatedWrapperField(message, 5, MissionInfo.deserialize(reader), MissionInfo));
                        break;
                    case 8:
                        reader.readMessage(message.discovered_artifacts_DEPRECATED, () => pb_1.Message.addToRepeatedWrapperField(message, 8, ArtifactSpec.deserialize(reader), ArtifactSpec));
                        break;
                    case 9:
                        reader.readMessage(message.craftable_artifacts_DEPRECATED, () => pb_1.Message.addToRepeatedWrapperField(message, 9, ArtifactsDB.CraftableArtifact.deserialize(reader), ArtifactsDB.CraftableArtifact));
                        break;
                    case 10:
                        reader.readMessage(message.crafting_counts_DEPRECATED, () => pb_1.Message.addToRepeatedWrapperField(message, 10, ArtifactsDB.CraftableArtifact.deserialize(reader), ArtifactsDB.CraftableArtifact));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ArtifactsDB {
            return ArtifactsDB.deserialize(bytes);
        }
    }
    export namespace ArtifactsDB {
        export class ActiveArtifactSlot extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                occupied?: boolean;
                item_id?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("occupied" in data && data.occupied != undefined) {
                        this.occupied = data.occupied;
                    }
                    if ("item_id" in data && data.item_id != undefined) {
                        this.item_id = data.item_id;
                    }
                }
            }
            get occupied() {
                return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
            }
            set occupied(value: boolean) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_occupied() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get item_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set item_id(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_item_id() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                occupied?: boolean;
                item_id?: number;
            }): ActiveArtifactSlot {
                const message = new ActiveArtifactSlot({});
                if (data.occupied != null) {
                    message.occupied = data.occupied;
                }
                if (data.item_id != null) {
                    message.item_id = data.item_id;
                }
                return message;
            }
            toObject() {
                const data: {
                    occupied?: boolean;
                    item_id?: number;
                } = {};
                if (this.occupied != null) {
                    data.occupied = this.occupied;
                }
                if (this.item_id != null) {
                    data.item_id = this.item_id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_occupied)
                    writer.writeBool(1, this.occupied);
                if (this.has_item_id)
                    writer.writeUint64(2, this.item_id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActiveArtifactSlot {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActiveArtifactSlot();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.occupied = reader.readBool();
                            break;
                        case 2:
                            message.item_id = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ActiveArtifactSlot {
                return ActiveArtifactSlot.deserialize(bytes);
            }
        }
        export class ActiveArtifactSet extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                slots: ArtifactsDB.ActiveArtifactSlot[];
                uid?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    this.slots = data.slots;
                    if ("uid" in data && data.uid != undefined) {
                        this.uid = data.uid;
                    }
                }
            }
            get slots() {
                return pb_1.Message.getRepeatedWrapperField(this, ArtifactsDB.ActiveArtifactSlot, 1) as ArtifactsDB.ActiveArtifactSlot[];
            }
            set slots(value: ArtifactsDB.ActiveArtifactSlot[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get uid() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set uid(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_uid() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                slots?: ReturnType<typeof ArtifactsDB.ActiveArtifactSlot.prototype.toObject>[];
                uid?: number;
            }): ActiveArtifactSet {
                const message = new ActiveArtifactSet({
                    slots: data.slots.map(item => ArtifactsDB.ActiveArtifactSlot.fromObject(item))
                });
                if (data.uid != null) {
                    message.uid = data.uid;
                }
                return message;
            }
            toObject() {
                const data: {
                    slots?: ReturnType<typeof ArtifactsDB.ActiveArtifactSlot.prototype.toObject>[];
                    uid?: number;
                } = {};
                if (this.slots != null) {
                    data.slots = this.slots.map((item: ArtifactsDB.ActiveArtifactSlot) => item.toObject());
                }
                if (this.uid != null) {
                    data.uid = this.uid;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.slots.length)
                    writer.writeRepeatedMessage(1, this.slots, (item: ArtifactsDB.ActiveArtifactSlot) => item.serialize(writer));
                if (this.has_uid)
                    writer.writeUint32(2, this.uid);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActiveArtifactSet {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActiveArtifactSet();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.slots, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ArtifactsDB.ActiveArtifactSlot.deserialize(reader), ArtifactsDB.ActiveArtifactSlot));
                            break;
                        case 2:
                            message.uid = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ActiveArtifactSet {
                return ActiveArtifactSet.deserialize(bytes);
            }
        }
        export class CraftableArtifact extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                spec?: ArtifactSpec;
                discovered?: boolean;
                craftable?: boolean;
                recipe_discovered?: boolean;
                seen?: boolean;
                count?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("spec" in data && data.spec != undefined) {
                        this.spec = data.spec;
                    }
                    if ("discovered" in data && data.discovered != undefined) {
                        this.discovered = data.discovered;
                    }
                    if ("craftable" in data && data.craftable != undefined) {
                        this.craftable = data.craftable;
                    }
                    if ("recipe_discovered" in data && data.recipe_discovered != undefined) {
                        this.recipe_discovered = data.recipe_discovered;
                    }
                    if ("seen" in data && data.seen != undefined) {
                        this.seen = data.seen;
                    }
                    if ("count" in data && data.count != undefined) {
                        this.count = data.count;
                    }
                }
            }
            get spec() {
                return pb_1.Message.getWrapperField(this, ArtifactSpec, 1) as ArtifactSpec;
            }
            set spec(value: ArtifactSpec) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_spec() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get discovered() {
                return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
            }
            set discovered(value: boolean) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_discovered() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get craftable() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set craftable(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_craftable() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get recipe_discovered() {
                return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
            }
            set recipe_discovered(value: boolean) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_recipe_discovered() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get seen() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set seen(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_seen() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get count() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set count(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_count() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                spec?: ReturnType<typeof ArtifactSpec.prototype.toObject>;
                discovered?: boolean;
                craftable?: boolean;
                recipe_discovered?: boolean;
                seen?: boolean;
                count?: number;
            }): CraftableArtifact {
                const message = new CraftableArtifact({});
                if (data.spec != null) {
                    message.spec = ArtifactSpec.fromObject(data.spec);
                }
                if (data.discovered != null) {
                    message.discovered = data.discovered;
                }
                if (data.craftable != null) {
                    message.craftable = data.craftable;
                }
                if (data.recipe_discovered != null) {
                    message.recipe_discovered = data.recipe_discovered;
                }
                if (data.seen != null) {
                    message.seen = data.seen;
                }
                if (data.count != null) {
                    message.count = data.count;
                }
                return message;
            }
            toObject() {
                const data: {
                    spec?: ReturnType<typeof ArtifactSpec.prototype.toObject>;
                    discovered?: boolean;
                    craftable?: boolean;
                    recipe_discovered?: boolean;
                    seen?: boolean;
                    count?: number;
                } = {};
                if (this.spec != null) {
                    data.spec = this.spec.toObject();
                }
                if (this.discovered != null) {
                    data.discovered = this.discovered;
                }
                if (this.craftable != null) {
                    data.craftable = this.craftable;
                }
                if (this.recipe_discovered != null) {
                    data.recipe_discovered = this.recipe_discovered;
                }
                if (this.seen != null) {
                    data.seen = this.seen;
                }
                if (this.count != null) {
                    data.count = this.count;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_spec)
                    writer.writeMessage(1, this.spec, () => this.spec.serialize(writer));
                if (this.has_discovered)
                    writer.writeBool(6, this.discovered);
                if (this.has_craftable)
                    writer.writeBool(4, this.craftable);
                if (this.has_recipe_discovered)
                    writer.writeBool(5, this.recipe_discovered);
                if (this.has_seen)
                    writer.writeBool(2, this.seen);
                if (this.has_count)
                    writer.writeUint32(3, this.count);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CraftableArtifact {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CraftableArtifact();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.spec, () => message.spec = ArtifactSpec.deserialize(reader));
                            break;
                        case 6:
                            message.discovered = reader.readBool();
                            break;
                        case 4:
                            message.craftable = reader.readBool();
                            break;
                        case 5:
                            message.recipe_discovered = reader.readBool();
                            break;
                        case 2:
                            message.seen = reader.readBool();
                            break;
                        case 3:
                            message.count = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): CraftableArtifact {
                return CraftableArtifact.deserialize(bytes);
            }
        }
    }
    export class AuthenticatedMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: Uint8Array;
            version?: number;
            code?: string;
            compressed?: boolean;
            original_size?: number;
            user_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("code" in data && data.code != undefined) {
                    this.code = data.code;
                }
                if ("compressed" in data && data.compressed != undefined) {
                    this.compressed = data.compressed;
                }
                if ("original_size" in data && data.original_size != undefined) {
                    this.original_size = data.original_size;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set message(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set version(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_version() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get code() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set code(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_code() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get compressed() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set compressed(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_compressed() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get original_size() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set original_size(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_original_size() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            message?: Uint8Array;
            version?: number;
            code?: string;
            compressed?: boolean;
            original_size?: number;
            user_id?: string;
        }): AuthenticatedMessage {
            const message = new AuthenticatedMessage({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.code != null) {
                message.code = data.code;
            }
            if (data.compressed != null) {
                message.compressed = data.compressed;
            }
            if (data.original_size != null) {
                message.original_size = data.original_size;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: Uint8Array;
                version?: number;
                code?: string;
                compressed?: boolean;
                original_size?: number;
                user_id?: string;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.code != null) {
                data.code = this.code;
            }
            if (this.compressed != null) {
                data.compressed = this.compressed;
            }
            if (this.original_size != null) {
                data.original_size = this.original_size;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_message && this.message.length)
                writer.writeBytes(1, this.message);
            if (this.has_version)
                writer.writeUint32(3, this.version);
            if (this.has_code && this.code.length)
                writer.writeString(2, this.code);
            if (this.has_compressed)
                writer.writeBool(4, this.compressed);
            if (this.has_original_size)
                writer.writeUint32(5, this.original_size);
            if (this.has_user_id && this.user_id.length)
                writer.writeString(6, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticatedMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticatedMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readBytes();
                        break;
                    case 3:
                        message.version = reader.readUint32();
                        break;
                    case 2:
                        message.code = reader.readString();
                        break;
                    case 4:
                        message.compressed = reader.readBool();
                        break;
                    case 5:
                        message.original_size = reader.readUint32();
                        break;
                    case 6:
                        message.user_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticatedMessage {
            return AuthenticatedMessage.deserialize(bytes);
        }
    }
    export class LogCompleteMissionPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            req?: MissionRequest;
            res?: CompleteMissionResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("req" in data && data.req != undefined) {
                    this.req = data.req;
                }
                if ("res" in data && data.res != undefined) {
                    this.res = data.res;
                }
            }
        }
        get req() {
            return pb_1.Message.getWrapperField(this, MissionRequest, 1) as MissionRequest;
        }
        set req(value: MissionRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_req() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get res() {
            return pb_1.Message.getWrapperField(this, CompleteMissionResponse, 2) as CompleteMissionResponse;
        }
        set res(value: CompleteMissionResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_res() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            req?: ReturnType<typeof MissionRequest.prototype.toObject>;
            res?: ReturnType<typeof CompleteMissionResponse.prototype.toObject>;
        }): LogCompleteMissionPayload {
            const message = new LogCompleteMissionPayload({});
            if (data.req != null) {
                message.req = MissionRequest.fromObject(data.req);
            }
            if (data.res != null) {
                message.res = CompleteMissionResponse.fromObject(data.res);
            }
            return message;
        }
        toObject() {
            const data: {
                req?: ReturnType<typeof MissionRequest.prototype.toObject>;
                res?: ReturnType<typeof CompleteMissionResponse.prototype.toObject>;
            } = {};
            if (this.req != null) {
                data.req = this.req.toObject();
            }
            if (this.res != null) {
                data.res = this.res.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_req)
                writer.writeMessage(1, this.req, () => this.req.serialize(writer));
            if (this.has_res)
                writer.writeMessage(2, this.res, () => this.res.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogCompleteMissionPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogCompleteMissionPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.req, () => message.req = MissionRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.res, () => message.res = CompleteMissionResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogCompleteMissionPayload {
            return LogCompleteMissionPayload.deserialize(bytes);
        }
    }
    export class LogCraftArtifactPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            req?: CraftArtifactRequest;
            res?: CraftArtifactResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("req" in data && data.req != undefined) {
                    this.req = data.req;
                }
                if ("res" in data && data.res != undefined) {
                    this.res = data.res;
                }
            }
        }
        get req() {
            return pb_1.Message.getWrapperField(this, CraftArtifactRequest, 1) as CraftArtifactRequest;
        }
        set req(value: CraftArtifactRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_req() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get res() {
            return pb_1.Message.getWrapperField(this, CraftArtifactResponse, 2) as CraftArtifactResponse;
        }
        set res(value: CraftArtifactResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_res() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            req?: ReturnType<typeof CraftArtifactRequest.prototype.toObject>;
            res?: ReturnType<typeof CraftArtifactResponse.prototype.toObject>;
        }): LogCraftArtifactPayload {
            const message = new LogCraftArtifactPayload({});
            if (data.req != null) {
                message.req = CraftArtifactRequest.fromObject(data.req);
            }
            if (data.res != null) {
                message.res = CraftArtifactResponse.fromObject(data.res);
            }
            return message;
        }
        toObject() {
            const data: {
                req?: ReturnType<typeof CraftArtifactRequest.prototype.toObject>;
                res?: ReturnType<typeof CraftArtifactResponse.prototype.toObject>;
            } = {};
            if (this.req != null) {
                data.req = this.req.toObject();
            }
            if (this.res != null) {
                data.res = this.res.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_req)
                writer.writeMessage(1, this.req, () => this.req.serialize(writer));
            if (this.has_res)
                writer.writeMessage(2, this.res, () => this.res.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogCraftArtifactPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogCraftArtifactPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.req, () => message.req = CraftArtifactRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.res, () => message.res = CraftArtifactResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogCraftArtifactPayload {
            return LogCraftArtifactPayload.deserialize(bytes);
        }
    }
    export class LogConsumeArtifactPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            req?: ConsumeArtifactRequest;
            res?: ConsumeArtifactResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("req" in data && data.req != undefined) {
                    this.req = data.req;
                }
                if ("res" in data && data.res != undefined) {
                    this.res = data.res;
                }
            }
        }
        get req() {
            return pb_1.Message.getWrapperField(this, ConsumeArtifactRequest, 1) as ConsumeArtifactRequest;
        }
        set req(value: ConsumeArtifactRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_req() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get res() {
            return pb_1.Message.getWrapperField(this, ConsumeArtifactResponse, 2) as ConsumeArtifactResponse;
        }
        set res(value: ConsumeArtifactResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_res() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            req?: ReturnType<typeof ConsumeArtifactRequest.prototype.toObject>;
            res?: ReturnType<typeof ConsumeArtifactResponse.prototype.toObject>;
        }): LogConsumeArtifactPayload {
            const message = new LogConsumeArtifactPayload({});
            if (data.req != null) {
                message.req = ConsumeArtifactRequest.fromObject(data.req);
            }
            if (data.res != null) {
                message.res = ConsumeArtifactResponse.fromObject(data.res);
            }
            return message;
        }
        toObject() {
            const data: {
                req?: ReturnType<typeof ConsumeArtifactRequest.prototype.toObject>;
                res?: ReturnType<typeof ConsumeArtifactResponse.prototype.toObject>;
            } = {};
            if (this.req != null) {
                data.req = this.req.toObject();
            }
            if (this.res != null) {
                data.res = this.res.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_req)
                writer.writeMessage(1, this.req, () => this.req.serialize(writer));
            if (this.has_res)
                writer.writeMessage(2, this.res, () => this.res.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogConsumeArtifactPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogConsumeArtifactPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.req, () => message.req = ConsumeArtifactRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.res, () => message.res = ConsumeArtifactResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogConsumeArtifactPayload {
            return LogConsumeArtifactPayload.deserialize(bytes);
        }
    }
    export class LogSetArtifactPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            req?: SetArtifactRequest;
            res?: SetArtifactResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("req" in data && data.req != undefined) {
                    this.req = data.req;
                }
                if ("res" in data && data.res != undefined) {
                    this.res = data.res;
                }
            }
        }
        get req() {
            return pb_1.Message.getWrapperField(this, SetArtifactRequest, 1) as SetArtifactRequest;
        }
        set req(value: SetArtifactRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_req() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get res() {
            return pb_1.Message.getWrapperField(this, SetArtifactResponse, 2) as SetArtifactResponse;
        }
        set res(value: SetArtifactResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_res() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            req?: ReturnType<typeof SetArtifactRequest.prototype.toObject>;
            res?: ReturnType<typeof SetArtifactResponse.prototype.toObject>;
        }): LogSetArtifactPayload {
            const message = new LogSetArtifactPayload({});
            if (data.req != null) {
                message.req = SetArtifactRequest.fromObject(data.req);
            }
            if (data.res != null) {
                message.res = SetArtifactResponse.fromObject(data.res);
            }
            return message;
        }
        toObject() {
            const data: {
                req?: ReturnType<typeof SetArtifactRequest.prototype.toObject>;
                res?: ReturnType<typeof SetArtifactResponse.prototype.toObject>;
            } = {};
            if (this.req != null) {
                data.req = this.req.toObject();
            }
            if (this.res != null) {
                data.res = this.res.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_req)
                writer.writeMessage(1, this.req, () => this.req.serialize(writer));
            if (this.has_res)
                writer.writeMessage(2, this.res, () => this.res.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LogSetArtifactPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LogSetArtifactPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.req, () => message.req = SetArtifactRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.res, () => message.res = SetArtifactResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LogSetArtifactPayload {
            return LogSetArtifactPayload.deserialize(bytes);
        }
    }
    export class AccountTransferPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from_id?: string;
            to_ei_user_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from_id" in data && data.from_id != undefined) {
                    this.from_id = data.from_id;
                }
                if ("to_ei_user_id" in data && data.to_ei_user_id != undefined) {
                    this.to_ei_user_id = data.to_ei_user_id;
                }
            }
        }
        get from_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set from_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_from_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get to_ei_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set to_ei_user_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_to_ei_user_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            from_id?: string;
            to_ei_user_id?: string;
        }): AccountTransferPayload {
            const message = new AccountTransferPayload({});
            if (data.from_id != null) {
                message.from_id = data.from_id;
            }
            if (data.to_ei_user_id != null) {
                message.to_ei_user_id = data.to_ei_user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                from_id?: string;
                to_ei_user_id?: string;
            } = {};
            if (this.from_id != null) {
                data.from_id = this.from_id;
            }
            if (this.to_ei_user_id != null) {
                data.to_ei_user_id = this.to_ei_user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_from_id && this.from_id.length)
                writer.writeString(1, this.from_id);
            if (this.has_to_ei_user_id && this.to_ei_user_id.length)
                writer.writeString(2, this.to_ei_user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountTransferPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountTransferPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.from_id = reader.readString();
                        break;
                    case 2:
                        message.to_ei_user_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountTransferPayload {
            return AccountTransferPayload.deserialize(bytes);
        }
    }
    export class SaveBackupResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
            error_code?: number;
            message?: string;
            existing_backup?: Backup;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error_code" in data && data.error_code != undefined) {
                    this.error_code = data.error_code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("existing_backup" in data && data.existing_backup != undefined) {
                    this.existing_backup = data.existing_backup;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_success() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get error_code() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set error_code(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_error_code() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_message() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get existing_backup() {
            return pb_1.Message.getWrapperField(this, Backup, 4) as Backup;
        }
        set existing_backup(value: Backup) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_existing_backup() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            success?: boolean;
            error_code?: number;
            message?: string;
            existing_backup?: ReturnType<typeof Backup.prototype.toObject>;
        }): SaveBackupResponse {
            const message = new SaveBackupResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error_code != null) {
                message.error_code = data.error_code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.existing_backup != null) {
                message.existing_backup = Backup.fromObject(data.existing_backup);
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
                error_code?: number;
                message?: string;
                existing_backup?: ReturnType<typeof Backup.prototype.toObject>;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error_code != null) {
                data.error_code = this.error_code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.existing_backup != null) {
                data.existing_backup = this.existing_backup.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_success)
                writer.writeBool(1, this.success);
            if (this.has_error_code)
                writer.writeUint32(2, this.error_code);
            if (this.has_message && this.message.length)
                writer.writeString(3, this.message);
            if (this.has_existing_backup)
                writer.writeMessage(4, this.existing_backup, () => this.existing_backup.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SaveBackupResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SaveBackupResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    case 2:
                        message.error_code = reader.readUint32();
                        break;
                    case 3:
                        message.message = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.existing_backup, () => message.existing_backup = Backup.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SaveBackupResponse {
            return SaveBackupResponse.deserialize(bytes);
        }
    }
    export namespace SaveBackupResponse {
        export enum ErrorCodes {
            NO_ERROR = 0,
            USER_NOT_FOUND = 1,
            COULD_NOT_OVERWRITE = 2,
            BACKUP_OFFERED = 3,
            BAD_USER_ID = 4
        }
    }
    export class CleanAccountRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ei_user_id_to_keep?: string;
            game_services_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ei_user_id_to_keep" in data && data.ei_user_id_to_keep != undefined) {
                    this.ei_user_id_to_keep = data.ei_user_id_to_keep;
                }
                if ("game_services_id" in data && data.game_services_id != undefined) {
                    this.game_services_id = data.game_services_id;
                }
            }
        }
        get ei_user_id_to_keep() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ei_user_id_to_keep(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_ei_user_id_to_keep() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get game_services_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set game_services_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_game_services_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            ei_user_id_to_keep?: string;
            game_services_id?: string;
        }): CleanAccountRequest {
            const message = new CleanAccountRequest({});
            if (data.ei_user_id_to_keep != null) {
                message.ei_user_id_to_keep = data.ei_user_id_to_keep;
            }
            if (data.game_services_id != null) {
                message.game_services_id = data.game_services_id;
            }
            return message;
        }
        toObject() {
            const data: {
                ei_user_id_to_keep?: string;
                game_services_id?: string;
            } = {};
            if (this.ei_user_id_to_keep != null) {
                data.ei_user_id_to_keep = this.ei_user_id_to_keep;
            }
            if (this.game_services_id != null) {
                data.game_services_id = this.game_services_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ei_user_id_to_keep && this.ei_user_id_to_keep.length)
                writer.writeString(1, this.ei_user_id_to_keep);
            if (this.has_game_services_id && this.game_services_id.length)
                writer.writeString(2, this.game_services_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CleanAccountRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CleanAccountRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ei_user_id_to_keep = reader.readString();
                        break;
                    case 2:
                        message.game_services_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CleanAccountRequest {
            return CleanAccountRequest.deserialize(bytes);
        }
    }
    export class ReturnEDTPayload extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            ei_user_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("ei_user_id" in data && data.ei_user_id != undefined) {
                    this.ei_user_id = data.ei_user_id;
                }
            }
        }
        get ei_user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set ei_user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_ei_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            ei_user_id?: string;
        }): ReturnEDTPayload {
            const message = new ReturnEDTPayload({});
            if (data.ei_user_id != null) {
                message.ei_user_id = data.ei_user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                ei_user_id?: string;
            } = {};
            if (this.ei_user_id != null) {
                data.ei_user_id = this.ei_user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_ei_user_id && this.ei_user_id.length)
                writer.writeString(1, this.ei_user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReturnEDTPayload {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReturnEDTPayload();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.ei_user_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ReturnEDTPayload {
            return ReturnEDTPayload.deserialize(bytes);
        }
    }
    export class DLCItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            directory?: string;
            ext?: string;
            compressed?: boolean;
            original_size?: number;
            url?: string;
            checksum?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("directory" in data && data.directory != undefined) {
                    this.directory = data.directory;
                }
                if ("ext" in data && data.ext != undefined) {
                    this.ext = data.ext;
                }
                if ("compressed" in data && data.compressed != undefined) {
                    this.compressed = data.compressed;
                }
                if ("original_size" in data && data.original_size != undefined) {
                    this.original_size = data.original_size;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("checksum" in data && data.checksum != undefined) {
                    this.checksum = data.checksum;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get directory() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set directory(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_directory() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get ext() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set ext(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_ext() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get compressed() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set compressed(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_compressed() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get original_size() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set original_size(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_original_size() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_url() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get checksum() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set checksum(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_checksum() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            name?: string;
            directory?: string;
            ext?: string;
            compressed?: boolean;
            original_size?: number;
            url?: string;
            checksum?: string;
        }): DLCItem {
            const message = new DLCItem({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.directory != null) {
                message.directory = data.directory;
            }
            if (data.ext != null) {
                message.ext = data.ext;
            }
            if (data.compressed != null) {
                message.compressed = data.compressed;
            }
            if (data.original_size != null) {
                message.original_size = data.original_size;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.checksum != null) {
                message.checksum = data.checksum;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                directory?: string;
                ext?: string;
                compressed?: boolean;
                original_size?: number;
                url?: string;
                checksum?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.directory != null) {
                data.directory = this.directory;
            }
            if (this.ext != null) {
                data.ext = this.ext;
            }
            if (this.compressed != null) {
                data.compressed = this.compressed;
            }
            if (this.original_size != null) {
                data.original_size = this.original_size;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.checksum != null) {
                data.checksum = this.checksum;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_name && this.name.length)
                writer.writeString(1, this.name);
            if (this.has_directory && this.directory.length)
                writer.writeString(2, this.directory);
            if (this.has_ext && this.ext.length)
                writer.writeString(3, this.ext);
            if (this.has_compressed)
                writer.writeBool(6, this.compressed);
            if (this.has_original_size)
                writer.writeUint64(7, this.original_size);
            if (this.has_url && this.url.length)
                writer.writeString(4, this.url);
            if (this.has_checksum && this.checksum.length)
                writer.writeString(5, this.checksum);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DLCItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DLCItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.directory = reader.readString();
                        break;
                    case 3:
                        message.ext = reader.readString();
                        break;
                    case 6:
                        message.compressed = reader.readBool();
                        break;
                    case 7:
                        message.original_size = reader.readUint64();
                        break;
                    case 4:
                        message.url = reader.readString();
                        break;
                    case 5:
                        message.checksum = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DLCItem {
            return DLCItem.deserialize(bytes);
        }
    }
    export class ShellSpec extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            identifier?: string;
            primary_piece?: ShellSpec.ShellPiece;
            pieces: ShellSpec.ShellPiece[];
            alt_assets: DLCItem[];
            name?: string;
            set_identifier?: string;
            modified_geometry?: boolean;
            price?: number;
            required_eop?: number;
            required_soul_eggs?: number;
            required_parent_shell?: string;
            is_new?: boolean;
            expires?: boolean;
            seconds_until_available?: number;
            seconds_remaining?: number;
            popularity?: number;
            default_appearance?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11, 18], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("identifier" in data && data.identifier != undefined) {
                    this.identifier = data.identifier;
                }
                if ("primary_piece" in data && data.primary_piece != undefined) {
                    this.primary_piece = data.primary_piece;
                }
                this.pieces = data.pieces;
                this.alt_assets = data.alt_assets;
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("set_identifier" in data && data.set_identifier != undefined) {
                    this.set_identifier = data.set_identifier;
                }
                if ("modified_geometry" in data && data.modified_geometry != undefined) {
                    this.modified_geometry = data.modified_geometry;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("required_eop" in data && data.required_eop != undefined) {
                    this.required_eop = data.required_eop;
                }
                if ("required_soul_eggs" in data && data.required_soul_eggs != undefined) {
                    this.required_soul_eggs = data.required_soul_eggs;
                }
                if ("required_parent_shell" in data && data.required_parent_shell != undefined) {
                    this.required_parent_shell = data.required_parent_shell;
                }
                if ("is_new" in data && data.is_new != undefined) {
                    this.is_new = data.is_new;
                }
                if ("expires" in data && data.expires != undefined) {
                    this.expires = data.expires;
                }
                if ("seconds_until_available" in data && data.seconds_until_available != undefined) {
                    this.seconds_until_available = data.seconds_until_available;
                }
                if ("seconds_remaining" in data && data.seconds_remaining != undefined) {
                    this.seconds_remaining = data.seconds_remaining;
                }
                if ("popularity" in data && data.popularity != undefined) {
                    this.popularity = data.popularity;
                }
                if ("default_appearance" in data && data.default_appearance != undefined) {
                    this.default_appearance = data.default_appearance;
                }
            }
        }
        get identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get primary_piece() {
            return pb_1.Message.getWrapperField(this, ShellSpec.ShellPiece, 12) as ShellSpec.ShellPiece;
        }
        set primary_piece(value: ShellSpec.ShellPiece) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_primary_piece() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get pieces() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellSpec.ShellPiece, 11) as ShellSpec.ShellPiece[];
        }
        set pieces(value: ShellSpec.ShellPiece[]) {
            pb_1.Message.setRepeatedWrapperField(this, 11, value);
        }
        get alt_assets() {
            return pb_1.Message.getRepeatedWrapperField(this, DLCItem, 18) as DLCItem[];
        }
        set alt_assets(value: DLCItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 18, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get set_identifier() {
            return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
        }
        set set_identifier(value: string) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_set_identifier() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get modified_geometry() {
            return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
        }
        set modified_geometry(value: boolean) {
            pb_1.Message.setField(this, 19, value);
        }
        get has_modified_geometry() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_price() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get required_eop() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set required_eop(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_required_eop() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get required_soul_eggs() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set required_soul_eggs(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_required_soul_eggs() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get required_parent_shell() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set required_parent_shell(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get has_required_parent_shell() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get is_new() {
            return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
        }
        set is_new(value: boolean) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_is_new() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get expires() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set expires(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_expires() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get seconds_until_available() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set seconds_until_available(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get has_seconds_until_available() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get seconds_remaining() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set seconds_remaining(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_seconds_remaining() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get popularity() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set popularity(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get has_popularity() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get default_appearance() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set default_appearance(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_default_appearance() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            identifier?: string;
            primary_piece?: ReturnType<typeof ShellSpec.ShellPiece.prototype.toObject>;
            pieces?: ReturnType<typeof ShellSpec.ShellPiece.prototype.toObject>[];
            alt_assets?: ReturnType<typeof DLCItem.prototype.toObject>[];
            name?: string;
            set_identifier?: string;
            modified_geometry?: boolean;
            price?: number;
            required_eop?: number;
            required_soul_eggs?: number;
            required_parent_shell?: string;
            is_new?: boolean;
            expires?: boolean;
            seconds_until_available?: number;
            seconds_remaining?: number;
            popularity?: number;
            default_appearance?: boolean;
        }): ShellSpec {
            const message = new ShellSpec({
                pieces: data.pieces.map(item => ShellSpec.ShellPiece.fromObject(item)),
                alt_assets: data.alt_assets.map(item => DLCItem.fromObject(item))
            });
            if (data.identifier != null) {
                message.identifier = data.identifier;
            }
            if (data.primary_piece != null) {
                message.primary_piece = ShellSpec.ShellPiece.fromObject(data.primary_piece);
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.set_identifier != null) {
                message.set_identifier = data.set_identifier;
            }
            if (data.modified_geometry != null) {
                message.modified_geometry = data.modified_geometry;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.required_eop != null) {
                message.required_eop = data.required_eop;
            }
            if (data.required_soul_eggs != null) {
                message.required_soul_eggs = data.required_soul_eggs;
            }
            if (data.required_parent_shell != null) {
                message.required_parent_shell = data.required_parent_shell;
            }
            if (data.is_new != null) {
                message.is_new = data.is_new;
            }
            if (data.expires != null) {
                message.expires = data.expires;
            }
            if (data.seconds_until_available != null) {
                message.seconds_until_available = data.seconds_until_available;
            }
            if (data.seconds_remaining != null) {
                message.seconds_remaining = data.seconds_remaining;
            }
            if (data.popularity != null) {
                message.popularity = data.popularity;
            }
            if (data.default_appearance != null) {
                message.default_appearance = data.default_appearance;
            }
            return message;
        }
        toObject() {
            const data: {
                identifier?: string;
                primary_piece?: ReturnType<typeof ShellSpec.ShellPiece.prototype.toObject>;
                pieces?: ReturnType<typeof ShellSpec.ShellPiece.prototype.toObject>[];
                alt_assets?: ReturnType<typeof DLCItem.prototype.toObject>[];
                name?: string;
                set_identifier?: string;
                modified_geometry?: boolean;
                price?: number;
                required_eop?: number;
                required_soul_eggs?: number;
                required_parent_shell?: string;
                is_new?: boolean;
                expires?: boolean;
                seconds_until_available?: number;
                seconds_remaining?: number;
                popularity?: number;
                default_appearance?: boolean;
            } = {};
            if (this.identifier != null) {
                data.identifier = this.identifier;
            }
            if (this.primary_piece != null) {
                data.primary_piece = this.primary_piece.toObject();
            }
            if (this.pieces != null) {
                data.pieces = this.pieces.map((item: ShellSpec.ShellPiece) => item.toObject());
            }
            if (this.alt_assets != null) {
                data.alt_assets = this.alt_assets.map((item: DLCItem) => item.toObject());
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.set_identifier != null) {
                data.set_identifier = this.set_identifier;
            }
            if (this.modified_geometry != null) {
                data.modified_geometry = this.modified_geometry;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.required_eop != null) {
                data.required_eop = this.required_eop;
            }
            if (this.required_soul_eggs != null) {
                data.required_soul_eggs = this.required_soul_eggs;
            }
            if (this.required_parent_shell != null) {
                data.required_parent_shell = this.required_parent_shell;
            }
            if (this.is_new != null) {
                data.is_new = this.is_new;
            }
            if (this.expires != null) {
                data.expires = this.expires;
            }
            if (this.seconds_until_available != null) {
                data.seconds_until_available = this.seconds_until_available;
            }
            if (this.seconds_remaining != null) {
                data.seconds_remaining = this.seconds_remaining;
            }
            if (this.popularity != null) {
                data.popularity = this.popularity;
            }
            if (this.default_appearance != null) {
                data.default_appearance = this.default_appearance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_identifier && this.identifier.length)
                writer.writeString(1, this.identifier);
            if (this.has_primary_piece)
                writer.writeMessage(12, this.primary_piece, () => this.primary_piece.serialize(writer));
            if (this.pieces.length)
                writer.writeRepeatedMessage(11, this.pieces, (item: ShellSpec.ShellPiece) => item.serialize(writer));
            if (this.alt_assets.length)
                writer.writeRepeatedMessage(18, this.alt_assets, (item: DLCItem) => item.serialize(writer));
            if (this.has_name && this.name.length)
                writer.writeString(3, this.name);
            if (this.has_set_identifier && this.set_identifier.length)
                writer.writeString(13, this.set_identifier);
            if (this.has_modified_geometry)
                writer.writeBool(19, this.modified_geometry);
            if (this.has_price)
                writer.writeUint32(4, this.price);
            if (this.has_required_eop)
                writer.writeUint32(5, this.required_eop);
            if (this.has_required_soul_eggs)
                writer.writeDouble(6, this.required_soul_eggs);
            if (this.has_required_parent_shell && this.required_parent_shell.length)
                writer.writeString(20, this.required_parent_shell);
            if (this.has_is_new)
                writer.writeBool(14, this.is_new);
            if (this.has_expires)
                writer.writeBool(15, this.expires);
            if (this.has_seconds_until_available)
                writer.writeDouble(17, this.seconds_until_available);
            if (this.has_seconds_remaining)
                writer.writeDouble(16, this.seconds_remaining);
            if (this.has_popularity)
                writer.writeUint64(21, this.popularity);
            if (this.has_default_appearance)
                writer.writeBool(8, this.default_appearance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellSpec {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellSpec();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.identifier = reader.readString();
                        break;
                    case 12:
                        reader.readMessage(message.primary_piece, () => message.primary_piece = ShellSpec.ShellPiece.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.pieces, () => pb_1.Message.addToRepeatedWrapperField(message, 11, ShellSpec.ShellPiece.deserialize(reader), ShellSpec.ShellPiece));
                        break;
                    case 18:
                        reader.readMessage(message.alt_assets, () => pb_1.Message.addToRepeatedWrapperField(message, 18, DLCItem.deserialize(reader), DLCItem));
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 13:
                        message.set_identifier = reader.readString();
                        break;
                    case 19:
                        message.modified_geometry = reader.readBool();
                        break;
                    case 4:
                        message.price = reader.readUint32();
                        break;
                    case 5:
                        message.required_eop = reader.readUint32();
                        break;
                    case 6:
                        message.required_soul_eggs = reader.readDouble();
                        break;
                    case 20:
                        message.required_parent_shell = reader.readString();
                        break;
                    case 14:
                        message.is_new = reader.readBool();
                        break;
                    case 15:
                        message.expires = reader.readBool();
                        break;
                    case 17:
                        message.seconds_until_available = reader.readDouble();
                        break;
                    case 16:
                        message.seconds_remaining = reader.readDouble();
                        break;
                    case 21:
                        message.popularity = reader.readUint64();
                        break;
                    case 8:
                        message.default_appearance = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShellSpec {
            return ShellSpec.deserialize(bytes);
        }
    }
    export namespace ShellSpec {
        export enum AssetType {
            COOP = 1,
            SHACK = 2,
            SUPER_SHACK = 3,
            SHORT_HOUSE = 4,
            THE_STANDARD = 5,
            LONG_HOUSE = 6,
            DOUBLE_DECKER = 7,
            WAREHOUSE = 8,
            CENTER = 9,
            BUNKER = 10,
            EGGKEA = 11,
            HAB_1K = 12,
            HANGAR = 13,
            TOWER = 14,
            HAB_10K = 15,
            EGGTOPIA = 16,
            MONOLITH = 17,
            PLANET_PORTAL = 18,
            CHICKEN_UNIVERSE = 19,
            SILO_0_SMALL = 50,
            SILO_0_MED = 51,
            SILO_0_LARGE = 52,
            SILO_1_SMALL = 53,
            SILO_1_MED = 54,
            SILO_1_LARGE = 55,
            SILO_ALL = 59,
            MAILBOX = 70,
            TROPHY_CASE = 71,
            GROUND = 72,
            HARDSCAPE = 73,
            HYPERLOOP = 74,
            DEPOT_1 = 100,
            DEPOT_2 = 101,
            DEPOT_3 = 102,
            DEPOT_4 = 103,
            DEPOT_5 = 104,
            DEPOT_6 = 105,
            DEPOT_7 = 106,
            LAB_1 = 110,
            LAB_2 = 111,
            LAB_3 = 112,
            LAB_4 = 113,
            LAB_5 = 114,
            LAB_6 = 115,
            HATCHERY_EDIBLE = 120,
            HATCHERY_SUPERFOOD = 121,
            HATCHERY_MEDICAL = 122,
            HATCHERY_ROCKET_FUEL = 123,
            HATCHERY_SUPERMATERIAL = 124,
            HATCHERY_FUSION = 125,
            HATCHERY_QUANTUM = 126,
            HATCHERY_IMMORTALITY = 127,
            HATCHERY_TACHYON = 128,
            HATCHERY_GRAVITON = 129,
            HATCHERY_DILITHIUM = 130,
            HATCHERY_PRODIGY = 131,
            HATCHERY_TERRAFORM = 132,
            HATCHERY_ANTIMATTER = 133,
            HATCHERY_DARK_MATTER = 134,
            HATCHERY_AI = 135,
            HATCHERY_NEBULA = 136,
            HATCHERY_UNIVERSE = 137,
            HATCHERY_ENLIGHTENMENT = 138,
            HATCHERY_CHOCOLATE = 139,
            HATCHERY_EASTER = 140,
            HATCHERY_WATERBALLOON = 141,
            HATCHERY_FIREWORK = 142,
            HATCHERY_PUMPKIN = 143,
            HATCHERY_CUSTOM = 150,
            HOA_1 = 170,
            HOA_2 = 171,
            HOA_3 = 172,
            MISSION_CONTROL_1 = 180,
            MISSION_CONTROL_2 = 181,
            MISSION_CONTROL_3 = 182,
            FUEL_TANK_1 = 200,
            FUEL_TANK_2 = 201,
            FUEL_TANK_3 = 202,
            FUEL_TANK_4 = 203,
            HATCHERY_GRAVITON_TOP = 500,
            HATCHERY_NEBULA_MIDDLE = 501,
            HATCHERY_NEBULA_TOP = 502,
            HATCHERY_DARK_MATTER_RING_1 = 505,
            HATCHERY_DARK_MATTER_RING_2 = 506,
            HATCHERY_DARK_MATTER_RING_3 = 507,
            HATCHERY_AI_TOP_1 = 510,
            HATCHERY_AI_TOP_2 = 511,
            HATCHERY_AI_TOP_3 = 512,
            HATCHERY_AI_TOP_4 = 513,
            HATCHERY_UNIVERSE_PROBE = 515,
            HATCHERY_UNIVERSE_BOLT = 516,
            HATCHERY_ENLIGHTENMENT_ORB = 520,
            HYPERLOOP_TRACK = 570,
            MAILBOX_FULL = 600,
            CHICKEN = 1000,
            HAT = 1010,
            UNKNOWN = 9999
        }
        export class ShellPiece extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                asset_type?: ShellSpec.AssetType;
                dlc?: DLCItem;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("asset_type" in data && data.asset_type != undefined) {
                        this.asset_type = data.asset_type;
                    }
                    if ("dlc" in data && data.dlc != undefined) {
                        this.dlc = data.dlc;
                    }
                }
            }
            get asset_type() {
                return pb_1.Message.getFieldWithDefault(this, 1, ShellSpec.AssetType.COOP) as ShellSpec.AssetType;
            }
            set asset_type(value: ShellSpec.AssetType) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_asset_type() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get dlc() {
                return pb_1.Message.getWrapperField(this, DLCItem, 2) as DLCItem;
            }
            set dlc(value: DLCItem) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_dlc() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                asset_type?: ShellSpec.AssetType;
                dlc?: ReturnType<typeof DLCItem.prototype.toObject>;
            }): ShellPiece {
                const message = new ShellPiece({});
                if (data.asset_type != null) {
                    message.asset_type = data.asset_type;
                }
                if (data.dlc != null) {
                    message.dlc = DLCItem.fromObject(data.dlc);
                }
                return message;
            }
            toObject() {
                const data: {
                    asset_type?: ShellSpec.AssetType;
                    dlc?: ReturnType<typeof DLCItem.prototype.toObject>;
                } = {};
                if (this.asset_type != null) {
                    data.asset_type = this.asset_type;
                }
                if (this.dlc != null) {
                    data.dlc = this.dlc.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_asset_type)
                    writer.writeEnum(1, this.asset_type);
                if (this.has_dlc)
                    writer.writeMessage(2, this.dlc, () => this.dlc.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellPiece {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellPiece();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.asset_type = reader.readEnum();
                            break;
                        case 2:
                            reader.readMessage(message.dlc, () => message.dlc = DLCItem.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ShellPiece {
                return ShellPiece.deserialize(bytes);
            }
        }
    }
    export class ShellSetSpec extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            identifier?: string;
            name?: string;
            price?: number;
            price_mult_DEPRECATED?: number;
            discount?: number;
            required_eop?: number;
            required_soul_eggs?: number;
            required_parent_set?: string;
            is_new?: boolean;
            expires?: boolean;
            seconds_until_available?: number;
            seconds_remaining?: number;
            popularity?: number;
            decorator?: boolean;
            modified_geometry?: boolean;
            element_set?: boolean;
            hex_base_color?: string;
            variations: ShellSetSpec.VariationSpec[];
            icon?: DLCItem;
            default_appearance?: boolean;
            custom_appearance?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [15], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("identifier" in data && data.identifier != undefined) {
                    this.identifier = data.identifier;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("price_mult_DEPRECATED" in data && data.price_mult_DEPRECATED != undefined) {
                    this.price_mult_DEPRECATED = data.price_mult_DEPRECATED;
                }
                if ("discount" in data && data.discount != undefined) {
                    this.discount = data.discount;
                }
                if ("required_eop" in data && data.required_eop != undefined) {
                    this.required_eop = data.required_eop;
                }
                if ("required_soul_eggs" in data && data.required_soul_eggs != undefined) {
                    this.required_soul_eggs = data.required_soul_eggs;
                }
                if ("required_parent_set" in data && data.required_parent_set != undefined) {
                    this.required_parent_set = data.required_parent_set;
                }
                if ("is_new" in data && data.is_new != undefined) {
                    this.is_new = data.is_new;
                }
                if ("expires" in data && data.expires != undefined) {
                    this.expires = data.expires;
                }
                if ("seconds_until_available" in data && data.seconds_until_available != undefined) {
                    this.seconds_until_available = data.seconds_until_available;
                }
                if ("seconds_remaining" in data && data.seconds_remaining != undefined) {
                    this.seconds_remaining = data.seconds_remaining;
                }
                if ("popularity" in data && data.popularity != undefined) {
                    this.popularity = data.popularity;
                }
                if ("decorator" in data && data.decorator != undefined) {
                    this.decorator = data.decorator;
                }
                if ("modified_geometry" in data && data.modified_geometry != undefined) {
                    this.modified_geometry = data.modified_geometry;
                }
                if ("element_set" in data && data.element_set != undefined) {
                    this.element_set = data.element_set;
                }
                if ("hex_base_color" in data && data.hex_base_color != undefined) {
                    this.hex_base_color = data.hex_base_color;
                }
                this.variations = data.variations;
                if ("icon" in data && data.icon != undefined) {
                    this.icon = data.icon;
                }
                if ("default_appearance" in data && data.default_appearance != undefined) {
                    this.default_appearance = data.default_appearance;
                }
                if ("custom_appearance" in data && data.custom_appearance != undefined) {
                    this.custom_appearance = data.custom_appearance;
                }
            }
        }
        get identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_price() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get price_mult_DEPRECATED() {
            return pb_1.Message.getFieldWithDefault(this, 8, 1) as number;
        }
        set price_mult_DEPRECATED(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_price_mult_DEPRECATED() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get discount() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set discount(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get has_discount() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get required_eop() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set required_eop(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_required_eop() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get required_soul_eggs() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set required_soul_eggs(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_required_soul_eggs() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get required_parent_set() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set required_parent_set(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get has_required_parent_set() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get is_new() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set is_new(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_is_new() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get expires() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set expires(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_expires() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get seconds_until_available() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set seconds_until_available(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get has_seconds_until_available() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get seconds_remaining() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set seconds_remaining(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_seconds_remaining() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get popularity() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set popularity(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get has_popularity() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get decorator() {
            return pb_1.Message.getFieldWithDefault(this, 14, false) as boolean;
        }
        set decorator(value: boolean) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_decorator() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get modified_geometry() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set modified_geometry(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_modified_geometry() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get element_set() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set element_set(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_element_set() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get hex_base_color() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set hex_base_color(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_hex_base_color() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get variations() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellSetSpec.VariationSpec, 15) as ShellSetSpec.VariationSpec[];
        }
        set variations(value: ShellSetSpec.VariationSpec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 15, value);
        }
        get icon() {
            return pb_1.Message.getWrapperField(this, DLCItem, 19) as DLCItem;
        }
        set icon(value: DLCItem) {
            pb_1.Message.setWrapperField(this, 19, value);
        }
        get has_icon() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get default_appearance() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set default_appearance(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_default_appearance() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get custom_appearance() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set custom_appearance(value: boolean) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_custom_appearance() {
            return pb_1.Message.getField(this, 12) != null;
        }
        static fromObject(data: {
            identifier?: string;
            name?: string;
            price?: number;
            price_mult_DEPRECATED?: number;
            discount?: number;
            required_eop?: number;
            required_soul_eggs?: number;
            required_parent_set?: string;
            is_new?: boolean;
            expires?: boolean;
            seconds_until_available?: number;
            seconds_remaining?: number;
            popularity?: number;
            decorator?: boolean;
            modified_geometry?: boolean;
            element_set?: boolean;
            hex_base_color?: string;
            variations?: ReturnType<typeof ShellSetSpec.VariationSpec.prototype.toObject>[];
            icon?: ReturnType<typeof DLCItem.prototype.toObject>;
            default_appearance?: boolean;
            custom_appearance?: boolean;
        }): ShellSetSpec {
            const message = new ShellSetSpec({
                variations: data.variations.map(item => ShellSetSpec.VariationSpec.fromObject(item))
            });
            if (data.identifier != null) {
                message.identifier = data.identifier;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.price_mult_DEPRECATED != null) {
                message.price_mult_DEPRECATED = data.price_mult_DEPRECATED;
            }
            if (data.discount != null) {
                message.discount = data.discount;
            }
            if (data.required_eop != null) {
                message.required_eop = data.required_eop;
            }
            if (data.required_soul_eggs != null) {
                message.required_soul_eggs = data.required_soul_eggs;
            }
            if (data.required_parent_set != null) {
                message.required_parent_set = data.required_parent_set;
            }
            if (data.is_new != null) {
                message.is_new = data.is_new;
            }
            if (data.expires != null) {
                message.expires = data.expires;
            }
            if (data.seconds_until_available != null) {
                message.seconds_until_available = data.seconds_until_available;
            }
            if (data.seconds_remaining != null) {
                message.seconds_remaining = data.seconds_remaining;
            }
            if (data.popularity != null) {
                message.popularity = data.popularity;
            }
            if (data.decorator != null) {
                message.decorator = data.decorator;
            }
            if (data.modified_geometry != null) {
                message.modified_geometry = data.modified_geometry;
            }
            if (data.element_set != null) {
                message.element_set = data.element_set;
            }
            if (data.hex_base_color != null) {
                message.hex_base_color = data.hex_base_color;
            }
            if (data.icon != null) {
                message.icon = DLCItem.fromObject(data.icon);
            }
            if (data.default_appearance != null) {
                message.default_appearance = data.default_appearance;
            }
            if (data.custom_appearance != null) {
                message.custom_appearance = data.custom_appearance;
            }
            return message;
        }
        toObject() {
            const data: {
                identifier?: string;
                name?: string;
                price?: number;
                price_mult_DEPRECATED?: number;
                discount?: number;
                required_eop?: number;
                required_soul_eggs?: number;
                required_parent_set?: string;
                is_new?: boolean;
                expires?: boolean;
                seconds_until_available?: number;
                seconds_remaining?: number;
                popularity?: number;
                decorator?: boolean;
                modified_geometry?: boolean;
                element_set?: boolean;
                hex_base_color?: string;
                variations?: ReturnType<typeof ShellSetSpec.VariationSpec.prototype.toObject>[];
                icon?: ReturnType<typeof DLCItem.prototype.toObject>;
                default_appearance?: boolean;
                custom_appearance?: boolean;
            } = {};
            if (this.identifier != null) {
                data.identifier = this.identifier;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.price_mult_DEPRECATED != null) {
                data.price_mult_DEPRECATED = this.price_mult_DEPRECATED;
            }
            if (this.discount != null) {
                data.discount = this.discount;
            }
            if (this.required_eop != null) {
                data.required_eop = this.required_eop;
            }
            if (this.required_soul_eggs != null) {
                data.required_soul_eggs = this.required_soul_eggs;
            }
            if (this.required_parent_set != null) {
                data.required_parent_set = this.required_parent_set;
            }
            if (this.is_new != null) {
                data.is_new = this.is_new;
            }
            if (this.expires != null) {
                data.expires = this.expires;
            }
            if (this.seconds_until_available != null) {
                data.seconds_until_available = this.seconds_until_available;
            }
            if (this.seconds_remaining != null) {
                data.seconds_remaining = this.seconds_remaining;
            }
            if (this.popularity != null) {
                data.popularity = this.popularity;
            }
            if (this.decorator != null) {
                data.decorator = this.decorator;
            }
            if (this.modified_geometry != null) {
                data.modified_geometry = this.modified_geometry;
            }
            if (this.element_set != null) {
                data.element_set = this.element_set;
            }
            if (this.hex_base_color != null) {
                data.hex_base_color = this.hex_base_color;
            }
            if (this.variations != null) {
                data.variations = this.variations.map((item: ShellSetSpec.VariationSpec) => item.toObject());
            }
            if (this.icon != null) {
                data.icon = this.icon.toObject();
            }
            if (this.default_appearance != null) {
                data.default_appearance = this.default_appearance;
            }
            if (this.custom_appearance != null) {
                data.custom_appearance = this.custom_appearance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_identifier && this.identifier.length)
                writer.writeString(1, this.identifier);
            if (this.has_name && this.name.length)
                writer.writeString(2, this.name);
            if (this.has_price)
                writer.writeUint32(3, this.price);
            if (this.has_price_mult_DEPRECATED)
                writer.writeDouble(8, this.price_mult_DEPRECATED);
            if (this.has_discount)
                writer.writeDouble(17, this.discount);
            if (this.has_required_eop)
                writer.writeUint32(4, this.required_eop);
            if (this.has_required_soul_eggs)
                writer.writeDouble(5, this.required_soul_eggs);
            if (this.has_required_parent_set && this.required_parent_set.length)
                writer.writeString(20, this.required_parent_set);
            if (this.has_is_new)
                writer.writeBool(9, this.is_new);
            if (this.has_expires)
                writer.writeBool(10, this.expires);
            if (this.has_seconds_until_available)
                writer.writeDouble(18, this.seconds_until_available);
            if (this.has_seconds_remaining)
                writer.writeDouble(11, this.seconds_remaining);
            if (this.has_popularity)
                writer.writeUint64(21, this.popularity);
            if (this.has_decorator)
                writer.writeBool(14, this.decorator);
            if (this.has_modified_geometry)
                writer.writeBool(13, this.modified_geometry);
            if (this.has_element_set)
                writer.writeBool(7, this.element_set);
            if (this.has_hex_base_color && this.hex_base_color.length)
                writer.writeString(16, this.hex_base_color);
            if (this.variations.length)
                writer.writeRepeatedMessage(15, this.variations, (item: ShellSetSpec.VariationSpec) => item.serialize(writer));
            if (this.has_icon)
                writer.writeMessage(19, this.icon, () => this.icon.serialize(writer));
            if (this.has_default_appearance)
                writer.writeBool(6, this.default_appearance);
            if (this.has_custom_appearance)
                writer.writeBool(12, this.custom_appearance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellSetSpec {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellSetSpec();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.identifier = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.price = reader.readUint32();
                        break;
                    case 8:
                        message.price_mult_DEPRECATED = reader.readDouble();
                        break;
                    case 17:
                        message.discount = reader.readDouble();
                        break;
                    case 4:
                        message.required_eop = reader.readUint32();
                        break;
                    case 5:
                        message.required_soul_eggs = reader.readDouble();
                        break;
                    case 20:
                        message.required_parent_set = reader.readString();
                        break;
                    case 9:
                        message.is_new = reader.readBool();
                        break;
                    case 10:
                        message.expires = reader.readBool();
                        break;
                    case 18:
                        message.seconds_until_available = reader.readDouble();
                        break;
                    case 11:
                        message.seconds_remaining = reader.readDouble();
                        break;
                    case 21:
                        message.popularity = reader.readUint64();
                        break;
                    case 14:
                        message.decorator = reader.readBool();
                        break;
                    case 13:
                        message.modified_geometry = reader.readBool();
                        break;
                    case 7:
                        message.element_set = reader.readBool();
                        break;
                    case 16:
                        message.hex_base_color = reader.readString();
                        break;
                    case 15:
                        reader.readMessage(message.variations, () => pb_1.Message.addToRepeatedWrapperField(message, 15, ShellSetSpec.VariationSpec.deserialize(reader), ShellSetSpec.VariationSpec));
                        break;
                    case 19:
                        reader.readMessage(message.icon, () => message.icon = DLCItem.deserialize(reader));
                        break;
                    case 6:
                        message.default_appearance = reader.readBool();
                        break;
                    case 12:
                        message.custom_appearance = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShellSetSpec {
            return ShellSetSpec.deserialize(bytes);
        }
    }
    export namespace ShellSetSpec {
        export class VariationSpec extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                identifier?: string;
                hex_color?: string;
                price?: number;
                sort_priority?: number;
                default_appearance?: boolean;
                custom_appearance?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("identifier" in data && data.identifier != undefined) {
                        this.identifier = data.identifier;
                    }
                    if ("hex_color" in data && data.hex_color != undefined) {
                        this.hex_color = data.hex_color;
                    }
                    if ("price" in data && data.price != undefined) {
                        this.price = data.price;
                    }
                    if ("sort_priority" in data && data.sort_priority != undefined) {
                        this.sort_priority = data.sort_priority;
                    }
                    if ("default_appearance" in data && data.default_appearance != undefined) {
                        this.default_appearance = data.default_appearance;
                    }
                    if ("custom_appearance" in data && data.custom_appearance != undefined) {
                        this.custom_appearance = data.custom_appearance;
                    }
                }
            }
            get identifier() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set identifier(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_identifier() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get hex_color() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set hex_color(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_hex_color() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get price() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set price(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_price() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get sort_priority() {
                return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
            }
            set sort_priority(value: number) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_sort_priority() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get default_appearance() {
                return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
            }
            set default_appearance(value: boolean) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_default_appearance() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get custom_appearance() {
                return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
            }
            set custom_appearance(value: boolean) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_custom_appearance() {
                return pb_1.Message.getField(this, 5) != null;
            }
            static fromObject(data: {
                identifier?: string;
                hex_color?: string;
                price?: number;
                sort_priority?: number;
                default_appearance?: boolean;
                custom_appearance?: boolean;
            }): VariationSpec {
                const message = new VariationSpec({});
                if (data.identifier != null) {
                    message.identifier = data.identifier;
                }
                if (data.hex_color != null) {
                    message.hex_color = data.hex_color;
                }
                if (data.price != null) {
                    message.price = data.price;
                }
                if (data.sort_priority != null) {
                    message.sort_priority = data.sort_priority;
                }
                if (data.default_appearance != null) {
                    message.default_appearance = data.default_appearance;
                }
                if (data.custom_appearance != null) {
                    message.custom_appearance = data.custom_appearance;
                }
                return message;
            }
            toObject() {
                const data: {
                    identifier?: string;
                    hex_color?: string;
                    price?: number;
                    sort_priority?: number;
                    default_appearance?: boolean;
                    custom_appearance?: boolean;
                } = {};
                if (this.identifier != null) {
                    data.identifier = this.identifier;
                }
                if (this.hex_color != null) {
                    data.hex_color = this.hex_color;
                }
                if (this.price != null) {
                    data.price = this.price;
                }
                if (this.sort_priority != null) {
                    data.sort_priority = this.sort_priority;
                }
                if (this.default_appearance != null) {
                    data.default_appearance = this.default_appearance;
                }
                if (this.custom_appearance != null) {
                    data.custom_appearance = this.custom_appearance;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_identifier && this.identifier.length)
                    writer.writeString(1, this.identifier);
                if (this.has_hex_color && this.hex_color.length)
                    writer.writeString(2, this.hex_color);
                if (this.has_price)
                    writer.writeUint32(3, this.price);
                if (this.has_sort_priority)
                    writer.writeInt32(6, this.sort_priority);
                if (this.has_default_appearance)
                    writer.writeBool(4, this.default_appearance);
                if (this.has_custom_appearance)
                    writer.writeBool(5, this.custom_appearance);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VariationSpec {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VariationSpec();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.identifier = reader.readString();
                            break;
                        case 2:
                            message.hex_color = reader.readString();
                            break;
                        case 3:
                            message.price = reader.readUint32();
                            break;
                        case 6:
                            message.sort_priority = reader.readInt32();
                            break;
                        case 4:
                            message.default_appearance = reader.readBool();
                            break;
                        case 5:
                            message.custom_appearance = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): VariationSpec {
                return VariationSpec.deserialize(bytes);
            }
        }
    }
    export class ShellObjectSpec extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            identifier?: string;
            name?: string;
            asset_type?: ShellSpec.AssetType;
            object_class?: string;
            icon_colors: string[];
            price?: number;
            required_eop?: number;
            required_soul_eggs?: number;
            is_new?: boolean;
            expires?: boolean;
            seconds_until_available?: number;
            seconds_remaining?: number;
            popularity?: number;
            metadata: number[];
            no_hats?: boolean;
            chicken_animation?: ShellObjectSpec.ChickenAnimation;
            sort_priority?: number;
            pieces: ShellObjectSpec.LODPiece[];
            default_appearance?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [15, 7, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("identifier" in data && data.identifier != undefined) {
                    this.identifier = data.identifier;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("asset_type" in data && data.asset_type != undefined) {
                    this.asset_type = data.asset_type;
                }
                if ("object_class" in data && data.object_class != undefined) {
                    this.object_class = data.object_class;
                }
                this.icon_colors = data.icon_colors;
                if ("price" in data && data.price != undefined) {
                    this.price = data.price;
                }
                if ("required_eop" in data && data.required_eop != undefined) {
                    this.required_eop = data.required_eop;
                }
                if ("required_soul_eggs" in data && data.required_soul_eggs != undefined) {
                    this.required_soul_eggs = data.required_soul_eggs;
                }
                if ("is_new" in data && data.is_new != undefined) {
                    this.is_new = data.is_new;
                }
                if ("expires" in data && data.expires != undefined) {
                    this.expires = data.expires;
                }
                if ("seconds_until_available" in data && data.seconds_until_available != undefined) {
                    this.seconds_until_available = data.seconds_until_available;
                }
                if ("seconds_remaining" in data && data.seconds_remaining != undefined) {
                    this.seconds_remaining = data.seconds_remaining;
                }
                if ("popularity" in data && data.popularity != undefined) {
                    this.popularity = data.popularity;
                }
                this.metadata = data.metadata;
                if ("no_hats" in data && data.no_hats != undefined) {
                    this.no_hats = data.no_hats;
                }
                if ("chicken_animation" in data && data.chicken_animation != undefined) {
                    this.chicken_animation = data.chicken_animation;
                }
                if ("sort_priority" in data && data.sort_priority != undefined) {
                    this.sort_priority = data.sort_priority;
                }
                this.pieces = data.pieces;
                if ("default_appearance" in data && data.default_appearance != undefined) {
                    this.default_appearance = data.default_appearance;
                }
            }
        }
        get identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get asset_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, ShellSpec.AssetType.COOP) as ShellSpec.AssetType;
        }
        set asset_type(value: ShellSpec.AssetType) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_asset_type() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get object_class() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set object_class(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_object_class() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get icon_colors() {
            return pb_1.Message.getFieldWithDefault(this, 15, []) as string[];
        }
        set icon_colors(value: string[]) {
            pb_1.Message.setField(this, 15, value);
        }
        get price() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set price(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_price() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get required_eop() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set required_eop(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_required_eop() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get required_soul_eggs() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set required_soul_eggs(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_required_soul_eggs() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get is_new() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set is_new(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_is_new() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get expires() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set expires(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_expires() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get seconds_until_available() {
            return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
        }
        set seconds_until_available(value: number) {
            pb_1.Message.setField(this, 18, value);
        }
        get has_seconds_until_available() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get seconds_remaining() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set seconds_remaining(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_seconds_remaining() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get popularity() {
            return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
        }
        set popularity(value: number) {
            pb_1.Message.setField(this, 19, value);
        }
        get has_popularity() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get metadata() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as number[];
        }
        set metadata(value: number[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get no_hats() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set no_hats(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_no_hats() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get chicken_animation() {
            return pb_1.Message.getFieldWithDefault(this, 16, ShellObjectSpec.ChickenAnimation.STANDARD_RUN) as ShellObjectSpec.ChickenAnimation;
        }
        set chicken_animation(value: ShellObjectSpec.ChickenAnimation) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_chicken_animation() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get sort_priority() {
            return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
        }
        set sort_priority(value: number) {
            pb_1.Message.setField(this, 17, value);
        }
        get has_sort_priority() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get pieces() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellObjectSpec.LODPiece, 8) as ShellObjectSpec.LODPiece[];
        }
        set pieces(value: ShellObjectSpec.LODPiece[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get default_appearance() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set default_appearance(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_default_appearance() {
            return pb_1.Message.getField(this, 9) != null;
        }
        static fromObject(data: {
            identifier?: string;
            name?: string;
            asset_type?: ShellSpec.AssetType;
            object_class?: string;
            icon_colors: string[];
            price?: number;
            required_eop?: number;
            required_soul_eggs?: number;
            is_new?: boolean;
            expires?: boolean;
            seconds_until_available?: number;
            seconds_remaining?: number;
            popularity?: number;
            metadata: number[];
            no_hats?: boolean;
            chicken_animation?: ShellObjectSpec.ChickenAnimation;
            sort_priority?: number;
            pieces?: ReturnType<typeof ShellObjectSpec.LODPiece.prototype.toObject>[];
            default_appearance?: boolean;
        }): ShellObjectSpec {
            const message = new ShellObjectSpec({
                icon_colors: data.icon_colors,
                metadata: data.metadata,
                pieces: data.pieces.map(item => ShellObjectSpec.LODPiece.fromObject(item))
            });
            if (data.identifier != null) {
                message.identifier = data.identifier;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.asset_type != null) {
                message.asset_type = data.asset_type;
            }
            if (data.object_class != null) {
                message.object_class = data.object_class;
            }
            if (data.price != null) {
                message.price = data.price;
            }
            if (data.required_eop != null) {
                message.required_eop = data.required_eop;
            }
            if (data.required_soul_eggs != null) {
                message.required_soul_eggs = data.required_soul_eggs;
            }
            if (data.is_new != null) {
                message.is_new = data.is_new;
            }
            if (data.expires != null) {
                message.expires = data.expires;
            }
            if (data.seconds_until_available != null) {
                message.seconds_until_available = data.seconds_until_available;
            }
            if (data.seconds_remaining != null) {
                message.seconds_remaining = data.seconds_remaining;
            }
            if (data.popularity != null) {
                message.popularity = data.popularity;
            }
            if (data.no_hats != null) {
                message.no_hats = data.no_hats;
            }
            if (data.chicken_animation != null) {
                message.chicken_animation = data.chicken_animation;
            }
            if (data.sort_priority != null) {
                message.sort_priority = data.sort_priority;
            }
            if (data.default_appearance != null) {
                message.default_appearance = data.default_appearance;
            }
            return message;
        }
        toObject() {
            const data: {
                identifier?: string;
                name?: string;
                asset_type?: ShellSpec.AssetType;
                object_class?: string;
                icon_colors: string[];
                price?: number;
                required_eop?: number;
                required_soul_eggs?: number;
                is_new?: boolean;
                expires?: boolean;
                seconds_until_available?: number;
                seconds_remaining?: number;
                popularity?: number;
                metadata: number[];
                no_hats?: boolean;
                chicken_animation?: ShellObjectSpec.ChickenAnimation;
                sort_priority?: number;
                pieces?: ReturnType<typeof ShellObjectSpec.LODPiece.prototype.toObject>[];
                default_appearance?: boolean;
            } = {
                icon_colors: this.icon_colors,
                metadata: this.metadata
            };
            if (this.identifier != null) {
                data.identifier = this.identifier;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.asset_type != null) {
                data.asset_type = this.asset_type;
            }
            if (this.object_class != null) {
                data.object_class = this.object_class;
            }
            if (this.price != null) {
                data.price = this.price;
            }
            if (this.required_eop != null) {
                data.required_eop = this.required_eop;
            }
            if (this.required_soul_eggs != null) {
                data.required_soul_eggs = this.required_soul_eggs;
            }
            if (this.is_new != null) {
                data.is_new = this.is_new;
            }
            if (this.expires != null) {
                data.expires = this.expires;
            }
            if (this.seconds_until_available != null) {
                data.seconds_until_available = this.seconds_until_available;
            }
            if (this.seconds_remaining != null) {
                data.seconds_remaining = this.seconds_remaining;
            }
            if (this.popularity != null) {
                data.popularity = this.popularity;
            }
            if (this.no_hats != null) {
                data.no_hats = this.no_hats;
            }
            if (this.chicken_animation != null) {
                data.chicken_animation = this.chicken_animation;
            }
            if (this.sort_priority != null) {
                data.sort_priority = this.sort_priority;
            }
            if (this.pieces != null) {
                data.pieces = this.pieces.map((item: ShellObjectSpec.LODPiece) => item.toObject());
            }
            if (this.default_appearance != null) {
                data.default_appearance = this.default_appearance;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_identifier && this.identifier.length)
                writer.writeString(1, this.identifier);
            if (this.has_name && this.name.length)
                writer.writeString(2, this.name);
            if (this.has_asset_type)
                writer.writeEnum(3, this.asset_type);
            if (this.has_object_class && this.object_class.length)
                writer.writeString(14, this.object_class);
            if (this.icon_colors.length)
                writer.writeRepeatedString(15, this.icon_colors);
            if (this.has_price)
                writer.writeUint32(4, this.price);
            if (this.has_required_eop)
                writer.writeUint32(5, this.required_eop);
            if (this.has_required_soul_eggs)
                writer.writeDouble(6, this.required_soul_eggs);
            if (this.has_is_new)
                writer.writeBool(10, this.is_new);
            if (this.has_expires)
                writer.writeBool(11, this.expires);
            if (this.has_seconds_until_available)
                writer.writeDouble(18, this.seconds_until_available);
            if (this.has_seconds_remaining)
                writer.writeDouble(12, this.seconds_remaining);
            if (this.has_popularity)
                writer.writeUint64(19, this.popularity);
            if (this.metadata.length)
                writer.writeRepeatedDouble(7, this.metadata);
            if (this.has_no_hats)
                writer.writeBool(13, this.no_hats);
            if (this.has_chicken_animation)
                writer.writeEnum(16, this.chicken_animation);
            if (this.has_sort_priority)
                writer.writeInt32(17, this.sort_priority);
            if (this.pieces.length)
                writer.writeRepeatedMessage(8, this.pieces, (item: ShellObjectSpec.LODPiece) => item.serialize(writer));
            if (this.has_default_appearance)
                writer.writeBool(9, this.default_appearance);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellObjectSpec {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellObjectSpec();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.identifier = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.asset_type = reader.readEnum();
                        break;
                    case 14:
                        message.object_class = reader.readString();
                        break;
                    case 15:
                        pb_1.Message.addToRepeatedField(message, 15, reader.readString());
                        break;
                    case 4:
                        message.price = reader.readUint32();
                        break;
                    case 5:
                        message.required_eop = reader.readUint32();
                        break;
                    case 6:
                        message.required_soul_eggs = reader.readDouble();
                        break;
                    case 10:
                        message.is_new = reader.readBool();
                        break;
                    case 11:
                        message.expires = reader.readBool();
                        break;
                    case 18:
                        message.seconds_until_available = reader.readDouble();
                        break;
                    case 12:
                        message.seconds_remaining = reader.readDouble();
                        break;
                    case 19:
                        message.popularity = reader.readUint64();
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readDouble());
                        break;
                    case 13:
                        message.no_hats = reader.readBool();
                        break;
                    case 16:
                        message.chicken_animation = reader.readEnum();
                        break;
                    case 17:
                        message.sort_priority = reader.readInt32();
                        break;
                    case 8:
                        reader.readMessage(message.pieces, () => pb_1.Message.addToRepeatedWrapperField(message, 8, ShellObjectSpec.LODPiece.deserialize(reader), ShellObjectSpec.LODPiece));
                        break;
                    case 9:
                        message.default_appearance = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShellObjectSpec {
            return ShellObjectSpec.deserialize(bytes);
        }
    }
    export namespace ShellObjectSpec {
        export enum ChickenAnimation {
            STANDARD_RUN = 0,
            SLOWMO = 7,
            WOBBLE = 1,
            WOBBLE_LEAN = 5,
            SMOOTH = 2,
            SMOOTH_LEAN = 6,
            HOVER = 3,
            SIDEWAYS_SMOOTH = 4,
            SIDEWAYS_LEAN = 8
        }
        export class LODPiece extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                dlc?: DLCItem;
                lod?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("dlc" in data && data.dlc != undefined) {
                        this.dlc = data.dlc;
                    }
                    if ("lod" in data && data.lod != undefined) {
                        this.lod = data.lod;
                    }
                }
            }
            get dlc() {
                return pb_1.Message.getWrapperField(this, DLCItem, 1) as DLCItem;
            }
            set dlc(value: DLCItem) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_dlc() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get lod() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set lod(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_lod() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                dlc?: ReturnType<typeof DLCItem.prototype.toObject>;
                lod?: number;
            }): LODPiece {
                const message = new LODPiece({});
                if (data.dlc != null) {
                    message.dlc = DLCItem.fromObject(data.dlc);
                }
                if (data.lod != null) {
                    message.lod = data.lod;
                }
                return message;
            }
            toObject() {
                const data: {
                    dlc?: ReturnType<typeof DLCItem.prototype.toObject>;
                    lod?: number;
                } = {};
                if (this.dlc != null) {
                    data.dlc = this.dlc.toObject();
                }
                if (this.lod != null) {
                    data.lod = this.lod;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_dlc)
                    writer.writeMessage(1, this.dlc, () => this.dlc.serialize(writer));
                if (this.has_lod)
                    writer.writeUint32(2, this.lod);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LODPiece {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LODPiece();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.dlc, () => message.dlc = DLCItem.deserialize(reader));
                            break;
                        case 2:
                            message.lod = reader.readUint32();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): LODPiece {
                return LODPiece.deserialize(bytes);
            }
        }
    }
    export class ShellGroupSpec extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            identifier?: string;
            name?: string;
            asset_type?: ShellSpec.AssetType;
            member_ids: string[];
            price_mult_DEPRECATED?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("identifier" in data && data.identifier != undefined) {
                    this.identifier = data.identifier;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("asset_type" in data && data.asset_type != undefined) {
                    this.asset_type = data.asset_type;
                }
                this.member_ids = data.member_ids;
                if ("price_mult_DEPRECATED" in data && data.price_mult_DEPRECATED != undefined) {
                    this.price_mult_DEPRECATED = data.price_mult_DEPRECATED;
                }
            }
        }
        get identifier() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set identifier(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_identifier() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get asset_type() {
            return pb_1.Message.getFieldWithDefault(this, 5, ShellSpec.AssetType.COOP) as ShellSpec.AssetType;
        }
        set asset_type(value: ShellSpec.AssetType) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_asset_type() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get member_ids() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set member_ids(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get price_mult_DEPRECATED() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set price_mult_DEPRECATED(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_price_mult_DEPRECATED() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            identifier?: string;
            name?: string;
            asset_type?: ShellSpec.AssetType;
            member_ids: string[];
            price_mult_DEPRECATED?: number;
        }): ShellGroupSpec {
            const message = new ShellGroupSpec({
                member_ids: data.member_ids
            });
            if (data.identifier != null) {
                message.identifier = data.identifier;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.asset_type != null) {
                message.asset_type = data.asset_type;
            }
            if (data.price_mult_DEPRECATED != null) {
                message.price_mult_DEPRECATED = data.price_mult_DEPRECATED;
            }
            return message;
        }
        toObject() {
            const data: {
                identifier?: string;
                name?: string;
                asset_type?: ShellSpec.AssetType;
                member_ids: string[];
                price_mult_DEPRECATED?: number;
            } = {
                member_ids: this.member_ids
            };
            if (this.identifier != null) {
                data.identifier = this.identifier;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.asset_type != null) {
                data.asset_type = this.asset_type;
            }
            if (this.price_mult_DEPRECATED != null) {
                data.price_mult_DEPRECATED = this.price_mult_DEPRECATED;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_identifier && this.identifier.length)
                writer.writeString(1, this.identifier);
            if (this.has_name && this.name.length)
                writer.writeString(2, this.name);
            if (this.has_asset_type)
                writer.writeEnum(5, this.asset_type);
            if (this.member_ids.length)
                writer.writeRepeatedString(3, this.member_ids);
            if (this.has_price_mult_DEPRECATED)
                writer.writeDouble(4, this.price_mult_DEPRECATED);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellGroupSpec {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellGroupSpec();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.identifier = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 5:
                        message.asset_type = reader.readEnum();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.price_mult_DEPRECATED = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShellGroupSpec {
            return ShellGroupSpec.deserialize(bytes);
        }
    }
    export class DLCCatalog extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            items: DLCItem[];
            shells: ShellSpec[];
            shell_sets: ShellSetSpec[];
            decorators: ShellSetSpec[];
            shell_objects: ShellObjectSpec[];
            shell_groups: ShellGroupSpec[];
            shells_showcase_last_featured_time?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3, 6, 4, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.items = data.items;
                this.shells = data.shells;
                this.shell_sets = data.shell_sets;
                this.decorators = data.decorators;
                this.shell_objects = data.shell_objects;
                this.shell_groups = data.shell_groups;
                if ("shells_showcase_last_featured_time" in data && data.shells_showcase_last_featured_time != undefined) {
                    this.shells_showcase_last_featured_time = data.shells_showcase_last_featured_time;
                }
            }
        }
        get items() {
            return pb_1.Message.getRepeatedWrapperField(this, DLCItem, 1) as DLCItem[];
        }
        set items(value: DLCItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get shells() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellSpec, 2) as ShellSpec[];
        }
        set shells(value: ShellSpec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get shell_sets() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellSetSpec, 3) as ShellSetSpec[];
        }
        set shell_sets(value: ShellSetSpec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get decorators() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellSetSpec, 6) as ShellSetSpec[];
        }
        set decorators(value: ShellSetSpec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get shell_objects() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellObjectSpec, 4) as ShellObjectSpec[];
        }
        set shell_objects(value: ShellObjectSpec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get shell_groups() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellGroupSpec, 5) as ShellGroupSpec[];
        }
        set shell_groups(value: ShellGroupSpec[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get shells_showcase_last_featured_time() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set shells_showcase_last_featured_time(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_shells_showcase_last_featured_time() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            items?: ReturnType<typeof DLCItem.prototype.toObject>[];
            shells?: ReturnType<typeof ShellSpec.prototype.toObject>[];
            shell_sets?: ReturnType<typeof ShellSetSpec.prototype.toObject>[];
            decorators?: ReturnType<typeof ShellSetSpec.prototype.toObject>[];
            shell_objects?: ReturnType<typeof ShellObjectSpec.prototype.toObject>[];
            shell_groups?: ReturnType<typeof ShellGroupSpec.prototype.toObject>[];
            shells_showcase_last_featured_time?: number;
        }): DLCCatalog {
            const message = new DLCCatalog({
                items: data.items.map(item => DLCItem.fromObject(item)),
                shells: data.shells.map(item => ShellSpec.fromObject(item)),
                shell_sets: data.shell_sets.map(item => ShellSetSpec.fromObject(item)),
                decorators: data.decorators.map(item => ShellSetSpec.fromObject(item)),
                shell_objects: data.shell_objects.map(item => ShellObjectSpec.fromObject(item)),
                shell_groups: data.shell_groups.map(item => ShellGroupSpec.fromObject(item))
            });
            if (data.shells_showcase_last_featured_time != null) {
                message.shells_showcase_last_featured_time = data.shells_showcase_last_featured_time;
            }
            return message;
        }
        toObject() {
            const data: {
                items?: ReturnType<typeof DLCItem.prototype.toObject>[];
                shells?: ReturnType<typeof ShellSpec.prototype.toObject>[];
                shell_sets?: ReturnType<typeof ShellSetSpec.prototype.toObject>[];
                decorators?: ReturnType<typeof ShellSetSpec.prototype.toObject>[];
                shell_objects?: ReturnType<typeof ShellObjectSpec.prototype.toObject>[];
                shell_groups?: ReturnType<typeof ShellGroupSpec.prototype.toObject>[];
                shells_showcase_last_featured_time?: number;
            } = {};
            if (this.items != null) {
                data.items = this.items.map((item: DLCItem) => item.toObject());
            }
            if (this.shells != null) {
                data.shells = this.shells.map((item: ShellSpec) => item.toObject());
            }
            if (this.shell_sets != null) {
                data.shell_sets = this.shell_sets.map((item: ShellSetSpec) => item.toObject());
            }
            if (this.decorators != null) {
                data.decorators = this.decorators.map((item: ShellSetSpec) => item.toObject());
            }
            if (this.shell_objects != null) {
                data.shell_objects = this.shell_objects.map((item: ShellObjectSpec) => item.toObject());
            }
            if (this.shell_groups != null) {
                data.shell_groups = this.shell_groups.map((item: ShellGroupSpec) => item.toObject());
            }
            if (this.shells_showcase_last_featured_time != null) {
                data.shells_showcase_last_featured_time = this.shells_showcase_last_featured_time;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.items.length)
                writer.writeRepeatedMessage(1, this.items, (item: DLCItem) => item.serialize(writer));
            if (this.shells.length)
                writer.writeRepeatedMessage(2, this.shells, (item: ShellSpec) => item.serialize(writer));
            if (this.shell_sets.length)
                writer.writeRepeatedMessage(3, this.shell_sets, (item: ShellSetSpec) => item.serialize(writer));
            if (this.decorators.length)
                writer.writeRepeatedMessage(6, this.decorators, (item: ShellSetSpec) => item.serialize(writer));
            if (this.shell_objects.length)
                writer.writeRepeatedMessage(4, this.shell_objects, (item: ShellObjectSpec) => item.serialize(writer));
            if (this.shell_groups.length)
                writer.writeRepeatedMessage(5, this.shell_groups, (item: ShellGroupSpec) => item.serialize(writer));
            if (this.has_shells_showcase_last_featured_time)
                writer.writeDouble(7, this.shells_showcase_last_featured_time);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DLCCatalog {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DLCCatalog();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.items, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DLCItem.deserialize(reader), DLCItem));
                        break;
                    case 2:
                        reader.readMessage(message.shells, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ShellSpec.deserialize(reader), ShellSpec));
                        break;
                    case 3:
                        reader.readMessage(message.shell_sets, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ShellSetSpec.deserialize(reader), ShellSetSpec));
                        break;
                    case 6:
                        reader.readMessage(message.decorators, () => pb_1.Message.addToRepeatedWrapperField(message, 6, ShellSetSpec.deserialize(reader), ShellSetSpec));
                        break;
                    case 4:
                        reader.readMessage(message.shell_objects, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ShellObjectSpec.deserialize(reader), ShellObjectSpec));
                        break;
                    case 5:
                        reader.readMessage(message.shell_groups, () => pb_1.Message.addToRepeatedWrapperField(message, 5, ShellGroupSpec.deserialize(reader), ShellGroupSpec));
                        break;
                    case 7:
                        message.shells_showcase_last_featured_time = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DLCCatalog {
            return DLCCatalog.deserialize(bytes);
        }
    }
    export class ShellDB extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            shell_inventory: ShellDB.ShellStatus[];
            shell_element_inventory: ShellDB.ShellElementStatus[];
            shell_variation_inventory: ShellDB.ShellSetVariationStatus[];
            shell_set_inventory: ShellDB.ShellStatus[];
            shell_object_inventory: ShellDB.ShellStatus[];
            farm_configs: ShellDB.FarmConfiguration[];
            saved_configs: ShellDB.SavedFarmConfiguration[];
            new_shells_downloaded: string[];
            new_shells_seen: string[];
            last_showcase_featured_time_seen?: number;
            lighting_controls_unlocked?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 5, 8, 2, 4, 3, 9, 6, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.shell_inventory = data.shell_inventory;
                this.shell_element_inventory = data.shell_element_inventory;
                this.shell_variation_inventory = data.shell_variation_inventory;
                this.shell_set_inventory = data.shell_set_inventory;
                this.shell_object_inventory = data.shell_object_inventory;
                this.farm_configs = data.farm_configs;
                this.saved_configs = data.saved_configs;
                this.new_shells_downloaded = data.new_shells_downloaded;
                this.new_shells_seen = data.new_shells_seen;
                if ("last_showcase_featured_time_seen" in data && data.last_showcase_featured_time_seen != undefined) {
                    this.last_showcase_featured_time_seen = data.last_showcase_featured_time_seen;
                }
                if ("lighting_controls_unlocked" in data && data.lighting_controls_unlocked != undefined) {
                    this.lighting_controls_unlocked = data.lighting_controls_unlocked;
                }
            }
        }
        get shell_inventory() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellDB.ShellStatus, 1) as ShellDB.ShellStatus[];
        }
        set shell_inventory(value: ShellDB.ShellStatus[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get shell_element_inventory() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellDB.ShellElementStatus, 5) as ShellDB.ShellElementStatus[];
        }
        set shell_element_inventory(value: ShellDB.ShellElementStatus[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get shell_variation_inventory() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellDB.ShellSetVariationStatus, 8) as ShellDB.ShellSetVariationStatus[];
        }
        set shell_variation_inventory(value: ShellDB.ShellSetVariationStatus[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get shell_set_inventory() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellDB.ShellStatus, 2) as ShellDB.ShellStatus[];
        }
        set shell_set_inventory(value: ShellDB.ShellStatus[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get shell_object_inventory() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellDB.ShellStatus, 4) as ShellDB.ShellStatus[];
        }
        set shell_object_inventory(value: ShellDB.ShellStatus[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get farm_configs() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellDB.FarmConfiguration, 3) as ShellDB.FarmConfiguration[];
        }
        set farm_configs(value: ShellDB.FarmConfiguration[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get saved_configs() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellDB.SavedFarmConfiguration, 9) as ShellDB.SavedFarmConfiguration[];
        }
        set saved_configs(value: ShellDB.SavedFarmConfiguration[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get new_shells_downloaded() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set new_shells_downloaded(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get new_shells_seen() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as string[];
        }
        set new_shells_seen(value: string[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get last_showcase_featured_time_seen() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set last_showcase_featured_time_seen(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_last_showcase_featured_time_seen() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get lighting_controls_unlocked() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set lighting_controls_unlocked(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_lighting_controls_unlocked() {
            return pb_1.Message.getField(this, 10) != null;
        }
        static fromObject(data: {
            shell_inventory?: ReturnType<typeof ShellDB.ShellStatus.prototype.toObject>[];
            shell_element_inventory?: ReturnType<typeof ShellDB.ShellElementStatus.prototype.toObject>[];
            shell_variation_inventory?: ReturnType<typeof ShellDB.ShellSetVariationStatus.prototype.toObject>[];
            shell_set_inventory?: ReturnType<typeof ShellDB.ShellStatus.prototype.toObject>[];
            shell_object_inventory?: ReturnType<typeof ShellDB.ShellStatus.prototype.toObject>[];
            farm_configs?: ReturnType<typeof ShellDB.FarmConfiguration.prototype.toObject>[];
            saved_configs?: ReturnType<typeof ShellDB.SavedFarmConfiguration.prototype.toObject>[];
            new_shells_downloaded: string[];
            new_shells_seen: string[];
            last_showcase_featured_time_seen?: number;
            lighting_controls_unlocked?: boolean;
        }): ShellDB {
            const message = new ShellDB({
                shell_inventory: data.shell_inventory.map(item => ShellDB.ShellStatus.fromObject(item)),
                shell_element_inventory: data.shell_element_inventory.map(item => ShellDB.ShellElementStatus.fromObject(item)),
                shell_variation_inventory: data.shell_variation_inventory.map(item => ShellDB.ShellSetVariationStatus.fromObject(item)),
                shell_set_inventory: data.shell_set_inventory.map(item => ShellDB.ShellStatus.fromObject(item)),
                shell_object_inventory: data.shell_object_inventory.map(item => ShellDB.ShellStatus.fromObject(item)),
                farm_configs: data.farm_configs.map(item => ShellDB.FarmConfiguration.fromObject(item)),
                saved_configs: data.saved_configs.map(item => ShellDB.SavedFarmConfiguration.fromObject(item)),
                new_shells_downloaded: data.new_shells_downloaded,
                new_shells_seen: data.new_shells_seen
            });
            if (data.last_showcase_featured_time_seen != null) {
                message.last_showcase_featured_time_seen = data.last_showcase_featured_time_seen;
            }
            if (data.lighting_controls_unlocked != null) {
                message.lighting_controls_unlocked = data.lighting_controls_unlocked;
            }
            return message;
        }
        toObject() {
            const data: {
                shell_inventory?: ReturnType<typeof ShellDB.ShellStatus.prototype.toObject>[];
                shell_element_inventory?: ReturnType<typeof ShellDB.ShellElementStatus.prototype.toObject>[];
                shell_variation_inventory?: ReturnType<typeof ShellDB.ShellSetVariationStatus.prototype.toObject>[];
                shell_set_inventory?: ReturnType<typeof ShellDB.ShellStatus.prototype.toObject>[];
                shell_object_inventory?: ReturnType<typeof ShellDB.ShellStatus.prototype.toObject>[];
                farm_configs?: ReturnType<typeof ShellDB.FarmConfiguration.prototype.toObject>[];
                saved_configs?: ReturnType<typeof ShellDB.SavedFarmConfiguration.prototype.toObject>[];
                new_shells_downloaded: string[];
                new_shells_seen: string[];
                last_showcase_featured_time_seen?: number;
                lighting_controls_unlocked?: boolean;
            } = {
                new_shells_downloaded: this.new_shells_downloaded,
                new_shells_seen: this.new_shells_seen
            };
            if (this.shell_inventory != null) {
                data.shell_inventory = this.shell_inventory.map((item: ShellDB.ShellStatus) => item.toObject());
            }
            if (this.shell_element_inventory != null) {
                data.shell_element_inventory = this.shell_element_inventory.map((item: ShellDB.ShellElementStatus) => item.toObject());
            }
            if (this.shell_variation_inventory != null) {
                data.shell_variation_inventory = this.shell_variation_inventory.map((item: ShellDB.ShellSetVariationStatus) => item.toObject());
            }
            if (this.shell_set_inventory != null) {
                data.shell_set_inventory = this.shell_set_inventory.map((item: ShellDB.ShellStatus) => item.toObject());
            }
            if (this.shell_object_inventory != null) {
                data.shell_object_inventory = this.shell_object_inventory.map((item: ShellDB.ShellStatus) => item.toObject());
            }
            if (this.farm_configs != null) {
                data.farm_configs = this.farm_configs.map((item: ShellDB.FarmConfiguration) => item.toObject());
            }
            if (this.saved_configs != null) {
                data.saved_configs = this.saved_configs.map((item: ShellDB.SavedFarmConfiguration) => item.toObject());
            }
            if (this.last_showcase_featured_time_seen != null) {
                data.last_showcase_featured_time_seen = this.last_showcase_featured_time_seen;
            }
            if (this.lighting_controls_unlocked != null) {
                data.lighting_controls_unlocked = this.lighting_controls_unlocked;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.shell_inventory.length)
                writer.writeRepeatedMessage(1, this.shell_inventory, (item: ShellDB.ShellStatus) => item.serialize(writer));
            if (this.shell_element_inventory.length)
                writer.writeRepeatedMessage(5, this.shell_element_inventory, (item: ShellDB.ShellElementStatus) => item.serialize(writer));
            if (this.shell_variation_inventory.length)
                writer.writeRepeatedMessage(8, this.shell_variation_inventory, (item: ShellDB.ShellSetVariationStatus) => item.serialize(writer));
            if (this.shell_set_inventory.length)
                writer.writeRepeatedMessage(2, this.shell_set_inventory, (item: ShellDB.ShellStatus) => item.serialize(writer));
            if (this.shell_object_inventory.length)
                writer.writeRepeatedMessage(4, this.shell_object_inventory, (item: ShellDB.ShellStatus) => item.serialize(writer));
            if (this.farm_configs.length)
                writer.writeRepeatedMessage(3, this.farm_configs, (item: ShellDB.FarmConfiguration) => item.serialize(writer));
            if (this.saved_configs.length)
                writer.writeRepeatedMessage(9, this.saved_configs, (item: ShellDB.SavedFarmConfiguration) => item.serialize(writer));
            if (this.new_shells_downloaded.length)
                writer.writeRepeatedString(6, this.new_shells_downloaded);
            if (this.new_shells_seen.length)
                writer.writeRepeatedString(7, this.new_shells_seen);
            if (this.has_last_showcase_featured_time_seen)
                writer.writeDouble(11, this.last_showcase_featured_time_seen);
            if (this.has_lighting_controls_unlocked)
                writer.writeBool(10, this.lighting_controls_unlocked);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellDB {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellDB();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.shell_inventory, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ShellDB.ShellStatus.deserialize(reader), ShellDB.ShellStatus));
                        break;
                    case 5:
                        reader.readMessage(message.shell_element_inventory, () => pb_1.Message.addToRepeatedWrapperField(message, 5, ShellDB.ShellElementStatus.deserialize(reader), ShellDB.ShellElementStatus));
                        break;
                    case 8:
                        reader.readMessage(message.shell_variation_inventory, () => pb_1.Message.addToRepeatedWrapperField(message, 8, ShellDB.ShellSetVariationStatus.deserialize(reader), ShellDB.ShellSetVariationStatus));
                        break;
                    case 2:
                        reader.readMessage(message.shell_set_inventory, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ShellDB.ShellStatus.deserialize(reader), ShellDB.ShellStatus));
                        break;
                    case 4:
                        reader.readMessage(message.shell_object_inventory, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ShellDB.ShellStatus.deserialize(reader), ShellDB.ShellStatus));
                        break;
                    case 3:
                        reader.readMessage(message.farm_configs, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ShellDB.FarmConfiguration.deserialize(reader), ShellDB.FarmConfiguration));
                        break;
                    case 9:
                        reader.readMessage(message.saved_configs, () => pb_1.Message.addToRepeatedWrapperField(message, 9, ShellDB.SavedFarmConfiguration.deserialize(reader), ShellDB.SavedFarmConfiguration));
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        pb_1.Message.addToRepeatedField(message, 7, reader.readString());
                        break;
                    case 11:
                        message.last_showcase_featured_time_seen = reader.readDouble();
                        break;
                    case 10:
                        message.lighting_controls_unlocked = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShellDB {
            return ShellDB.deserialize(bytes);
        }
    }
    export namespace ShellDB {
        export enum FarmElement {
            HEN_HOUSE = 1,
            SILO = 2,
            MAILBOX = 3,
            TROPHY_CASE = 4,
            GROUND = 5,
            HARDSCAPE = 6,
            HYPERLOOP = 7,
            DEPOT = 8,
            LAB = 9,
            HATCHERY = 10,
            HOA = 11,
            MISSION_CONTROL = 12,
            FUEL_TANK = 13,
            CHICKEN = 14,
            HAT = 15,
            UNKNOWN = 99
        }
        export class ShellStatus extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                identifier?: string;
                owned?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("identifier" in data && data.identifier != undefined) {
                        this.identifier = data.identifier;
                    }
                    if ("owned" in data && data.owned != undefined) {
                        this.owned = data.owned;
                    }
                }
            }
            get identifier() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set identifier(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_identifier() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get owned() {
                return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
            }
            set owned(value: boolean) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_owned() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                identifier?: string;
                owned?: boolean;
            }): ShellStatus {
                const message = new ShellStatus({});
                if (data.identifier != null) {
                    message.identifier = data.identifier;
                }
                if (data.owned != null) {
                    message.owned = data.owned;
                }
                return message;
            }
            toObject() {
                const data: {
                    identifier?: string;
                    owned?: boolean;
                } = {};
                if (this.identifier != null) {
                    data.identifier = this.identifier;
                }
                if (this.owned != null) {
                    data.owned = this.owned;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_identifier && this.identifier.length)
                    writer.writeString(1, this.identifier);
                if (this.has_owned)
                    writer.writeBool(2, this.owned);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellStatus {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellStatus();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.identifier = reader.readString();
                            break;
                        case 2:
                            message.owned = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ShellStatus {
                return ShellStatus.deserialize(bytes);
            }
        }
        export class ShellElementStatus extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                element?: ShellDB.FarmElement;
                set_identifier?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("element" in data && data.element != undefined) {
                        this.element = data.element;
                    }
                    if ("set_identifier" in data && data.set_identifier != undefined) {
                        this.set_identifier = data.set_identifier;
                    }
                }
            }
            get element() {
                return pb_1.Message.getFieldWithDefault(this, 1, ShellDB.FarmElement.HEN_HOUSE) as ShellDB.FarmElement;
            }
            set element(value: ShellDB.FarmElement) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_element() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get set_identifier() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set set_identifier(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_set_identifier() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                element?: ShellDB.FarmElement;
                set_identifier?: string;
            }): ShellElementStatus {
                const message = new ShellElementStatus({});
                if (data.element != null) {
                    message.element = data.element;
                }
                if (data.set_identifier != null) {
                    message.set_identifier = data.set_identifier;
                }
                return message;
            }
            toObject() {
                const data: {
                    element?: ShellDB.FarmElement;
                    set_identifier?: string;
                } = {};
                if (this.element != null) {
                    data.element = this.element;
                }
                if (this.set_identifier != null) {
                    data.set_identifier = this.set_identifier;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_element)
                    writer.writeEnum(1, this.element);
                if (this.has_set_identifier && this.set_identifier.length)
                    writer.writeString(2, this.set_identifier);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellElementStatus {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellElementStatus();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.element = reader.readEnum();
                            break;
                        case 2:
                            message.set_identifier = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ShellElementStatus {
                return ShellElementStatus.deserialize(bytes);
            }
        }
        export class ShellSetVariationStatus extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                set_identifier?: string;
                owned_variations: string[];
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("set_identifier" in data && data.set_identifier != undefined) {
                        this.set_identifier = data.set_identifier;
                    }
                    this.owned_variations = data.owned_variations;
                }
            }
            get set_identifier() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set set_identifier(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_set_identifier() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get owned_variations() {
                return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
            }
            set owned_variations(value: string[]) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                set_identifier?: string;
                owned_variations: string[];
            }): ShellSetVariationStatus {
                const message = new ShellSetVariationStatus({
                    owned_variations: data.owned_variations
                });
                if (data.set_identifier != null) {
                    message.set_identifier = data.set_identifier;
                }
                return message;
            }
            toObject() {
                const data: {
                    set_identifier?: string;
                    owned_variations: string[];
                } = {
                    owned_variations: this.owned_variations
                };
                if (this.set_identifier != null) {
                    data.set_identifier = this.set_identifier;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_set_identifier && this.set_identifier.length)
                    writer.writeString(1, this.set_identifier);
                if (this.owned_variations.length)
                    writer.writeRepeatedString(2, this.owned_variations);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellSetVariationStatus {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellSetVariationStatus();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.set_identifier = reader.readString();
                            break;
                        case 2:
                            pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ShellSetVariationStatus {
                return ShellSetVariationStatus.deserialize(bytes);
            }
        }
        export class FarmConfiguration extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                locked_elements: ShellDB.FarmElement[];
                shell_configs: ShellDB.ShellConfiguration[];
                shell_set_configs: ShellDB.ShellSetConfiguration[];
                configure_chickens_by_group?: boolean;
                group_configs: ShellDB.ShellGroupConfiguration[];
                chicken_configs: ShellDB.ChickenConfig[];
                lighting_config_enabled?: boolean;
                lighting_config?: ShellDB.LightingConfig;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10, 1, 2, 8, 9], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    this.locked_elements = data.locked_elements;
                    this.shell_configs = data.shell_configs;
                    this.shell_set_configs = data.shell_set_configs;
                    if ("configure_chickens_by_group" in data && data.configure_chickens_by_group != undefined) {
                        this.configure_chickens_by_group = data.configure_chickens_by_group;
                    }
                    this.group_configs = data.group_configs;
                    this.chicken_configs = data.chicken_configs;
                    if ("lighting_config_enabled" in data && data.lighting_config_enabled != undefined) {
                        this.lighting_config_enabled = data.lighting_config_enabled;
                    }
                    if ("lighting_config" in data && data.lighting_config != undefined) {
                        this.lighting_config = data.lighting_config;
                    }
                }
            }
            get locked_elements() {
                return pb_1.Message.getFieldWithDefault(this, 10, []) as ShellDB.FarmElement[];
            }
            set locked_elements(value: ShellDB.FarmElement[]) {
                pb_1.Message.setField(this, 10, value);
            }
            get shell_configs() {
                return pb_1.Message.getRepeatedWrapperField(this, ShellDB.ShellConfiguration, 1) as ShellDB.ShellConfiguration[];
            }
            set shell_configs(value: ShellDB.ShellConfiguration[]) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get shell_set_configs() {
                return pb_1.Message.getRepeatedWrapperField(this, ShellDB.ShellSetConfiguration, 2) as ShellDB.ShellSetConfiguration[];
            }
            set shell_set_configs(value: ShellDB.ShellSetConfiguration[]) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get configure_chickens_by_group() {
                return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
            }
            set configure_chickens_by_group(value: boolean) {
                pb_1.Message.setField(this, 7, value);
            }
            get has_configure_chickens_by_group() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get group_configs() {
                return pb_1.Message.getRepeatedWrapperField(this, ShellDB.ShellGroupConfiguration, 8) as ShellDB.ShellGroupConfiguration[];
            }
            set group_configs(value: ShellDB.ShellGroupConfiguration[]) {
                pb_1.Message.setRepeatedWrapperField(this, 8, value);
            }
            get chicken_configs() {
                return pb_1.Message.getRepeatedWrapperField(this, ShellDB.ChickenConfig, 9) as ShellDB.ChickenConfig[];
            }
            set chicken_configs(value: ShellDB.ChickenConfig[]) {
                pb_1.Message.setRepeatedWrapperField(this, 9, value);
            }
            get lighting_config_enabled() {
                return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
            }
            set lighting_config_enabled(value: boolean) {
                pb_1.Message.setField(this, 11, value);
            }
            get has_lighting_config_enabled() {
                return pb_1.Message.getField(this, 11) != null;
            }
            get lighting_config() {
                return pb_1.Message.getWrapperField(this, ShellDB.LightingConfig, 12) as ShellDB.LightingConfig;
            }
            set lighting_config(value: ShellDB.LightingConfig) {
                pb_1.Message.setWrapperField(this, 12, value);
            }
            get has_lighting_config() {
                return pb_1.Message.getField(this, 12) != null;
            }
            static fromObject(data: {
                locked_elements: ShellDB.FarmElement[];
                shell_configs?: ReturnType<typeof ShellDB.ShellConfiguration.prototype.toObject>[];
                shell_set_configs?: ReturnType<typeof ShellDB.ShellSetConfiguration.prototype.toObject>[];
                configure_chickens_by_group?: boolean;
                group_configs?: ReturnType<typeof ShellDB.ShellGroupConfiguration.prototype.toObject>[];
                chicken_configs?: ReturnType<typeof ShellDB.ChickenConfig.prototype.toObject>[];
                lighting_config_enabled?: boolean;
                lighting_config?: ReturnType<typeof ShellDB.LightingConfig.prototype.toObject>;
            }): FarmConfiguration {
                const message = new FarmConfiguration({
                    locked_elements: data.locked_elements,
                    shell_configs: data.shell_configs.map(item => ShellDB.ShellConfiguration.fromObject(item)),
                    shell_set_configs: data.shell_set_configs.map(item => ShellDB.ShellSetConfiguration.fromObject(item)),
                    group_configs: data.group_configs.map(item => ShellDB.ShellGroupConfiguration.fromObject(item)),
                    chicken_configs: data.chicken_configs.map(item => ShellDB.ChickenConfig.fromObject(item))
                });
                if (data.configure_chickens_by_group != null) {
                    message.configure_chickens_by_group = data.configure_chickens_by_group;
                }
                if (data.lighting_config_enabled != null) {
                    message.lighting_config_enabled = data.lighting_config_enabled;
                }
                if (data.lighting_config != null) {
                    message.lighting_config = ShellDB.LightingConfig.fromObject(data.lighting_config);
                }
                return message;
            }
            toObject() {
                const data: {
                    locked_elements: ShellDB.FarmElement[];
                    shell_configs?: ReturnType<typeof ShellDB.ShellConfiguration.prototype.toObject>[];
                    shell_set_configs?: ReturnType<typeof ShellDB.ShellSetConfiguration.prototype.toObject>[];
                    configure_chickens_by_group?: boolean;
                    group_configs?: ReturnType<typeof ShellDB.ShellGroupConfiguration.prototype.toObject>[];
                    chicken_configs?: ReturnType<typeof ShellDB.ChickenConfig.prototype.toObject>[];
                    lighting_config_enabled?: boolean;
                    lighting_config?: ReturnType<typeof ShellDB.LightingConfig.prototype.toObject>;
                } = {
                    locked_elements: this.locked_elements
                };
                if (this.shell_configs != null) {
                    data.shell_configs = this.shell_configs.map((item: ShellDB.ShellConfiguration) => item.toObject());
                }
                if (this.shell_set_configs != null) {
                    data.shell_set_configs = this.shell_set_configs.map((item: ShellDB.ShellSetConfiguration) => item.toObject());
                }
                if (this.configure_chickens_by_group != null) {
                    data.configure_chickens_by_group = this.configure_chickens_by_group;
                }
                if (this.group_configs != null) {
                    data.group_configs = this.group_configs.map((item: ShellDB.ShellGroupConfiguration) => item.toObject());
                }
                if (this.chicken_configs != null) {
                    data.chicken_configs = this.chicken_configs.map((item: ShellDB.ChickenConfig) => item.toObject());
                }
                if (this.lighting_config_enabled != null) {
                    data.lighting_config_enabled = this.lighting_config_enabled;
                }
                if (this.lighting_config != null) {
                    data.lighting_config = this.lighting_config.toObject();
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.locked_elements.length)
                    writer.writeRepeatedEnum(10, this.locked_elements);
                if (this.shell_configs.length)
                    writer.writeRepeatedMessage(1, this.shell_configs, (item: ShellDB.ShellConfiguration) => item.serialize(writer));
                if (this.shell_set_configs.length)
                    writer.writeRepeatedMessage(2, this.shell_set_configs, (item: ShellDB.ShellSetConfiguration) => item.serialize(writer));
                if (this.has_configure_chickens_by_group)
                    writer.writeBool(7, this.configure_chickens_by_group);
                if (this.group_configs.length)
                    writer.writeRepeatedMessage(8, this.group_configs, (item: ShellDB.ShellGroupConfiguration) => item.serialize(writer));
                if (this.chicken_configs.length)
                    writer.writeRepeatedMessage(9, this.chicken_configs, (item: ShellDB.ChickenConfig) => item.serialize(writer));
                if (this.has_lighting_config_enabled)
                    writer.writeBool(11, this.lighting_config_enabled);
                if (this.has_lighting_config)
                    writer.writeMessage(12, this.lighting_config, () => this.lighting_config.serialize(writer));
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FarmConfiguration {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FarmConfiguration();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 10:
                            pb_1.Message.addToRepeatedField(message, 10, reader.readEnum());
                            break;
                        case 1:
                            reader.readMessage(message.shell_configs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ShellDB.ShellConfiguration.deserialize(reader), ShellDB.ShellConfiguration));
                            break;
                        case 2:
                            reader.readMessage(message.shell_set_configs, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ShellDB.ShellSetConfiguration.deserialize(reader), ShellDB.ShellSetConfiguration));
                            break;
                        case 7:
                            message.configure_chickens_by_group = reader.readBool();
                            break;
                        case 8:
                            reader.readMessage(message.group_configs, () => pb_1.Message.addToRepeatedWrapperField(message, 8, ShellDB.ShellGroupConfiguration.deserialize(reader), ShellDB.ShellGroupConfiguration));
                            break;
                        case 9:
                            reader.readMessage(message.chicken_configs, () => pb_1.Message.addToRepeatedWrapperField(message, 9, ShellDB.ChickenConfig.deserialize(reader), ShellDB.ChickenConfig));
                            break;
                        case 11:
                            message.lighting_config_enabled = reader.readBool();
                            break;
                        case 12:
                            reader.readMessage(message.lighting_config, () => message.lighting_config = ShellDB.LightingConfig.deserialize(reader));
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): FarmConfiguration {
                return FarmConfiguration.deserialize(bytes);
            }
        }
        export class SavedFarmConfiguration extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
                config?: ShellDB.FarmConfiguration;
                client_save_time?: number;
                server_id?: string;
                display_name?: string;
                purchased?: boolean;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("config" in data && data.config != undefined) {
                        this.config = data.config;
                    }
                    if ("client_save_time" in data && data.client_save_time != undefined) {
                        this.client_save_time = data.client_save_time;
                    }
                    if ("server_id" in data && data.server_id != undefined) {
                        this.server_id = data.server_id;
                    }
                    if ("display_name" in data && data.display_name != undefined) {
                        this.display_name = data.display_name;
                    }
                    if ("purchased" in data && data.purchased != undefined) {
                        this.purchased = data.purchased;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_id() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get config() {
                return pb_1.Message.getWrapperField(this, ShellDB.FarmConfiguration, 2) as ShellDB.FarmConfiguration;
            }
            set config(value: ShellDB.FarmConfiguration) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_config() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get client_save_time() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set client_save_time(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_client_save_time() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get server_id() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set server_id(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_server_id() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get display_name() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set display_name(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_display_name() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get purchased() {
                return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
            }
            set purchased(value: boolean) {
                pb_1.Message.setField(this, 6, value);
            }
            get has_purchased() {
                return pb_1.Message.getField(this, 6) != null;
            }
            static fromObject(data: {
                id?: string;
                config?: ReturnType<typeof ShellDB.FarmConfiguration.prototype.toObject>;
                client_save_time?: number;
                server_id?: string;
                display_name?: string;
                purchased?: boolean;
            }): SavedFarmConfiguration {
                const message = new SavedFarmConfiguration({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.config != null) {
                    message.config = ShellDB.FarmConfiguration.fromObject(data.config);
                }
                if (data.client_save_time != null) {
                    message.client_save_time = data.client_save_time;
                }
                if (data.server_id != null) {
                    message.server_id = data.server_id;
                }
                if (data.display_name != null) {
                    message.display_name = data.display_name;
                }
                if (data.purchased != null) {
                    message.purchased = data.purchased;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    config?: ReturnType<typeof ShellDB.FarmConfiguration.prototype.toObject>;
                    client_save_time?: number;
                    server_id?: string;
                    display_name?: string;
                    purchased?: boolean;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.config != null) {
                    data.config = this.config.toObject();
                }
                if (this.client_save_time != null) {
                    data.client_save_time = this.client_save_time;
                }
                if (this.server_id != null) {
                    data.server_id = this.server_id;
                }
                if (this.display_name != null) {
                    data.display_name = this.display_name;
                }
                if (this.purchased != null) {
                    data.purchased = this.purchased;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_id && this.id.length)
                    writer.writeString(1, this.id);
                if (this.has_config)
                    writer.writeMessage(2, this.config, () => this.config.serialize(writer));
                if (this.has_client_save_time)
                    writer.writeDouble(3, this.client_save_time);
                if (this.has_server_id && this.server_id.length)
                    writer.writeString(4, this.server_id);
                if (this.has_display_name && this.display_name.length)
                    writer.writeString(5, this.display_name);
                if (this.has_purchased)
                    writer.writeBool(6, this.purchased);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SavedFarmConfiguration {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SavedFarmConfiguration();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            reader.readMessage(message.config, () => message.config = ShellDB.FarmConfiguration.deserialize(reader));
                            break;
                        case 3:
                            message.client_save_time = reader.readDouble();
                            break;
                        case 4:
                            message.server_id = reader.readString();
                            break;
                        case 5:
                            message.display_name = reader.readString();
                            break;
                        case 6:
                            message.purchased = reader.readBool();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): SavedFarmConfiguration {
                return SavedFarmConfiguration.deserialize(bytes);
            }
        }
        export class ShellConfiguration extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                asset_type?: ShellSpec.AssetType;
                index?: number;
                shell_identifier?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("asset_type" in data && data.asset_type != undefined) {
                        this.asset_type = data.asset_type;
                    }
                    if ("index" in data && data.index != undefined) {
                        this.index = data.index;
                    }
                    if ("shell_identifier" in data && data.shell_identifier != undefined) {
                        this.shell_identifier = data.shell_identifier;
                    }
                }
            }
            get asset_type() {
                return pb_1.Message.getFieldWithDefault(this, 1, ShellSpec.AssetType.COOP) as ShellSpec.AssetType;
            }
            set asset_type(value: ShellSpec.AssetType) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_asset_type() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get index() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set index(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_index() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get shell_identifier() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set shell_identifier(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_shell_identifier() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                asset_type?: ShellSpec.AssetType;
                index?: number;
                shell_identifier?: string;
            }): ShellConfiguration {
                const message = new ShellConfiguration({});
                if (data.asset_type != null) {
                    message.asset_type = data.asset_type;
                }
                if (data.index != null) {
                    message.index = data.index;
                }
                if (data.shell_identifier != null) {
                    message.shell_identifier = data.shell_identifier;
                }
                return message;
            }
            toObject() {
                const data: {
                    asset_type?: ShellSpec.AssetType;
                    index?: number;
                    shell_identifier?: string;
                } = {};
                if (this.asset_type != null) {
                    data.asset_type = this.asset_type;
                }
                if (this.index != null) {
                    data.index = this.index;
                }
                if (this.shell_identifier != null) {
                    data.shell_identifier = this.shell_identifier;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_asset_type)
                    writer.writeEnum(1, this.asset_type);
                if (this.has_index)
                    writer.writeUint32(2, this.index);
                if (this.has_shell_identifier && this.shell_identifier.length)
                    writer.writeString(3, this.shell_identifier);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellConfiguration {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellConfiguration();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.asset_type = reader.readEnum();
                            break;
                        case 2:
                            message.index = reader.readUint32();
                            break;
                        case 3:
                            message.shell_identifier = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ShellConfiguration {
                return ShellConfiguration.deserialize(bytes);
            }
        }
        export class ShellSetConfiguration extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                element?: ShellDB.FarmElement;
                index?: number;
                shell_set_identifier?: string;
                variation_identifier?: string;
                decorator_identifier?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("element" in data && data.element != undefined) {
                        this.element = data.element;
                    }
                    if ("index" in data && data.index != undefined) {
                        this.index = data.index;
                    }
                    if ("shell_set_identifier" in data && data.shell_set_identifier != undefined) {
                        this.shell_set_identifier = data.shell_set_identifier;
                    }
                    if ("variation_identifier" in data && data.variation_identifier != undefined) {
                        this.variation_identifier = data.variation_identifier;
                    }
                    if ("decorator_identifier" in data && data.decorator_identifier != undefined) {
                        this.decorator_identifier = data.decorator_identifier;
                    }
                }
            }
            get element() {
                return pb_1.Message.getFieldWithDefault(this, 1, ShellDB.FarmElement.HEN_HOUSE) as ShellDB.FarmElement;
            }
            set element(value: ShellDB.FarmElement) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_element() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get index() {
                return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
            }
            set index(value: number) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_index() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get shell_set_identifier() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set shell_set_identifier(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_shell_set_identifier() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get variation_identifier() {
                return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
            }
            set variation_identifier(value: string) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_variation_identifier() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get decorator_identifier() {
                return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
            }
            set decorator_identifier(value: string) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_decorator_identifier() {
                return pb_1.Message.getField(this, 5) != null;
            }
            static fromObject(data: {
                element?: ShellDB.FarmElement;
                index?: number;
                shell_set_identifier?: string;
                variation_identifier?: string;
                decorator_identifier?: string;
            }): ShellSetConfiguration {
                const message = new ShellSetConfiguration({});
                if (data.element != null) {
                    message.element = data.element;
                }
                if (data.index != null) {
                    message.index = data.index;
                }
                if (data.shell_set_identifier != null) {
                    message.shell_set_identifier = data.shell_set_identifier;
                }
                if (data.variation_identifier != null) {
                    message.variation_identifier = data.variation_identifier;
                }
                if (data.decorator_identifier != null) {
                    message.decorator_identifier = data.decorator_identifier;
                }
                return message;
            }
            toObject() {
                const data: {
                    element?: ShellDB.FarmElement;
                    index?: number;
                    shell_set_identifier?: string;
                    variation_identifier?: string;
                    decorator_identifier?: string;
                } = {};
                if (this.element != null) {
                    data.element = this.element;
                }
                if (this.index != null) {
                    data.index = this.index;
                }
                if (this.shell_set_identifier != null) {
                    data.shell_set_identifier = this.shell_set_identifier;
                }
                if (this.variation_identifier != null) {
                    data.variation_identifier = this.variation_identifier;
                }
                if (this.decorator_identifier != null) {
                    data.decorator_identifier = this.decorator_identifier;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_element)
                    writer.writeEnum(1, this.element);
                if (this.has_index)
                    writer.writeUint32(2, this.index);
                if (this.has_shell_set_identifier && this.shell_set_identifier.length)
                    writer.writeString(3, this.shell_set_identifier);
                if (this.has_variation_identifier && this.variation_identifier.length)
                    writer.writeString(4, this.variation_identifier);
                if (this.has_decorator_identifier && this.decorator_identifier.length)
                    writer.writeString(5, this.decorator_identifier);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellSetConfiguration {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellSetConfiguration();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.element = reader.readEnum();
                            break;
                        case 2:
                            message.index = reader.readUint32();
                            break;
                        case 3:
                            message.shell_set_identifier = reader.readString();
                            break;
                        case 4:
                            message.variation_identifier = reader.readString();
                            break;
                        case 5:
                            message.decorator_identifier = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ShellSetConfiguration {
                return ShellSetConfiguration.deserialize(bytes);
            }
        }
        export class ShellGroupConfiguration extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                asset_type?: ShellSpec.AssetType;
                group_identifier?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("asset_type" in data && data.asset_type != undefined) {
                        this.asset_type = data.asset_type;
                    }
                    if ("group_identifier" in data && data.group_identifier != undefined) {
                        this.group_identifier = data.group_identifier;
                    }
                }
            }
            get asset_type() {
                return pb_1.Message.getFieldWithDefault(this, 1, ShellSpec.AssetType.COOP) as ShellSpec.AssetType;
            }
            set asset_type(value: ShellSpec.AssetType) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_asset_type() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get group_identifier() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set group_identifier(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_group_identifier() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                asset_type?: ShellSpec.AssetType;
                group_identifier?: string;
            }): ShellGroupConfiguration {
                const message = new ShellGroupConfiguration({});
                if (data.asset_type != null) {
                    message.asset_type = data.asset_type;
                }
                if (data.group_identifier != null) {
                    message.group_identifier = data.group_identifier;
                }
                return message;
            }
            toObject() {
                const data: {
                    asset_type?: ShellSpec.AssetType;
                    group_identifier?: string;
                } = {};
                if (this.asset_type != null) {
                    data.asset_type = this.asset_type;
                }
                if (this.group_identifier != null) {
                    data.group_identifier = this.group_identifier;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_asset_type)
                    writer.writeEnum(1, this.asset_type);
                if (this.has_group_identifier && this.group_identifier.length)
                    writer.writeString(2, this.group_identifier);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellGroupConfiguration {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellGroupConfiguration();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.asset_type = reader.readEnum();
                            break;
                        case 2:
                            message.group_identifier = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ShellGroupConfiguration {
                return ShellGroupConfiguration.deserialize(bytes);
            }
        }
        export class ChickenConfig extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                chicken_identifier?: string;
                hat_identifier?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("chicken_identifier" in data && data.chicken_identifier != undefined) {
                        this.chicken_identifier = data.chicken_identifier;
                    }
                    if ("hat_identifier" in data && data.hat_identifier != undefined) {
                        this.hat_identifier = data.hat_identifier;
                    }
                }
            }
            get chicken_identifier() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set chicken_identifier(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_chicken_identifier() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get hat_identifier() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set hat_identifier(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_hat_identifier() {
                return pb_1.Message.getField(this, 2) != null;
            }
            static fromObject(data: {
                chicken_identifier?: string;
                hat_identifier?: string;
            }): ChickenConfig {
                const message = new ChickenConfig({});
                if (data.chicken_identifier != null) {
                    message.chicken_identifier = data.chicken_identifier;
                }
                if (data.hat_identifier != null) {
                    message.hat_identifier = data.hat_identifier;
                }
                return message;
            }
            toObject() {
                const data: {
                    chicken_identifier?: string;
                    hat_identifier?: string;
                } = {};
                if (this.chicken_identifier != null) {
                    data.chicken_identifier = this.chicken_identifier;
                }
                if (this.hat_identifier != null) {
                    data.hat_identifier = this.hat_identifier;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_chicken_identifier && this.chicken_identifier.length)
                    writer.writeString(1, this.chicken_identifier);
                if (this.has_hat_identifier && this.hat_identifier.length)
                    writer.writeString(2, this.hat_identifier);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChickenConfig {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChickenConfig();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.chicken_identifier = reader.readString();
                            break;
                        case 2:
                            message.hat_identifier = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): ChickenConfig {
                return ChickenConfig.deserialize(bytes);
            }
        }
        export class LightingConfig extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                light_dir?: Vector3;
                light_direct_color?: Vector4;
                light_direct_intensity?: number;
                light_ambient_color?: Vector4;
                light_ambient_intensity?: number;
                fog_color?: Vector4;
                fog_near?: number;
                fog_far?: number;
                fog_density?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("light_dir" in data && data.light_dir != undefined) {
                        this.light_dir = data.light_dir;
                    }
                    if ("light_direct_color" in data && data.light_direct_color != undefined) {
                        this.light_direct_color = data.light_direct_color;
                    }
                    if ("light_direct_intensity" in data && data.light_direct_intensity != undefined) {
                        this.light_direct_intensity = data.light_direct_intensity;
                    }
                    if ("light_ambient_color" in data && data.light_ambient_color != undefined) {
                        this.light_ambient_color = data.light_ambient_color;
                    }
                    if ("light_ambient_intensity" in data && data.light_ambient_intensity != undefined) {
                        this.light_ambient_intensity = data.light_ambient_intensity;
                    }
                    if ("fog_color" in data && data.fog_color != undefined) {
                        this.fog_color = data.fog_color;
                    }
                    if ("fog_near" in data && data.fog_near != undefined) {
                        this.fog_near = data.fog_near;
                    }
                    if ("fog_far" in data && data.fog_far != undefined) {
                        this.fog_far = data.fog_far;
                    }
                    if ("fog_density" in data && data.fog_density != undefined) {
                        this.fog_density = data.fog_density;
                    }
                }
            }
            get light_dir() {
                return pb_1.Message.getWrapperField(this, Vector3, 1) as Vector3;
            }
            set light_dir(value: Vector3) {
                pb_1.Message.setWrapperField(this, 1, value);
            }
            get has_light_dir() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get light_direct_color() {
                return pb_1.Message.getWrapperField(this, Vector4, 2) as Vector4;
            }
            set light_direct_color(value: Vector4) {
                pb_1.Message.setWrapperField(this, 2, value);
            }
            get has_light_direct_color() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get light_direct_intensity() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set light_direct_intensity(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_light_direct_intensity() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get light_ambient_color() {
                return pb_1.Message.getWrapperField(this, Vector4, 4) as Vector4;
            }
            set light_ambient_color(value: Vector4) {
                pb_1.Message.setWrapperField(this, 4, value);
            }
            get has_light_ambient_color() {
                return pb_1.Message.getField(this, 4) != null;
            }
            get light_ambient_intensity() {
                return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
            }
            set light_ambient_intensity(value: number) {
                pb_1.Message.setField(this, 5, value);
            }
            get has_light_ambient_intensity() {
                return pb_1.Message.getField(this, 5) != null;
            }
            get fog_color() {
                return pb_1.Message.getWrapperField(this, Vector4, 6) as Vector4;
            }
            set fog_color(value: Vector4) {
                pb_1.Message.setWrapperField(this, 6, value);
            }
            get has_fog_color() {
                return pb_1.Message.getField(this, 6) != null;
            }
            get fog_near() {
                return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
            }
            set fog_near(value: number) {
                pb_1.Message.setField(this, 7, value);
            }
            get has_fog_near() {
                return pb_1.Message.getField(this, 7) != null;
            }
            get fog_far() {
                return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
            }
            set fog_far(value: number) {
                pb_1.Message.setField(this, 8, value);
            }
            get has_fog_far() {
                return pb_1.Message.getField(this, 8) != null;
            }
            get fog_density() {
                return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
            }
            set fog_density(value: number) {
                pb_1.Message.setField(this, 9, value);
            }
            get has_fog_density() {
                return pb_1.Message.getField(this, 9) != null;
            }
            static fromObject(data: {
                light_dir?: ReturnType<typeof Vector3.prototype.toObject>;
                light_direct_color?: ReturnType<typeof Vector4.prototype.toObject>;
                light_direct_intensity?: number;
                light_ambient_color?: ReturnType<typeof Vector4.prototype.toObject>;
                light_ambient_intensity?: number;
                fog_color?: ReturnType<typeof Vector4.prototype.toObject>;
                fog_near?: number;
                fog_far?: number;
                fog_density?: number;
            }): LightingConfig {
                const message = new LightingConfig({});
                if (data.light_dir != null) {
                    message.light_dir = Vector3.fromObject(data.light_dir);
                }
                if (data.light_direct_color != null) {
                    message.light_direct_color = Vector4.fromObject(data.light_direct_color);
                }
                if (data.light_direct_intensity != null) {
                    message.light_direct_intensity = data.light_direct_intensity;
                }
                if (data.light_ambient_color != null) {
                    message.light_ambient_color = Vector4.fromObject(data.light_ambient_color);
                }
                if (data.light_ambient_intensity != null) {
                    message.light_ambient_intensity = data.light_ambient_intensity;
                }
                if (data.fog_color != null) {
                    message.fog_color = Vector4.fromObject(data.fog_color);
                }
                if (data.fog_near != null) {
                    message.fog_near = data.fog_near;
                }
                if (data.fog_far != null) {
                    message.fog_far = data.fog_far;
                }
                if (data.fog_density != null) {
                    message.fog_density = data.fog_density;
                }
                return message;
            }
            toObject() {
                const data: {
                    light_dir?: ReturnType<typeof Vector3.prototype.toObject>;
                    light_direct_color?: ReturnType<typeof Vector4.prototype.toObject>;
                    light_direct_intensity?: number;
                    light_ambient_color?: ReturnType<typeof Vector4.prototype.toObject>;
                    light_ambient_intensity?: number;
                    fog_color?: ReturnType<typeof Vector4.prototype.toObject>;
                    fog_near?: number;
                    fog_far?: number;
                    fog_density?: number;
                } = {};
                if (this.light_dir != null) {
                    data.light_dir = this.light_dir.toObject();
                }
                if (this.light_direct_color != null) {
                    data.light_direct_color = this.light_direct_color.toObject();
                }
                if (this.light_direct_intensity != null) {
                    data.light_direct_intensity = this.light_direct_intensity;
                }
                if (this.light_ambient_color != null) {
                    data.light_ambient_color = this.light_ambient_color.toObject();
                }
                if (this.light_ambient_intensity != null) {
                    data.light_ambient_intensity = this.light_ambient_intensity;
                }
                if (this.fog_color != null) {
                    data.fog_color = this.fog_color.toObject();
                }
                if (this.fog_near != null) {
                    data.fog_near = this.fog_near;
                }
                if (this.fog_far != null) {
                    data.fog_far = this.fog_far;
                }
                if (this.fog_density != null) {
                    data.fog_density = this.fog_density;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_light_dir)
                    writer.writeMessage(1, this.light_dir, () => this.light_dir.serialize(writer));
                if (this.has_light_direct_color)
                    writer.writeMessage(2, this.light_direct_color, () => this.light_direct_color.serialize(writer));
                if (this.has_light_direct_intensity)
                    writer.writeFloat(3, this.light_direct_intensity);
                if (this.has_light_ambient_color)
                    writer.writeMessage(4, this.light_ambient_color, () => this.light_ambient_color.serialize(writer));
                if (this.has_light_ambient_intensity)
                    writer.writeFloat(5, this.light_ambient_intensity);
                if (this.has_fog_color)
                    writer.writeMessage(6, this.fog_color, () => this.fog_color.serialize(writer));
                if (this.has_fog_near)
                    writer.writeFloat(7, this.fog_near);
                if (this.has_fog_far)
                    writer.writeFloat(8, this.fog_far);
                if (this.has_fog_density)
                    writer.writeFloat(9, this.fog_density);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LightingConfig {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LightingConfig();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            reader.readMessage(message.light_dir, () => message.light_dir = Vector3.deserialize(reader));
                            break;
                        case 2:
                            reader.readMessage(message.light_direct_color, () => message.light_direct_color = Vector4.deserialize(reader));
                            break;
                        case 3:
                            message.light_direct_intensity = reader.readFloat();
                            break;
                        case 4:
                            reader.readMessage(message.light_ambient_color, () => message.light_ambient_color = Vector4.deserialize(reader));
                            break;
                        case 5:
                            message.light_ambient_intensity = reader.readFloat();
                            break;
                        case 6:
                            reader.readMessage(message.fog_color, () => message.fog_color = Vector4.deserialize(reader));
                            break;
                        case 7:
                            message.fog_near = reader.readFloat();
                            break;
                        case 8:
                            message.fog_far = reader.readFloat();
                            break;
                        case 9:
                            message.fog_density = reader.readFloat();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): LightingConfig {
                return LightingConfig.deserialize(bytes);
            }
        }
    }
    export class ShellPopularityStats extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data: ShellPopularityStats.Entry[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.data = data.data;
            }
        }
        get data() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellPopularityStats.Entry, 1) as ShellPopularityStats.Entry[];
        }
        set data(value: ShellPopularityStats.Entry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            data?: ReturnType<typeof ShellPopularityStats.Entry.prototype.toObject>[];
        }): ShellPopularityStats {
            const message = new ShellPopularityStats({
                data: data.data.map(item => ShellPopularityStats.Entry.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                data?: ReturnType<typeof ShellPopularityStats.Entry.prototype.toObject>[];
            } = {};
            if (this.data != null) {
                data.data = this.data.map((item: ShellPopularityStats.Entry) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeRepeatedMessage(1, this.data, (item: ShellPopularityStats.Entry) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellPopularityStats {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellPopularityStats();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.data, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ShellPopularityStats.Entry.deserialize(reader), ShellPopularityStats.Entry));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShellPopularityStats {
            return ShellPopularityStats.deserialize(bytes);
        }
    }
    export namespace ShellPopularityStats {
        export class Entry extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
                element?: ShellDB.FarmElement;
                spent?: number;
                count?: number;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                    if ("element" in data && data.element != undefined) {
                        this.element = data.element;
                    }
                    if ("spent" in data && data.spent != undefined) {
                        this.spent = data.spent;
                    }
                    if ("count" in data && data.count != undefined) {
                        this.count = data.count;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_id() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get element() {
                return pb_1.Message.getFieldWithDefault(this, 2, ShellDB.FarmElement.HEN_HOUSE) as ShellDB.FarmElement;
            }
            set element(value: ShellDB.FarmElement) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_element() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get spent() {
                return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
            }
            set spent(value: number) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_spent() {
                return pb_1.Message.getField(this, 3) != null;
            }
            get count() {
                return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
            }
            set count(value: number) {
                pb_1.Message.setField(this, 4, value);
            }
            get has_count() {
                return pb_1.Message.getField(this, 4) != null;
            }
            static fromObject(data: {
                id?: string;
                element?: ShellDB.FarmElement;
                spent?: number;
                count?: number;
            }): Entry {
                const message = new Entry({});
                if (data.id != null) {
                    message.id = data.id;
                }
                if (data.element != null) {
                    message.element = data.element;
                }
                if (data.spent != null) {
                    message.spent = data.spent;
                }
                if (data.count != null) {
                    message.count = data.count;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                    element?: ShellDB.FarmElement;
                    spent?: number;
                    count?: number;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                if (this.element != null) {
                    data.element = this.element;
                }
                if (this.spent != null) {
                    data.spent = this.spent;
                }
                if (this.count != null) {
                    data.count = this.count;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_id && this.id.length)
                    writer.writeString(1, this.id);
                if (this.has_element)
                    writer.writeEnum(2, this.element);
                if (this.has_spent)
                    writer.writeUint64(3, this.spent);
                if (this.has_count)
                    writer.writeUint64(4, this.count);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Entry {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Entry();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        case 2:
                            message.element = reader.readEnum();
                            break;
                        case 3:
                            message.spent = reader.readUint64();
                            break;
                        case 4:
                            message.count = reader.readUint64();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Entry {
                return Entry.deserialize(bytes);
            }
        }
    }
    export class ShellsActionLog extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            user_id?: string;
            action?: string;
            sub_id?: string;
            farm_element?: ShellDB.FarmElement;
            cost?: number;
            approx_time?: number;
            version?: string;
            farm_index?: number;
            soul_eggs?: number;
            tickets_spent?: number;
            gold_spent?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
                if ("sub_id" in data && data.sub_id != undefined) {
                    this.sub_id = data.sub_id;
                }
                if ("farm_element" in data && data.farm_element != undefined) {
                    this.farm_element = data.farm_element;
                }
                if ("cost" in data && data.cost != undefined) {
                    this.cost = data.cost;
                }
                if ("approx_time" in data && data.approx_time != undefined) {
                    this.approx_time = data.approx_time;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("farm_index" in data && data.farm_index != undefined) {
                    this.farm_index = data.farm_index;
                }
                if ("soul_eggs" in data && data.soul_eggs != undefined) {
                    this.soul_eggs = data.soul_eggs;
                }
                if ("tickets_spent" in data && data.tickets_spent != undefined) {
                    this.tickets_spent = data.tickets_spent;
                }
                if ("gold_spent" in data && data.gold_spent != undefined) {
                    this.gold_spent = data.gold_spent;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 8) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get action() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set action(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_action() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get sub_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sub_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_sub_id() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get farm_element() {
            return pb_1.Message.getFieldWithDefault(this, 9, ShellDB.FarmElement.HEN_HOUSE) as ShellDB.FarmElement;
        }
        set farm_element(value: ShellDB.FarmElement) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_farm_element() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get cost() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set cost(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_cost() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get approx_time() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set approx_time(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_approx_time() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_version() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get farm_index() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set farm_index(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_farm_index() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get soul_eggs() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set soul_eggs(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_soul_eggs() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get tickets_spent() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set tickets_spent(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_tickets_spent() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get gold_spent() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set gold_spent(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_gold_spent() {
            return pb_1.Message.getField(this, 12) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            user_id?: string;
            action?: string;
            sub_id?: string;
            farm_element?: ShellDB.FarmElement;
            cost?: number;
            approx_time?: number;
            version?: string;
            farm_index?: number;
            soul_eggs?: number;
            tickets_spent?: number;
            gold_spent?: number;
        }): ShellsActionLog {
            const message = new ShellsActionLog({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.action != null) {
                message.action = data.action;
            }
            if (data.sub_id != null) {
                message.sub_id = data.sub_id;
            }
            if (data.farm_element != null) {
                message.farm_element = data.farm_element;
            }
            if (data.cost != null) {
                message.cost = data.cost;
            }
            if (data.approx_time != null) {
                message.approx_time = data.approx_time;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.farm_index != null) {
                message.farm_index = data.farm_index;
            }
            if (data.soul_eggs != null) {
                message.soul_eggs = data.soul_eggs;
            }
            if (data.tickets_spent != null) {
                message.tickets_spent = data.tickets_spent;
            }
            if (data.gold_spent != null) {
                message.gold_spent = data.gold_spent;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                user_id?: string;
                action?: string;
                sub_id?: string;
                farm_element?: ShellDB.FarmElement;
                cost?: number;
                approx_time?: number;
                version?: string;
                farm_index?: number;
                soul_eggs?: number;
                tickets_spent?: number;
                gold_spent?: number;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.action != null) {
                data.action = this.action;
            }
            if (this.sub_id != null) {
                data.sub_id = this.sub_id;
            }
            if (this.farm_element != null) {
                data.farm_element = this.farm_element;
            }
            if (this.cost != null) {
                data.cost = this.cost;
            }
            if (this.approx_time != null) {
                data.approx_time = this.approx_time;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.farm_index != null) {
                data.farm_index = this.farm_index;
            }
            if (this.soul_eggs != null) {
                data.soul_eggs = this.soul_eggs;
            }
            if (this.tickets_spent != null) {
                data.tickets_spent = this.tickets_spent;
            }
            if (this.gold_spent != null) {
                data.gold_spent = this.gold_spent;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(8, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_user_id && this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.has_action && this.action.length)
                writer.writeString(2, this.action);
            if (this.has_sub_id && this.sub_id.length)
                writer.writeString(3, this.sub_id);
            if (this.has_farm_element)
                writer.writeEnum(9, this.farm_element);
            if (this.has_cost)
                writer.writeUint32(4, this.cost);
            if (this.has_approx_time)
                writer.writeDouble(5, this.approx_time);
            if (this.has_version && this.version.length)
                writer.writeString(6, this.version);
            if (this.has_farm_index)
                writer.writeInt32(7, this.farm_index);
            if (this.has_soul_eggs)
                writer.writeDouble(10, this.soul_eggs);
            if (this.has_tickets_spent)
                writer.writeUint64(11, this.tickets_spent);
            if (this.has_gold_spent)
                writer.writeUint64(12, this.gold_spent);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellsActionLog {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellsActionLog();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 8:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.action = reader.readString();
                        break;
                    case 3:
                        message.sub_id = reader.readString();
                        break;
                    case 9:
                        message.farm_element = reader.readEnum();
                        break;
                    case 4:
                        message.cost = reader.readUint32();
                        break;
                    case 5:
                        message.approx_time = reader.readDouble();
                        break;
                    case 6:
                        message.version = reader.readString();
                        break;
                    case 7:
                        message.farm_index = reader.readInt32();
                        break;
                    case 10:
                        message.soul_eggs = reader.readDouble();
                        break;
                    case 11:
                        message.tickets_spent = reader.readUint64();
                        break;
                    case 12:
                        message.gold_spent = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShellsActionLog {
            return ShellsActionLog.deserialize(bytes);
        }
    }
    export class SubmitShellShowcaseRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            local_id?: string;
            user_id?: string;
            public_username?: boolean;
            farm_config?: ShellDB.FarmConfiguration;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("local_id" in data && data.local_id != undefined) {
                    this.local_id = data.local_id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("public_username" in data && data.public_username != undefined) {
                    this.public_username = data.public_username;
                }
                if ("farm_config" in data && data.farm_config != undefined) {
                    this.farm_config = data.farm_config;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 4) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get local_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set local_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_local_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_user_id() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get public_username() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set public_username(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_public_username() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get farm_config() {
            return pb_1.Message.getWrapperField(this, ShellDB.FarmConfiguration, 3) as ShellDB.FarmConfiguration;
        }
        set farm_config(value: ShellDB.FarmConfiguration) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_farm_config() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            local_id?: string;
            user_id?: string;
            public_username?: boolean;
            farm_config?: ReturnType<typeof ShellDB.FarmConfiguration.prototype.toObject>;
        }): SubmitShellShowcaseRequest {
            const message = new SubmitShellShowcaseRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.local_id != null) {
                message.local_id = data.local_id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.public_username != null) {
                message.public_username = data.public_username;
            }
            if (data.farm_config != null) {
                message.farm_config = ShellDB.FarmConfiguration.fromObject(data.farm_config);
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                local_id?: string;
                user_id?: string;
                public_username?: boolean;
                farm_config?: ReturnType<typeof ShellDB.FarmConfiguration.prototype.toObject>;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.local_id != null) {
                data.local_id = this.local_id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.public_username != null) {
                data.public_username = this.public_username;
            }
            if (this.farm_config != null) {
                data.farm_config = this.farm_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(4, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_local_id && this.local_id.length)
                writer.writeString(1, this.local_id);
            if (this.has_user_id && this.user_id.length)
                writer.writeString(2, this.user_id);
            if (this.has_public_username)
                writer.writeBool(5, this.public_username);
            if (this.has_farm_config)
                writer.writeMessage(3, this.farm_config, () => this.farm_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitShellShowcaseRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitShellShowcaseRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 4:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.local_id = reader.readString();
                        break;
                    case 2:
                        message.user_id = reader.readString();
                        break;
                    case 5:
                        message.public_username = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.farm_config, () => message.farm_config = ShellDB.FarmConfiguration.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubmitShellShowcaseRequest {
            return SubmitShellShowcaseRequest.deserialize(bytes);
        }
    }
    export class ShellShowcase extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            top: ShellShowcaseListingInfo[];
            featured: ShellShowcaseListingInfo[];
            fresh: ShellShowcaseListingInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.top = data.top;
                this.featured = data.featured;
                this.fresh = data.fresh;
            }
        }
        get top() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellShowcaseListingInfo, 1) as ShellShowcaseListingInfo[];
        }
        set top(value: ShellShowcaseListingInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get featured() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellShowcaseListingInfo, 2) as ShellShowcaseListingInfo[];
        }
        set featured(value: ShellShowcaseListingInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get fresh() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellShowcaseListingInfo, 3) as ShellShowcaseListingInfo[];
        }
        set fresh(value: ShellShowcaseListingInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            top?: ReturnType<typeof ShellShowcaseListingInfo.prototype.toObject>[];
            featured?: ReturnType<typeof ShellShowcaseListingInfo.prototype.toObject>[];
            fresh?: ReturnType<typeof ShellShowcaseListingInfo.prototype.toObject>[];
        }): ShellShowcase {
            const message = new ShellShowcase({
                top: data.top.map(item => ShellShowcaseListingInfo.fromObject(item)),
                featured: data.featured.map(item => ShellShowcaseListingInfo.fromObject(item)),
                fresh: data.fresh.map(item => ShellShowcaseListingInfo.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                top?: ReturnType<typeof ShellShowcaseListingInfo.prototype.toObject>[];
                featured?: ReturnType<typeof ShellShowcaseListingInfo.prototype.toObject>[];
                fresh?: ReturnType<typeof ShellShowcaseListingInfo.prototype.toObject>[];
            } = {};
            if (this.top != null) {
                data.top = this.top.map((item: ShellShowcaseListingInfo) => item.toObject());
            }
            if (this.featured != null) {
                data.featured = this.featured.map((item: ShellShowcaseListingInfo) => item.toObject());
            }
            if (this.fresh != null) {
                data.fresh = this.fresh.map((item: ShellShowcaseListingInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.top.length)
                writer.writeRepeatedMessage(1, this.top, (item: ShellShowcaseListingInfo) => item.serialize(writer));
            if (this.featured.length)
                writer.writeRepeatedMessage(2, this.featured, (item: ShellShowcaseListingInfo) => item.serialize(writer));
            if (this.fresh.length)
                writer.writeRepeatedMessage(3, this.fresh, (item: ShellShowcaseListingInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellShowcase {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellShowcase();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.top, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ShellShowcaseListingInfo.deserialize(reader), ShellShowcaseListingInfo));
                        break;
                    case 2:
                        reader.readMessage(message.featured, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ShellShowcaseListingInfo.deserialize(reader), ShellShowcaseListingInfo));
                        break;
                    case 3:
                        reader.readMessage(message.fresh, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ShellShowcaseListingInfo.deserialize(reader), ShellShowcaseListingInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShellShowcase {
            return ShellShowcase.deserialize(bytes);
        }
    }
    export class ShellShowcaseListingInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            local_id?: string;
            name?: string;
            description?: string;
            is_new?: boolean;
            creator_name?: string;
            status?: ShellShowcaseListingInfo.Status;
            farm_config?: ShellDB.FarmConfiguration;
            sales?: number;
            gross?: number;
            views?: number;
            equips?: number;
            likes?: number;
            dislikes?: number;
            share_url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("local_id" in data && data.local_id != undefined) {
                    this.local_id = data.local_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("is_new" in data && data.is_new != undefined) {
                    this.is_new = data.is_new;
                }
                if ("creator_name" in data && data.creator_name != undefined) {
                    this.creator_name = data.creator_name;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("farm_config" in data && data.farm_config != undefined) {
                    this.farm_config = data.farm_config;
                }
                if ("sales" in data && data.sales != undefined) {
                    this.sales = data.sales;
                }
                if ("gross" in data && data.gross != undefined) {
                    this.gross = data.gross;
                }
                if ("views" in data && data.views != undefined) {
                    this.views = data.views;
                }
                if ("equips" in data && data.equips != undefined) {
                    this.equips = data.equips;
                }
                if ("likes" in data && data.likes != undefined) {
                    this.likes = data.likes;
                }
                if ("dislikes" in data && data.dislikes != undefined) {
                    this.dislikes = data.dislikes;
                }
                if ("share_url" in data && data.share_url != undefined) {
                    this.share_url = data.share_url;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get local_id() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set local_id(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_local_id() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_name() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_description() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get is_new() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set is_new(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_is_new() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get creator_name() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set creator_name(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_creator_name() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 11, ShellShowcaseListingInfo.Status.NONE) as ShellShowcaseListingInfo.Status;
        }
        set status(value: ShellShowcaseListingInfo.Status) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get farm_config() {
            return pb_1.Message.getWrapperField(this, ShellDB.FarmConfiguration, 4) as ShellDB.FarmConfiguration;
        }
        set farm_config(value: ShellDB.FarmConfiguration) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_farm_config() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get sales() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set sales(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_sales() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get gross() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set gross(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_gross() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get views() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set views(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_views() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get equips() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set equips(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_equips() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get likes() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set likes(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_likes() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get dislikes() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set dislikes(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_dislikes() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get share_url() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set share_url(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_share_url() {
            return pb_1.Message.getField(this, 10) != null;
        }
        static fromObject(data: {
            id?: string;
            local_id?: string;
            name?: string;
            description?: string;
            is_new?: boolean;
            creator_name?: string;
            status?: ShellShowcaseListingInfo.Status;
            farm_config?: ReturnType<typeof ShellDB.FarmConfiguration.prototype.toObject>;
            sales?: number;
            gross?: number;
            views?: number;
            equips?: number;
            likes?: number;
            dislikes?: number;
            share_url?: string;
        }): ShellShowcaseListingInfo {
            const message = new ShellShowcaseListingInfo({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.local_id != null) {
                message.local_id = data.local_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.is_new != null) {
                message.is_new = data.is_new;
            }
            if (data.creator_name != null) {
                message.creator_name = data.creator_name;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.farm_config != null) {
                message.farm_config = ShellDB.FarmConfiguration.fromObject(data.farm_config);
            }
            if (data.sales != null) {
                message.sales = data.sales;
            }
            if (data.gross != null) {
                message.gross = data.gross;
            }
            if (data.views != null) {
                message.views = data.views;
            }
            if (data.equips != null) {
                message.equips = data.equips;
            }
            if (data.likes != null) {
                message.likes = data.likes;
            }
            if (data.dislikes != null) {
                message.dislikes = data.dislikes;
            }
            if (data.share_url != null) {
                message.share_url = data.share_url;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                local_id?: string;
                name?: string;
                description?: string;
                is_new?: boolean;
                creator_name?: string;
                status?: ShellShowcaseListingInfo.Status;
                farm_config?: ReturnType<typeof ShellDB.FarmConfiguration.prototype.toObject>;
                sales?: number;
                gross?: number;
                views?: number;
                equips?: number;
                likes?: number;
                dislikes?: number;
                share_url?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.local_id != null) {
                data.local_id = this.local_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.is_new != null) {
                data.is_new = this.is_new;
            }
            if (this.creator_name != null) {
                data.creator_name = this.creator_name;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.farm_config != null) {
                data.farm_config = this.farm_config.toObject();
            }
            if (this.sales != null) {
                data.sales = this.sales;
            }
            if (this.gross != null) {
                data.gross = this.gross;
            }
            if (this.views != null) {
                data.views = this.views;
            }
            if (this.equips != null) {
                data.equips = this.equips;
            }
            if (this.likes != null) {
                data.likes = this.likes;
            }
            if (this.dislikes != null) {
                data.dislikes = this.dislikes;
            }
            if (this.share_url != null) {
                data.share_url = this.share_url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_id && this.id.length)
                writer.writeString(1, this.id);
            if (this.has_local_id && this.local_id.length)
                writer.writeString(12, this.local_id);
            if (this.has_name && this.name.length)
                writer.writeString(2, this.name);
            if (this.has_description && this.description.length)
                writer.writeString(3, this.description);
            if (this.has_is_new)
                writer.writeBool(15, this.is_new);
            if (this.has_creator_name && this.creator_name.length)
                writer.writeString(14, this.creator_name);
            if (this.has_status)
                writer.writeEnum(11, this.status);
            if (this.has_farm_config)
                writer.writeMessage(4, this.farm_config, () => this.farm_config.serialize(writer));
            if (this.has_sales)
                writer.writeUint32(5, this.sales);
            if (this.has_gross)
                writer.writeUint64(6, this.gross);
            if (this.has_views)
                writer.writeUint64(7, this.views);
            if (this.has_equips)
                writer.writeUint64(13, this.equips);
            if (this.has_likes)
                writer.writeUint32(8, this.likes);
            if (this.has_dislikes)
                writer.writeUint32(9, this.dislikes);
            if (this.has_share_url && this.share_url.length)
                writer.writeString(10, this.share_url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellShowcaseListingInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellShowcaseListingInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 12:
                        message.local_id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 15:
                        message.is_new = reader.readBool();
                        break;
                    case 14:
                        message.creator_name = reader.readString();
                        break;
                    case 11:
                        message.status = reader.readEnum();
                        break;
                    case 4:
                        reader.readMessage(message.farm_config, () => message.farm_config = ShellDB.FarmConfiguration.deserialize(reader));
                        break;
                    case 5:
                        message.sales = reader.readUint32();
                        break;
                    case 6:
                        message.gross = reader.readUint64();
                        break;
                    case 7:
                        message.views = reader.readUint64();
                        break;
                    case 13:
                        message.equips = reader.readUint64();
                        break;
                    case 8:
                        message.likes = reader.readUint32();
                        break;
                    case 9:
                        message.dislikes = reader.readUint32();
                        break;
                    case 10:
                        message.share_url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShellShowcaseListingInfo {
            return ShellShowcaseListingInfo.deserialize(bytes);
        }
    }
    export namespace ShellShowcaseListingInfo {
        export enum Status {
            NONE = 0,
            SUBMITTED = 1,
            LIVE = 2,
            FEATURED = 3,
            FEATURED_ALUM = 5,
            ARCHIVED = 6,
            INVALID = 4
        }
    }
    export class ShowcaseRoyaltyDeliveryConfirmation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            ids: string[];
            amount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                this.ids = data.ids;
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 3) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get ids() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set ids(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_amount() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            ids: string[];
            amount?: number;
        }): ShowcaseRoyaltyDeliveryConfirmation {
            const message = new ShowcaseRoyaltyDeliveryConfirmation({
                ids: data.ids
            });
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                ids: string[];
                amount?: number;
            } = {
                ids: this.ids
            };
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(3, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.ids.length)
                writer.writeRepeatedString(1, this.ids);
            if (this.has_amount)
                writer.writeUint32(2, this.amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShowcaseRoyaltyDeliveryConfirmation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShowcaseRoyaltyDeliveryConfirmation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.amount = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShowcaseRoyaltyDeliveryConfirmation {
            return ShowcaseRoyaltyDeliveryConfirmation.deserialize(bytes);
        }
    }
    export class ShellShowcaseListingSet extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            listings: ShellShowcaseListingInfo[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                this.listings = data.listings;
            }
        }
        get listings() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellShowcaseListingInfo, 1) as ShellShowcaseListingInfo[];
        }
        set listings(value: ShellShowcaseListingInfo[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            listings?: ReturnType<typeof ShellShowcaseListingInfo.prototype.toObject>[];
        }): ShellShowcaseListingSet {
            const message = new ShellShowcaseListingSet({
                listings: data.listings.map(item => ShellShowcaseListingInfo.fromObject(item))
            });
            return message;
        }
        toObject() {
            const data: {
                listings?: ReturnType<typeof ShellShowcaseListingInfo.prototype.toObject>[];
            } = {};
            if (this.listings != null) {
                data.listings = this.listings.map((item: ShellShowcaseListingInfo) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.listings.length)
                writer.writeRepeatedMessage(1, this.listings, (item: ShellShowcaseListingInfo) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellShowcaseListingSet {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellShowcaseListingSet();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.listings, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ShellShowcaseListingInfo.deserialize(reader), ShellShowcaseListingInfo));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShellShowcaseListingSet {
            return ShellShowcaseListingSet.deserialize(bytes);
        }
    }
    export class ShellsActionBatch extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            actions: ShellsActionLog[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                this.actions = data.actions;
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 1) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get actions() {
            return pb_1.Message.getRepeatedWrapperField(this, ShellsActionLog, 2) as ShellsActionLog[];
        }
        set actions(value: ShellsActionLog[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            actions?: ReturnType<typeof ShellsActionLog.prototype.toObject>[];
        }): ShellsActionBatch {
            const message = new ShellsActionBatch({
                actions: data.actions.map(item => ShellsActionLog.fromObject(item))
            });
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                actions?: ReturnType<typeof ShellsActionLog.prototype.toObject>[];
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.actions != null) {
                data.actions = this.actions.map((item: ShellsActionLog) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(1, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.actions.length)
                writer.writeRepeatedMessage(2, this.actions, (item: ShellsActionLog) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShellsActionBatch {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShellsActionBatch();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.actions, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ShellsActionLog.deserialize(reader), ShellsActionLog));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ShellsActionBatch {
            return ShellsActionBatch.deserialize(bytes);
        }
    }
    export class UserVerificationAnalysis extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            overall_status?: UserVerificationAnalysis.Status;
            start_time?: number;
            completion_time?: number;
            num_prestiges?: number;
            soul_eggs?: number;
            eggs_of_prophecy?: number;
            iap_status?: UserVerificationAnalysis.Status;
            verified_pro_permit?: boolean;
            verified_piggy_breaks?: number;
            verified_other_iap?: number;
            unverified_iap?: number;
            gold_earned?: number;
            regular_iap_buyer?: boolean;
            regular_iap_cheater?: boolean;
            artifacts_status?: UserVerificationAnalysis.Status;
            missions_completed?: number;
            artifacts_collected?: number;
            artifacts_consumed?: number;
            artifacts_in_inventory?: number;
            rare_artifacts_in_inventory?: number;
            rare_artifacts_on_server?: number;
            legendary_artifacts_in_inventory?: number;
            legendary_artifacts_on_server?: number;
            gold_spent_crafting?: number;
            excessive_consumes?: boolean;
            excessive_inventory?: boolean;
            excessive_spend?: boolean;
            contracts_status?: UserVerificationAnalysis.Status;
            num_coop_memberships?: number;
            valid_contracts?: number;
            invalid_contracts: string[];
            excessive_eop?: boolean;
            excessive_invalid_contracts?: boolean;
            verified?: boolean;
            verification_override?: boolean;
            verification_override_value?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [17], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("overall_status" in data && data.overall_status != undefined) {
                    this.overall_status = data.overall_status;
                }
                if ("start_time" in data && data.start_time != undefined) {
                    this.start_time = data.start_time;
                }
                if ("completion_time" in data && data.completion_time != undefined) {
                    this.completion_time = data.completion_time;
                }
                if ("num_prestiges" in data && data.num_prestiges != undefined) {
                    this.num_prestiges = data.num_prestiges;
                }
                if ("soul_eggs" in data && data.soul_eggs != undefined) {
                    this.soul_eggs = data.soul_eggs;
                }
                if ("eggs_of_prophecy" in data && data.eggs_of_prophecy != undefined) {
                    this.eggs_of_prophecy = data.eggs_of_prophecy;
                }
                if ("iap_status" in data && data.iap_status != undefined) {
                    this.iap_status = data.iap_status;
                }
                if ("verified_pro_permit" in data && data.verified_pro_permit != undefined) {
                    this.verified_pro_permit = data.verified_pro_permit;
                }
                if ("verified_piggy_breaks" in data && data.verified_piggy_breaks != undefined) {
                    this.verified_piggy_breaks = data.verified_piggy_breaks;
                }
                if ("verified_other_iap" in data && data.verified_other_iap != undefined) {
                    this.verified_other_iap = data.verified_other_iap;
                }
                if ("unverified_iap" in data && data.unverified_iap != undefined) {
                    this.unverified_iap = data.unverified_iap;
                }
                if ("gold_earned" in data && data.gold_earned != undefined) {
                    this.gold_earned = data.gold_earned;
                }
                if ("regular_iap_buyer" in data && data.regular_iap_buyer != undefined) {
                    this.regular_iap_buyer = data.regular_iap_buyer;
                }
                if ("regular_iap_cheater" in data && data.regular_iap_cheater != undefined) {
                    this.regular_iap_cheater = data.regular_iap_cheater;
                }
                if ("artifacts_status" in data && data.artifacts_status != undefined) {
                    this.artifacts_status = data.artifacts_status;
                }
                if ("missions_completed" in data && data.missions_completed != undefined) {
                    this.missions_completed = data.missions_completed;
                }
                if ("artifacts_collected" in data && data.artifacts_collected != undefined) {
                    this.artifacts_collected = data.artifacts_collected;
                }
                if ("artifacts_consumed" in data && data.artifacts_consumed != undefined) {
                    this.artifacts_consumed = data.artifacts_consumed;
                }
                if ("artifacts_in_inventory" in data && data.artifacts_in_inventory != undefined) {
                    this.artifacts_in_inventory = data.artifacts_in_inventory;
                }
                if ("rare_artifacts_in_inventory" in data && data.rare_artifacts_in_inventory != undefined) {
                    this.rare_artifacts_in_inventory = data.rare_artifacts_in_inventory;
                }
                if ("rare_artifacts_on_server" in data && data.rare_artifacts_on_server != undefined) {
                    this.rare_artifacts_on_server = data.rare_artifacts_on_server;
                }
                if ("legendary_artifacts_in_inventory" in data && data.legendary_artifacts_in_inventory != undefined) {
                    this.legendary_artifacts_in_inventory = data.legendary_artifacts_in_inventory;
                }
                if ("legendary_artifacts_on_server" in data && data.legendary_artifacts_on_server != undefined) {
                    this.legendary_artifacts_on_server = data.legendary_artifacts_on_server;
                }
                if ("gold_spent_crafting" in data && data.gold_spent_crafting != undefined) {
                    this.gold_spent_crafting = data.gold_spent_crafting;
                }
                if ("excessive_consumes" in data && data.excessive_consumes != undefined) {
                    this.excessive_consumes = data.excessive_consumes;
                }
                if ("excessive_inventory" in data && data.excessive_inventory != undefined) {
                    this.excessive_inventory = data.excessive_inventory;
                }
                if ("excessive_spend" in data && data.excessive_spend != undefined) {
                    this.excessive_spend = data.excessive_spend;
                }
                if ("contracts_status" in data && data.contracts_status != undefined) {
                    this.contracts_status = data.contracts_status;
                }
                if ("num_coop_memberships" in data && data.num_coop_memberships != undefined) {
                    this.num_coop_memberships = data.num_coop_memberships;
                }
                if ("valid_contracts" in data && data.valid_contracts != undefined) {
                    this.valid_contracts = data.valid_contracts;
                }
                this.invalid_contracts = data.invalid_contracts;
                if ("excessive_eop" in data && data.excessive_eop != undefined) {
                    this.excessive_eop = data.excessive_eop;
                }
                if ("excessive_invalid_contracts" in data && data.excessive_invalid_contracts != undefined) {
                    this.excessive_invalid_contracts = data.excessive_invalid_contracts;
                }
                if ("verified" in data && data.verified != undefined) {
                    this.verified = data.verified;
                }
                if ("verification_override" in data && data.verification_override != undefined) {
                    this.verification_override = data.verification_override;
                }
                if ("verification_override_value" in data && data.verification_override_value != undefined) {
                    this.verification_override_value = data.verification_override_value;
                }
            }
        }
        get overall_status() {
            return pb_1.Message.getFieldWithDefault(this, 1, UserVerificationAnalysis.Status.UNKNOWN) as UserVerificationAnalysis.Status;
        }
        set overall_status(value: UserVerificationAnalysis.Status) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_overall_status() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get start_time() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set start_time(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_start_time() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get completion_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set completion_time(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get has_completion_time() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get num_prestiges() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
        }
        set num_prestiges(value: number) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_num_prestiges() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get soul_eggs() {
            return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
        }
        set soul_eggs(value: number) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_soul_eggs() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get eggs_of_prophecy() {
            return pb_1.Message.getFieldWithDefault(this, 27, 0) as number;
        }
        set eggs_of_prophecy(value: number) {
            pb_1.Message.setField(this, 27, value);
        }
        get has_eggs_of_prophecy() {
            return pb_1.Message.getField(this, 27) != null;
        }
        get iap_status() {
            return pb_1.Message.getFieldWithDefault(this, 18, UserVerificationAnalysis.Status.UNKNOWN) as UserVerificationAnalysis.Status;
        }
        set iap_status(value: UserVerificationAnalysis.Status) {
            pb_1.Message.setField(this, 18, value);
        }
        get has_iap_status() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get verified_pro_permit() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set verified_pro_permit(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_verified_pro_permit() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get verified_piggy_breaks() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set verified_piggy_breaks(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_verified_piggy_breaks() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get verified_other_iap() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set verified_other_iap(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_verified_other_iap() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get unverified_iap() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set unverified_iap(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_unverified_iap() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get gold_earned() {
            return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
        }
        set gold_earned(value: number) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_gold_earned() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get regular_iap_buyer() {
            return pb_1.Message.getFieldWithDefault(this, 22, false) as boolean;
        }
        set regular_iap_buyer(value: boolean) {
            pb_1.Message.setField(this, 22, value);
        }
        get has_regular_iap_buyer() {
            return pb_1.Message.getField(this, 22) != null;
        }
        get regular_iap_cheater() {
            return pb_1.Message.getFieldWithDefault(this, 23, false) as boolean;
        }
        set regular_iap_cheater(value: boolean) {
            pb_1.Message.setField(this, 23, value);
        }
        get has_regular_iap_cheater() {
            return pb_1.Message.getField(this, 23) != null;
        }
        get artifacts_status() {
            return pb_1.Message.getFieldWithDefault(this, 19, UserVerificationAnalysis.Status.UNKNOWN) as UserVerificationAnalysis.Status;
        }
        set artifacts_status(value: UserVerificationAnalysis.Status) {
            pb_1.Message.setField(this, 19, value);
        }
        get has_artifacts_status() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get missions_completed() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set missions_completed(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get has_missions_completed() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get artifacts_collected() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set artifacts_collected(value: number) {
            pb_1.Message.setField(this, 9, value);
        }
        get has_artifacts_collected() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get artifacts_consumed() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set artifacts_consumed(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_artifacts_consumed() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get artifacts_in_inventory() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
        }
        set artifacts_in_inventory(value: number) {
            pb_1.Message.setField(this, 11, value);
        }
        get has_artifacts_in_inventory() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get rare_artifacts_in_inventory() {
            return pb_1.Message.getFieldWithDefault(this, 33, 0) as number;
        }
        set rare_artifacts_in_inventory(value: number) {
            pb_1.Message.setField(this, 33, value);
        }
        get has_rare_artifacts_in_inventory() {
            return pb_1.Message.getField(this, 33) != null;
        }
        get rare_artifacts_on_server() {
            return pb_1.Message.getFieldWithDefault(this, 34, 0) as number;
        }
        set rare_artifacts_on_server(value: number) {
            pb_1.Message.setField(this, 34, value);
        }
        get has_rare_artifacts_on_server() {
            return pb_1.Message.getField(this, 34) != null;
        }
        get legendary_artifacts_in_inventory() {
            return pb_1.Message.getFieldWithDefault(this, 35, 0) as number;
        }
        set legendary_artifacts_in_inventory(value: number) {
            pb_1.Message.setField(this, 35, value);
        }
        get has_legendary_artifacts_in_inventory() {
            return pb_1.Message.getField(this, 35) != null;
        }
        get legendary_artifacts_on_server() {
            return pb_1.Message.getFieldWithDefault(this, 36, 0) as number;
        }
        set legendary_artifacts_on_server(value: number) {
            pb_1.Message.setField(this, 36, value);
        }
        get has_legendary_artifacts_on_server() {
            return pb_1.Message.getField(this, 36) != null;
        }
        get gold_spent_crafting() {
            return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
        }
        set gold_spent_crafting(value: number) {
            pb_1.Message.setField(this, 21, value);
        }
        get has_gold_spent_crafting() {
            return pb_1.Message.getField(this, 21) != null;
        }
        get excessive_consumes() {
            return pb_1.Message.getFieldWithDefault(this, 24, false) as boolean;
        }
        set excessive_consumes(value: boolean) {
            pb_1.Message.setField(this, 24, value);
        }
        get has_excessive_consumes() {
            return pb_1.Message.getField(this, 24) != null;
        }
        get excessive_inventory() {
            return pb_1.Message.getFieldWithDefault(this, 25, false) as boolean;
        }
        set excessive_inventory(value: boolean) {
            pb_1.Message.setField(this, 25, value);
        }
        get has_excessive_inventory() {
            return pb_1.Message.getField(this, 25) != null;
        }
        get excessive_spend() {
            return pb_1.Message.getFieldWithDefault(this, 26, false) as boolean;
        }
        set excessive_spend(value: boolean) {
            pb_1.Message.setField(this, 26, value);
        }
        get has_excessive_spend() {
            return pb_1.Message.getField(this, 26) != null;
        }
        get contracts_status() {
            return pb_1.Message.getFieldWithDefault(this, 20, UserVerificationAnalysis.Status.UNKNOWN) as UserVerificationAnalysis.Status;
        }
        set contracts_status(value: UserVerificationAnalysis.Status) {
            pb_1.Message.setField(this, 20, value);
        }
        get has_contracts_status() {
            return pb_1.Message.getField(this, 20) != null;
        }
        get num_coop_memberships() {
            return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
        }
        set num_coop_memberships(value: number) {
            pb_1.Message.setField(this, 12, value);
        }
        get has_num_coop_memberships() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get valid_contracts() {
            return pb_1.Message.getFieldWithDefault(this, 16, 0) as number;
        }
        set valid_contracts(value: number) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_valid_contracts() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get invalid_contracts() {
            return pb_1.Message.getFieldWithDefault(this, 17, []) as string[];
        }
        set invalid_contracts(value: string[]) {
            pb_1.Message.setField(this, 17, value);
        }
        get excessive_eop() {
            return pb_1.Message.getFieldWithDefault(this, 28, false) as boolean;
        }
        set excessive_eop(value: boolean) {
            pb_1.Message.setField(this, 28, value);
        }
        get has_excessive_eop() {
            return pb_1.Message.getField(this, 28) != null;
        }
        get excessive_invalid_contracts() {
            return pb_1.Message.getFieldWithDefault(this, 29, false) as boolean;
        }
        set excessive_invalid_contracts(value: boolean) {
            pb_1.Message.setField(this, 29, value);
        }
        get has_excessive_invalid_contracts() {
            return pb_1.Message.getField(this, 29) != null;
        }
        get verified() {
            return pb_1.Message.getFieldWithDefault(this, 30, false) as boolean;
        }
        set verified(value: boolean) {
            pb_1.Message.setField(this, 30, value);
        }
        get has_verified() {
            return pb_1.Message.getField(this, 30) != null;
        }
        get verification_override() {
            return pb_1.Message.getFieldWithDefault(this, 31, false) as boolean;
        }
        set verification_override(value: boolean) {
            pb_1.Message.setField(this, 31, value);
        }
        get has_verification_override() {
            return pb_1.Message.getField(this, 31) != null;
        }
        get verification_override_value() {
            return pb_1.Message.getFieldWithDefault(this, 32, false) as boolean;
        }
        set verification_override_value(value: boolean) {
            pb_1.Message.setField(this, 32, value);
        }
        get has_verification_override_value() {
            return pb_1.Message.getField(this, 32) != null;
        }
        static fromObject(data: {
            overall_status?: UserVerificationAnalysis.Status;
            start_time?: number;
            completion_time?: number;
            num_prestiges?: number;
            soul_eggs?: number;
            eggs_of_prophecy?: number;
            iap_status?: UserVerificationAnalysis.Status;
            verified_pro_permit?: boolean;
            verified_piggy_breaks?: number;
            verified_other_iap?: number;
            unverified_iap?: number;
            gold_earned?: number;
            regular_iap_buyer?: boolean;
            regular_iap_cheater?: boolean;
            artifacts_status?: UserVerificationAnalysis.Status;
            missions_completed?: number;
            artifacts_collected?: number;
            artifacts_consumed?: number;
            artifacts_in_inventory?: number;
            rare_artifacts_in_inventory?: number;
            rare_artifacts_on_server?: number;
            legendary_artifacts_in_inventory?: number;
            legendary_artifacts_on_server?: number;
            gold_spent_crafting?: number;
            excessive_consumes?: boolean;
            excessive_inventory?: boolean;
            excessive_spend?: boolean;
            contracts_status?: UserVerificationAnalysis.Status;
            num_coop_memberships?: number;
            valid_contracts?: number;
            invalid_contracts: string[];
            excessive_eop?: boolean;
            excessive_invalid_contracts?: boolean;
            verified?: boolean;
            verification_override?: boolean;
            verification_override_value?: boolean;
        }): UserVerificationAnalysis {
            const message = new UserVerificationAnalysis({
                invalid_contracts: data.invalid_contracts
            });
            if (data.overall_status != null) {
                message.overall_status = data.overall_status;
            }
            if (data.start_time != null) {
                message.start_time = data.start_time;
            }
            if (data.completion_time != null) {
                message.completion_time = data.completion_time;
            }
            if (data.num_prestiges != null) {
                message.num_prestiges = data.num_prestiges;
            }
            if (data.soul_eggs != null) {
                message.soul_eggs = data.soul_eggs;
            }
            if (data.eggs_of_prophecy != null) {
                message.eggs_of_prophecy = data.eggs_of_prophecy;
            }
            if (data.iap_status != null) {
                message.iap_status = data.iap_status;
            }
            if (data.verified_pro_permit != null) {
                message.verified_pro_permit = data.verified_pro_permit;
            }
            if (data.verified_piggy_breaks != null) {
                message.verified_piggy_breaks = data.verified_piggy_breaks;
            }
            if (data.verified_other_iap != null) {
                message.verified_other_iap = data.verified_other_iap;
            }
            if (data.unverified_iap != null) {
                message.unverified_iap = data.unverified_iap;
            }
            if (data.gold_earned != null) {
                message.gold_earned = data.gold_earned;
            }
            if (data.regular_iap_buyer != null) {
                message.regular_iap_buyer = data.regular_iap_buyer;
            }
            if (data.regular_iap_cheater != null) {
                message.regular_iap_cheater = data.regular_iap_cheater;
            }
            if (data.artifacts_status != null) {
                message.artifacts_status = data.artifacts_status;
            }
            if (data.missions_completed != null) {
                message.missions_completed = data.missions_completed;
            }
            if (data.artifacts_collected != null) {
                message.artifacts_collected = data.artifacts_collected;
            }
            if (data.artifacts_consumed != null) {
                message.artifacts_consumed = data.artifacts_consumed;
            }
            if (data.artifacts_in_inventory != null) {
                message.artifacts_in_inventory = data.artifacts_in_inventory;
            }
            if (data.rare_artifacts_in_inventory != null) {
                message.rare_artifacts_in_inventory = data.rare_artifacts_in_inventory;
            }
            if (data.rare_artifacts_on_server != null) {
                message.rare_artifacts_on_server = data.rare_artifacts_on_server;
            }
            if (data.legendary_artifacts_in_inventory != null) {
                message.legendary_artifacts_in_inventory = data.legendary_artifacts_in_inventory;
            }
            if (data.legendary_artifacts_on_server != null) {
                message.legendary_artifacts_on_server = data.legendary_artifacts_on_server;
            }
            if (data.gold_spent_crafting != null) {
                message.gold_spent_crafting = data.gold_spent_crafting;
            }
            if (data.excessive_consumes != null) {
                message.excessive_consumes = data.excessive_consumes;
            }
            if (data.excessive_inventory != null) {
                message.excessive_inventory = data.excessive_inventory;
            }
            if (data.excessive_spend != null) {
                message.excessive_spend = data.excessive_spend;
            }
            if (data.contracts_status != null) {
                message.contracts_status = data.contracts_status;
            }
            if (data.num_coop_memberships != null) {
                message.num_coop_memberships = data.num_coop_memberships;
            }
            if (data.valid_contracts != null) {
                message.valid_contracts = data.valid_contracts;
            }
            if (data.excessive_eop != null) {
                message.excessive_eop = data.excessive_eop;
            }
            if (data.excessive_invalid_contracts != null) {
                message.excessive_invalid_contracts = data.excessive_invalid_contracts;
            }
            if (data.verified != null) {
                message.verified = data.verified;
            }
            if (data.verification_override != null) {
                message.verification_override = data.verification_override;
            }
            if (data.verification_override_value != null) {
                message.verification_override_value = data.verification_override_value;
            }
            return message;
        }
        toObject() {
            const data: {
                overall_status?: UserVerificationAnalysis.Status;
                start_time?: number;
                completion_time?: number;
                num_prestiges?: number;
                soul_eggs?: number;
                eggs_of_prophecy?: number;
                iap_status?: UserVerificationAnalysis.Status;
                verified_pro_permit?: boolean;
                verified_piggy_breaks?: number;
                verified_other_iap?: number;
                unverified_iap?: number;
                gold_earned?: number;
                regular_iap_buyer?: boolean;
                regular_iap_cheater?: boolean;
                artifacts_status?: UserVerificationAnalysis.Status;
                missions_completed?: number;
                artifacts_collected?: number;
                artifacts_consumed?: number;
                artifacts_in_inventory?: number;
                rare_artifacts_in_inventory?: number;
                rare_artifacts_on_server?: number;
                legendary_artifacts_in_inventory?: number;
                legendary_artifacts_on_server?: number;
                gold_spent_crafting?: number;
                excessive_consumes?: boolean;
                excessive_inventory?: boolean;
                excessive_spend?: boolean;
                contracts_status?: UserVerificationAnalysis.Status;
                num_coop_memberships?: number;
                valid_contracts?: number;
                invalid_contracts: string[];
                excessive_eop?: boolean;
                excessive_invalid_contracts?: boolean;
                verified?: boolean;
                verification_override?: boolean;
                verification_override_value?: boolean;
            } = {
                invalid_contracts: this.invalid_contracts
            };
            if (this.overall_status != null) {
                data.overall_status = this.overall_status;
            }
            if (this.start_time != null) {
                data.start_time = this.start_time;
            }
            if (this.completion_time != null) {
                data.completion_time = this.completion_time;
            }
            if (this.num_prestiges != null) {
                data.num_prestiges = this.num_prestiges;
            }
            if (this.soul_eggs != null) {
                data.soul_eggs = this.soul_eggs;
            }
            if (this.eggs_of_prophecy != null) {
                data.eggs_of_prophecy = this.eggs_of_prophecy;
            }
            if (this.iap_status != null) {
                data.iap_status = this.iap_status;
            }
            if (this.verified_pro_permit != null) {
                data.verified_pro_permit = this.verified_pro_permit;
            }
            if (this.verified_piggy_breaks != null) {
                data.verified_piggy_breaks = this.verified_piggy_breaks;
            }
            if (this.verified_other_iap != null) {
                data.verified_other_iap = this.verified_other_iap;
            }
            if (this.unverified_iap != null) {
                data.unverified_iap = this.unverified_iap;
            }
            if (this.gold_earned != null) {
                data.gold_earned = this.gold_earned;
            }
            if (this.regular_iap_buyer != null) {
                data.regular_iap_buyer = this.regular_iap_buyer;
            }
            if (this.regular_iap_cheater != null) {
                data.regular_iap_cheater = this.regular_iap_cheater;
            }
            if (this.artifacts_status != null) {
                data.artifacts_status = this.artifacts_status;
            }
            if (this.missions_completed != null) {
                data.missions_completed = this.missions_completed;
            }
            if (this.artifacts_collected != null) {
                data.artifacts_collected = this.artifacts_collected;
            }
            if (this.artifacts_consumed != null) {
                data.artifacts_consumed = this.artifacts_consumed;
            }
            if (this.artifacts_in_inventory != null) {
                data.artifacts_in_inventory = this.artifacts_in_inventory;
            }
            if (this.rare_artifacts_in_inventory != null) {
                data.rare_artifacts_in_inventory = this.rare_artifacts_in_inventory;
            }
            if (this.rare_artifacts_on_server != null) {
                data.rare_artifacts_on_server = this.rare_artifacts_on_server;
            }
            if (this.legendary_artifacts_in_inventory != null) {
                data.legendary_artifacts_in_inventory = this.legendary_artifacts_in_inventory;
            }
            if (this.legendary_artifacts_on_server != null) {
                data.legendary_artifacts_on_server = this.legendary_artifacts_on_server;
            }
            if (this.gold_spent_crafting != null) {
                data.gold_spent_crafting = this.gold_spent_crafting;
            }
            if (this.excessive_consumes != null) {
                data.excessive_consumes = this.excessive_consumes;
            }
            if (this.excessive_inventory != null) {
                data.excessive_inventory = this.excessive_inventory;
            }
            if (this.excessive_spend != null) {
                data.excessive_spend = this.excessive_spend;
            }
            if (this.contracts_status != null) {
                data.contracts_status = this.contracts_status;
            }
            if (this.num_coop_memberships != null) {
                data.num_coop_memberships = this.num_coop_memberships;
            }
            if (this.valid_contracts != null) {
                data.valid_contracts = this.valid_contracts;
            }
            if (this.excessive_eop != null) {
                data.excessive_eop = this.excessive_eop;
            }
            if (this.excessive_invalid_contracts != null) {
                data.excessive_invalid_contracts = this.excessive_invalid_contracts;
            }
            if (this.verified != null) {
                data.verified = this.verified;
            }
            if (this.verification_override != null) {
                data.verification_override = this.verification_override;
            }
            if (this.verification_override_value != null) {
                data.verification_override_value = this.verification_override_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_overall_status)
                writer.writeEnum(1, this.overall_status);
            if (this.has_start_time)
                writer.writeDouble(2, this.start_time);
            if (this.has_completion_time)
                writer.writeDouble(3, this.completion_time);
            if (this.has_num_prestiges)
                writer.writeDouble(14, this.num_prestiges);
            if (this.has_soul_eggs)
                writer.writeDouble(15, this.soul_eggs);
            if (this.has_eggs_of_prophecy)
                writer.writeUint32(27, this.eggs_of_prophecy);
            if (this.has_iap_status)
                writer.writeEnum(18, this.iap_status);
            if (this.has_verified_pro_permit)
                writer.writeBool(4, this.verified_pro_permit);
            if (this.has_verified_piggy_breaks)
                writer.writeUint32(5, this.verified_piggy_breaks);
            if (this.has_verified_other_iap)
                writer.writeUint32(6, this.verified_other_iap);
            if (this.has_unverified_iap)
                writer.writeUint32(7, this.unverified_iap);
            if (this.has_gold_earned)
                writer.writeDouble(13, this.gold_earned);
            if (this.has_regular_iap_buyer)
                writer.writeBool(22, this.regular_iap_buyer);
            if (this.has_regular_iap_cheater)
                writer.writeBool(23, this.regular_iap_cheater);
            if (this.has_artifacts_status)
                writer.writeEnum(19, this.artifacts_status);
            if (this.has_missions_completed)
                writer.writeUint32(8, this.missions_completed);
            if (this.has_artifacts_collected)
                writer.writeDouble(9, this.artifacts_collected);
            if (this.has_artifacts_consumed)
                writer.writeDouble(10, this.artifacts_consumed);
            if (this.has_artifacts_in_inventory)
                writer.writeDouble(11, this.artifacts_in_inventory);
            if (this.has_rare_artifacts_in_inventory)
                writer.writeUint64(33, this.rare_artifacts_in_inventory);
            if (this.has_rare_artifacts_on_server)
                writer.writeUint64(34, this.rare_artifacts_on_server);
            if (this.has_legendary_artifacts_in_inventory)
                writer.writeUint64(35, this.legendary_artifacts_in_inventory);
            if (this.has_legendary_artifacts_on_server)
                writer.writeUint64(36, this.legendary_artifacts_on_server);
            if (this.has_gold_spent_crafting)
                writer.writeDouble(21, this.gold_spent_crafting);
            if (this.has_excessive_consumes)
                writer.writeBool(24, this.excessive_consumes);
            if (this.has_excessive_inventory)
                writer.writeBool(25, this.excessive_inventory);
            if (this.has_excessive_spend)
                writer.writeBool(26, this.excessive_spend);
            if (this.has_contracts_status)
                writer.writeEnum(20, this.contracts_status);
            if (this.has_num_coop_memberships)
                writer.writeUint32(12, this.num_coop_memberships);
            if (this.has_valid_contracts)
                writer.writeUint32(16, this.valid_contracts);
            if (this.invalid_contracts.length)
                writer.writeRepeatedString(17, this.invalid_contracts);
            if (this.has_excessive_eop)
                writer.writeBool(28, this.excessive_eop);
            if (this.has_excessive_invalid_contracts)
                writer.writeBool(29, this.excessive_invalid_contracts);
            if (this.has_verified)
                writer.writeBool(30, this.verified);
            if (this.has_verification_override)
                writer.writeBool(31, this.verification_override);
            if (this.has_verification_override_value)
                writer.writeBool(32, this.verification_override_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserVerificationAnalysis {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserVerificationAnalysis();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.overall_status = reader.readEnum();
                        break;
                    case 2:
                        message.start_time = reader.readDouble();
                        break;
                    case 3:
                        message.completion_time = reader.readDouble();
                        break;
                    case 14:
                        message.num_prestiges = reader.readDouble();
                        break;
                    case 15:
                        message.soul_eggs = reader.readDouble();
                        break;
                    case 27:
                        message.eggs_of_prophecy = reader.readUint32();
                        break;
                    case 18:
                        message.iap_status = reader.readEnum();
                        break;
                    case 4:
                        message.verified_pro_permit = reader.readBool();
                        break;
                    case 5:
                        message.verified_piggy_breaks = reader.readUint32();
                        break;
                    case 6:
                        message.verified_other_iap = reader.readUint32();
                        break;
                    case 7:
                        message.unverified_iap = reader.readUint32();
                        break;
                    case 13:
                        message.gold_earned = reader.readDouble();
                        break;
                    case 22:
                        message.regular_iap_buyer = reader.readBool();
                        break;
                    case 23:
                        message.regular_iap_cheater = reader.readBool();
                        break;
                    case 19:
                        message.artifacts_status = reader.readEnum();
                        break;
                    case 8:
                        message.missions_completed = reader.readUint32();
                        break;
                    case 9:
                        message.artifacts_collected = reader.readDouble();
                        break;
                    case 10:
                        message.artifacts_consumed = reader.readDouble();
                        break;
                    case 11:
                        message.artifacts_in_inventory = reader.readDouble();
                        break;
                    case 33:
                        message.rare_artifacts_in_inventory = reader.readUint64();
                        break;
                    case 34:
                        message.rare_artifacts_on_server = reader.readUint64();
                        break;
                    case 35:
                        message.legendary_artifacts_in_inventory = reader.readUint64();
                        break;
                    case 36:
                        message.legendary_artifacts_on_server = reader.readUint64();
                        break;
                    case 21:
                        message.gold_spent_crafting = reader.readDouble();
                        break;
                    case 24:
                        message.excessive_consumes = reader.readBool();
                        break;
                    case 25:
                        message.excessive_inventory = reader.readBool();
                        break;
                    case 26:
                        message.excessive_spend = reader.readBool();
                        break;
                    case 20:
                        message.contracts_status = reader.readEnum();
                        break;
                    case 12:
                        message.num_coop_memberships = reader.readUint32();
                        break;
                    case 16:
                        message.valid_contracts = reader.readUint32();
                        break;
                    case 17:
                        pb_1.Message.addToRepeatedField(message, 17, reader.readString());
                        break;
                    case 28:
                        message.excessive_eop = reader.readBool();
                        break;
                    case 29:
                        message.excessive_invalid_contracts = reader.readBool();
                        break;
                    case 30:
                        message.verified = reader.readBool();
                        break;
                    case 31:
                        message.verification_override = reader.readBool();
                        break;
                    case 32:
                        message.verification_override_value = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserVerificationAnalysis {
            return UserVerificationAnalysis.deserialize(bytes);
        }
    }
    export namespace UserVerificationAnalysis {
        export enum Status {
            UNKNOWN = 0,
            PROCESSING = 1,
            COMPLETE = 2
        }
    }
    export class UserSubscriptionInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            subscription_level?: UserSubscriptionInfo.Level;
            next_subscription_level?: UserSubscriptionInfo.Level;
            lock_next_subscription_level?: boolean;
            platform?: Platform;
            original_transaction_id?: string;
            linked_transaction_id?: string;
            acknowledged?: boolean;
            first_subscribed?: number;
            period_end?: number;
            status?: UserSubscriptionInfo.Status;
            store_status?: string;
            auto_renew?: boolean;
            sandbox?: boolean;
            last_updated?: number;
            history: UserSubscriptionInfo.HistoryEntry[];
            past_user_ids: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9, 11], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("subscription_level" in data && data.subscription_level != undefined) {
                    this.subscription_level = data.subscription_level;
                }
                if ("next_subscription_level" in data && data.next_subscription_level != undefined) {
                    this.next_subscription_level = data.next_subscription_level;
                }
                if ("lock_next_subscription_level" in data && data.lock_next_subscription_level != undefined) {
                    this.lock_next_subscription_level = data.lock_next_subscription_level;
                }
                if ("platform" in data && data.platform != undefined) {
                    this.platform = data.platform;
                }
                if ("original_transaction_id" in data && data.original_transaction_id != undefined) {
                    this.original_transaction_id = data.original_transaction_id;
                }
                if ("linked_transaction_id" in data && data.linked_transaction_id != undefined) {
                    this.linked_transaction_id = data.linked_transaction_id;
                }
                if ("acknowledged" in data && data.acknowledged != undefined) {
                    this.acknowledged = data.acknowledged;
                }
                if ("first_subscribed" in data && data.first_subscribed != undefined) {
                    this.first_subscribed = data.first_subscribed;
                }
                if ("period_end" in data && data.period_end != undefined) {
                    this.period_end = data.period_end;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("store_status" in data && data.store_status != undefined) {
                    this.store_status = data.store_status;
                }
                if ("auto_renew" in data && data.auto_renew != undefined) {
                    this.auto_renew = data.auto_renew;
                }
                if ("sandbox" in data && data.sandbox != undefined) {
                    this.sandbox = data.sandbox;
                }
                if ("last_updated" in data && data.last_updated != undefined) {
                    this.last_updated = data.last_updated;
                }
                this.history = data.history;
                this.past_user_ids = data.past_user_ids;
            }
        }
        get subscription_level() {
            return pb_1.Message.getFieldWithDefault(this, 13, UserSubscriptionInfo.Level.STANDARD) as UserSubscriptionInfo.Level;
        }
        set subscription_level(value: UserSubscriptionInfo.Level) {
            pb_1.Message.setField(this, 13, value);
        }
        get has_subscription_level() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get next_subscription_level() {
            return pb_1.Message.getFieldWithDefault(this, 15, UserSubscriptionInfo.Level.STANDARD) as UserSubscriptionInfo.Level;
        }
        set next_subscription_level(value: UserSubscriptionInfo.Level) {
            pb_1.Message.setField(this, 15, value);
        }
        get has_next_subscription_level() {
            return pb_1.Message.getField(this, 15) != null;
        }
        get lock_next_subscription_level() {
            return pb_1.Message.getFieldWithDefault(this, 18, false) as boolean;
        }
        set lock_next_subscription_level(value: boolean) {
            pb_1.Message.setField(this, 18, value);
        }
        get has_lock_next_subscription_level() {
            return pb_1.Message.getField(this, 18) != null;
        }
        get platform() {
            return pb_1.Message.getFieldWithDefault(this, 10, Platform.UNKNOWN_PLATFORM) as Platform;
        }
        set platform(value: Platform) {
            pb_1.Message.setField(this, 10, value);
        }
        get has_platform() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get original_transaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set original_transaction_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_original_transaction_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get linked_transaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
        }
        set linked_transaction_id(value: string) {
            pb_1.Message.setField(this, 16, value);
        }
        get has_linked_transaction_id() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get acknowledged() {
            return pb_1.Message.getFieldWithDefault(this, 17, false) as boolean;
        }
        set acknowledged(value: boolean) {
            pb_1.Message.setField(this, 17, value);
        }
        get has_acknowledged() {
            return pb_1.Message.getField(this, 17) != null;
        }
        get first_subscribed() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set first_subscribed(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_first_subscribed() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get period_end() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set period_end(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get has_period_end() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, UserSubscriptionInfo.Status.UNKNOWN) as UserSubscriptionInfo.Status;
        }
        set status(value: UserSubscriptionInfo.Status) {
            pb_1.Message.setField(this, 5, value);
        }
        get has_status() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get store_status() {
            return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
        }
        set store_status(value: string) {
            pb_1.Message.setField(this, 14, value);
        }
        get has_store_status() {
            return pb_1.Message.getField(this, 14) != null;
        }
        get auto_renew() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set auto_renew(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get has_auto_renew() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get sandbox() {
            return pb_1.Message.getFieldWithDefault(this, 19, false) as boolean;
        }
        set sandbox(value: boolean) {
            pb_1.Message.setField(this, 19, value);
        }
        get has_sandbox() {
            return pb_1.Message.getField(this, 19) != null;
        }
        get last_updated() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set last_updated(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get has_last_updated() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get history() {
            return pb_1.Message.getRepeatedWrapperField(this, UserSubscriptionInfo.HistoryEntry, 9) as UserSubscriptionInfo.HistoryEntry[];
        }
        set history(value: UserSubscriptionInfo.HistoryEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get past_user_ids() {
            return pb_1.Message.getFieldWithDefault(this, 11, []) as string[];
        }
        set past_user_ids(value: string[]) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            subscription_level?: UserSubscriptionInfo.Level;
            next_subscription_level?: UserSubscriptionInfo.Level;
            lock_next_subscription_level?: boolean;
            platform?: Platform;
            original_transaction_id?: string;
            linked_transaction_id?: string;
            acknowledged?: boolean;
            first_subscribed?: number;
            period_end?: number;
            status?: UserSubscriptionInfo.Status;
            store_status?: string;
            auto_renew?: boolean;
            sandbox?: boolean;
            last_updated?: number;
            history?: ReturnType<typeof UserSubscriptionInfo.HistoryEntry.prototype.toObject>[];
            past_user_ids: string[];
        }): UserSubscriptionInfo {
            const message = new UserSubscriptionInfo({
                history: data.history.map(item => UserSubscriptionInfo.HistoryEntry.fromObject(item)),
                past_user_ids: data.past_user_ids
            });
            if (data.subscription_level != null) {
                message.subscription_level = data.subscription_level;
            }
            if (data.next_subscription_level != null) {
                message.next_subscription_level = data.next_subscription_level;
            }
            if (data.lock_next_subscription_level != null) {
                message.lock_next_subscription_level = data.lock_next_subscription_level;
            }
            if (data.platform != null) {
                message.platform = data.platform;
            }
            if (data.original_transaction_id != null) {
                message.original_transaction_id = data.original_transaction_id;
            }
            if (data.linked_transaction_id != null) {
                message.linked_transaction_id = data.linked_transaction_id;
            }
            if (data.acknowledged != null) {
                message.acknowledged = data.acknowledged;
            }
            if (data.first_subscribed != null) {
                message.first_subscribed = data.first_subscribed;
            }
            if (data.period_end != null) {
                message.period_end = data.period_end;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.store_status != null) {
                message.store_status = data.store_status;
            }
            if (data.auto_renew != null) {
                message.auto_renew = data.auto_renew;
            }
            if (data.sandbox != null) {
                message.sandbox = data.sandbox;
            }
            if (data.last_updated != null) {
                message.last_updated = data.last_updated;
            }
            return message;
        }
        toObject() {
            const data: {
                subscription_level?: UserSubscriptionInfo.Level;
                next_subscription_level?: UserSubscriptionInfo.Level;
                lock_next_subscription_level?: boolean;
                platform?: Platform;
                original_transaction_id?: string;
                linked_transaction_id?: string;
                acknowledged?: boolean;
                first_subscribed?: number;
                period_end?: number;
                status?: UserSubscriptionInfo.Status;
                store_status?: string;
                auto_renew?: boolean;
                sandbox?: boolean;
                last_updated?: number;
                history?: ReturnType<typeof UserSubscriptionInfo.HistoryEntry.prototype.toObject>[];
                past_user_ids: string[];
            } = {
                past_user_ids: this.past_user_ids
            };
            if (this.subscription_level != null) {
                data.subscription_level = this.subscription_level;
            }
            if (this.next_subscription_level != null) {
                data.next_subscription_level = this.next_subscription_level;
            }
            if (this.lock_next_subscription_level != null) {
                data.lock_next_subscription_level = this.lock_next_subscription_level;
            }
            if (this.platform != null) {
                data.platform = this.platform;
            }
            if (this.original_transaction_id != null) {
                data.original_transaction_id = this.original_transaction_id;
            }
            if (this.linked_transaction_id != null) {
                data.linked_transaction_id = this.linked_transaction_id;
            }
            if (this.acknowledged != null) {
                data.acknowledged = this.acknowledged;
            }
            if (this.first_subscribed != null) {
                data.first_subscribed = this.first_subscribed;
            }
            if (this.period_end != null) {
                data.period_end = this.period_end;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.store_status != null) {
                data.store_status = this.store_status;
            }
            if (this.auto_renew != null) {
                data.auto_renew = this.auto_renew;
            }
            if (this.sandbox != null) {
                data.sandbox = this.sandbox;
            }
            if (this.last_updated != null) {
                data.last_updated = this.last_updated;
            }
            if (this.history != null) {
                data.history = this.history.map((item: UserSubscriptionInfo.HistoryEntry) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_subscription_level)
                writer.writeEnum(13, this.subscription_level);
            if (this.has_next_subscription_level)
                writer.writeEnum(15, this.next_subscription_level);
            if (this.has_lock_next_subscription_level)
                writer.writeBool(18, this.lock_next_subscription_level);
            if (this.has_platform)
                writer.writeEnum(10, this.platform);
            if (this.has_original_transaction_id && this.original_transaction_id.length)
                writer.writeString(1, this.original_transaction_id);
            if (this.has_linked_transaction_id && this.linked_transaction_id.length)
                writer.writeString(16, this.linked_transaction_id);
            if (this.has_acknowledged)
                writer.writeBool(17, this.acknowledged);
            if (this.has_first_subscribed)
                writer.writeDouble(2, this.first_subscribed);
            if (this.has_period_end)
                writer.writeDouble(4, this.period_end);
            if (this.has_status)
                writer.writeEnum(5, this.status);
            if (this.has_store_status && this.store_status.length)
                writer.writeString(14, this.store_status);
            if (this.has_auto_renew)
                writer.writeBool(6, this.auto_renew);
            if (this.has_sandbox)
                writer.writeBool(19, this.sandbox);
            if (this.has_last_updated)
                writer.writeDouble(7, this.last_updated);
            if (this.history.length)
                writer.writeRepeatedMessage(9, this.history, (item: UserSubscriptionInfo.HistoryEntry) => item.serialize(writer));
            if (this.past_user_ids.length)
                writer.writeRepeatedString(11, this.past_user_ids);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserSubscriptionInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserSubscriptionInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 13:
                        message.subscription_level = reader.readEnum();
                        break;
                    case 15:
                        message.next_subscription_level = reader.readEnum();
                        break;
                    case 18:
                        message.lock_next_subscription_level = reader.readBool();
                        break;
                    case 10:
                        message.platform = reader.readEnum();
                        break;
                    case 1:
                        message.original_transaction_id = reader.readString();
                        break;
                    case 16:
                        message.linked_transaction_id = reader.readString();
                        break;
                    case 17:
                        message.acknowledged = reader.readBool();
                        break;
                    case 2:
                        message.first_subscribed = reader.readDouble();
                        break;
                    case 4:
                        message.period_end = reader.readDouble();
                        break;
                    case 5:
                        message.status = reader.readEnum();
                        break;
                    case 14:
                        message.store_status = reader.readString();
                        break;
                    case 6:
                        message.auto_renew = reader.readBool();
                        break;
                    case 19:
                        message.sandbox = reader.readBool();
                        break;
                    case 7:
                        message.last_updated = reader.readDouble();
                        break;
                    case 9:
                        reader.readMessage(message.history, () => pb_1.Message.addToRepeatedWrapperField(message, 9, UserSubscriptionInfo.HistoryEntry.deserialize(reader), UserSubscriptionInfo.HistoryEntry));
                        break;
                    case 11:
                        pb_1.Message.addToRepeatedField(message, 11, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserSubscriptionInfo {
            return UserSubscriptionInfo.deserialize(bytes);
        }
    }
    export namespace UserSubscriptionInfo {
        export enum Level {
            STANDARD = 0,
            PRO = 1
        }
        export enum Status {
            UNKNOWN = 0,
            ACTIVE = 1,
            EXPIRED = 2,
            REVOKED = 3,
            GRACE_PERIOD = 4,
            PAUSE_HOLD = 5
        }
        export class HistoryEntry extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                timestamp?: number;
                message_id?: string;
                message?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("timestamp" in data && data.timestamp != undefined) {
                        this.timestamp = data.timestamp;
                    }
                    if ("message_id" in data && data.message_id != undefined) {
                        this.message_id = data.message_id;
                    }
                    if ("message" in data && data.message != undefined) {
                        this.message = data.message;
                    }
                }
            }
            get timestamp() {
                return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
            }
            set timestamp(value: number) {
                pb_1.Message.setField(this, 1, value);
            }
            get has_timestamp() {
                return pb_1.Message.getField(this, 1) != null;
            }
            get message_id() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set message_id(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            get has_message_id() {
                return pb_1.Message.getField(this, 2) != null;
            }
            get message() {
                return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
            }
            set message(value: string) {
                pb_1.Message.setField(this, 3, value);
            }
            get has_message() {
                return pb_1.Message.getField(this, 3) != null;
            }
            static fromObject(data: {
                timestamp?: number;
                message_id?: string;
                message?: string;
            }): HistoryEntry {
                const message = new HistoryEntry({});
                if (data.timestamp != null) {
                    message.timestamp = data.timestamp;
                }
                if (data.message_id != null) {
                    message.message_id = data.message_id;
                }
                if (data.message != null) {
                    message.message = data.message;
                }
                return message;
            }
            toObject() {
                const data: {
                    timestamp?: number;
                    message_id?: string;
                    message?: string;
                } = {};
                if (this.timestamp != null) {
                    data.timestamp = this.timestamp;
                }
                if (this.message_id != null) {
                    data.message_id = this.message_id;
                }
                if (this.message != null) {
                    data.message = this.message;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.has_timestamp)
                    writer.writeDouble(1, this.timestamp);
                if (this.has_message_id && this.message_id.length)
                    writer.writeString(2, this.message_id);
                if (this.has_message && this.message.length)
                    writer.writeString(3, this.message);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HistoryEntry {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HistoryEntry();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.timestamp = reader.readDouble();
                            break;
                        case 2:
                            message.message_id = reader.readString();
                            break;
                        case 3:
                            message.message = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): HistoryEntry {
                return HistoryEntry.deserialize(bytes);
            }
        }
    }
    export class SubscriptionChangeHintRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rinfo?: BasicRequestInfo;
            original_transaction_id?: string;
            next_subscription_level?: UserSubscriptionInfo.Level;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rinfo" in data && data.rinfo != undefined) {
                    this.rinfo = data.rinfo;
                }
                if ("original_transaction_id" in data && data.original_transaction_id != undefined) {
                    this.original_transaction_id = data.original_transaction_id;
                }
                if ("next_subscription_level" in data && data.next_subscription_level != undefined) {
                    this.next_subscription_level = data.next_subscription_level;
                }
            }
        }
        get rinfo() {
            return pb_1.Message.getWrapperField(this, BasicRequestInfo, 3) as BasicRequestInfo;
        }
        set rinfo(value: BasicRequestInfo) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_rinfo() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get original_transaction_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set original_transaction_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_original_transaction_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get next_subscription_level() {
            return pb_1.Message.getFieldWithDefault(this, 2, UserSubscriptionInfo.Level.STANDARD) as UserSubscriptionInfo.Level;
        }
        set next_subscription_level(value: UserSubscriptionInfo.Level) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_next_subscription_level() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
            original_transaction_id?: string;
            next_subscription_level?: UserSubscriptionInfo.Level;
        }): SubscriptionChangeHintRequest {
            const message = new SubscriptionChangeHintRequest({});
            if (data.rinfo != null) {
                message.rinfo = BasicRequestInfo.fromObject(data.rinfo);
            }
            if (data.original_transaction_id != null) {
                message.original_transaction_id = data.original_transaction_id;
            }
            if (data.next_subscription_level != null) {
                message.next_subscription_level = data.next_subscription_level;
            }
            return message;
        }
        toObject() {
            const data: {
                rinfo?: ReturnType<typeof BasicRequestInfo.prototype.toObject>;
                original_transaction_id?: string;
                next_subscription_level?: UserSubscriptionInfo.Level;
            } = {};
            if (this.rinfo != null) {
                data.rinfo = this.rinfo.toObject();
            }
            if (this.original_transaction_id != null) {
                data.original_transaction_id = this.original_transaction_id;
            }
            if (this.next_subscription_level != null) {
                data.next_subscription_level = this.next_subscription_level;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_rinfo)
                writer.writeMessage(3, this.rinfo, () => this.rinfo.serialize(writer));
            if (this.has_original_transaction_id && this.original_transaction_id.length)
                writer.writeString(1, this.original_transaction_id);
            if (this.has_next_subscription_level)
                writer.writeEnum(2, this.next_subscription_level);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubscriptionChangeHintRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubscriptionChangeHintRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        reader.readMessage(message.rinfo, () => message.rinfo = BasicRequestInfo.deserialize(reader));
                        break;
                    case 1:
                        message.original_transaction_id = reader.readString();
                        break;
                    case 2:
                        message.next_subscription_level = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubscriptionChangeHintRequest {
            return SubscriptionChangeHintRequest.deserialize(bytes);
        }
    }
    export class CXPEvalRolloutInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            current_id?: string;
            basis_points?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("current_id" in data && data.current_id != undefined) {
                    this.current_id = data.current_id;
                }
                if ("basis_points" in data && data.basis_points != undefined) {
                    this.basis_points = data.basis_points;
                }
            }
        }
        get current_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set current_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get has_current_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get basis_points() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set basis_points(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get has_basis_points() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            current_id?: string;
            basis_points?: number;
        }): CXPEvalRolloutInfo {
            const message = new CXPEvalRolloutInfo({});
            if (data.current_id != null) {
                message.current_id = data.current_id;
            }
            if (data.basis_points != null) {
                message.basis_points = data.basis_points;
            }
            return message;
        }
        toObject() {
            const data: {
                current_id?: string;
                basis_points?: number;
            } = {};
            if (this.current_id != null) {
                data.current_id = this.current_id;
            }
            if (this.basis_points != null) {
                data.basis_points = this.basis_points;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_current_id && this.current_id.length)
                writer.writeString(1, this.current_id);
            if (this.has_basis_points)
                writer.writeUint32(2, this.basis_points);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CXPEvalRolloutInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CXPEvalRolloutInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.current_id = reader.readString();
                        break;
                    case 2:
                        message.basis_points = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CXPEvalRolloutInfo {
            return CXPEvalRolloutInfo.deserialize(bytes);
        }
    }
}
